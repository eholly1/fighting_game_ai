{
  "experiment_info": {
    "max_agents": 100,
    "last_updated": 1748775503.90451,
    "total_agents": 100
  },
  "agents": [
    {
      "agent_id": "gen1_elite_000",
      "generation": 1,
      "fitness": 349.1400000000109,
      "win_rate": 0.5,
      "avg_reward": 349.1400000000109,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define rushdown tactical parameters\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    \n    # Rushdown aggression levels\n    base_aggression = 0.8\n    winning_aggression = 0.9\n    losing_aggression = 0.6\n    \n    # Determine current aggression level based on health\n    if health_advantage > 0.3:\n        current_aggression = winning_aggression\n    elif health_advantage < -0.3:\n        current_aggression = losing_aggression\n    else:\n        current_aggression = base_aggression\n    \n    # Emergency defensive actions when very low health\n    if my_health < 0.2 and health_advantage < -0.4:\n        if opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        if distance > medium_range and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to create space\n        if distance < close_range:\n            # Try to escape close range when critically low\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Rushdown core: Always try to close distance when not in ultra-close range\n    if distance > ultra_close_range:\n        # Detect opponent trying to create distance\n        opponent_retreating = False\n        if relative_pos > 0 and opponent_velocity_x < -0.3:\n            opponent_retreating = True\n        elif relative_pos < 0 and opponent_velocity_x > 0.3:\n            opponent_retreating = True\n        \n        # Chase retreating opponent aggressively\n        if opponent_retreating and distance < medium_range:\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Standard approach when not ultra-close\n        if distance > far_range:\n            # At long range, mix projectiles with advancing\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9  # Projectile while advancing\n            else:\n                # Move toward opponent\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        elif distance > medium_range:\n            # Medium-far range: aggressive advance\n            approach_chance = current_aggression + 0.1\n            if random.random() < approach_chance:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Occasional projectile to mix up approach\n                if my_projectile_cooldown < 0.3:\n                    return 9\n                else:\n                    return 1 if relative_pos < 0 else 2\n        \n        elif distance > close_range:\n            # Medium range: prepare for rush\n            # Check if opponent is blocking heavily\n            if opponent_block_status > 0.7:\n                # Throw to break guard or reposition\n                if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                    return 9\n                else:\n                    # Close distance to grab/throw range\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            else:\n                # Advance aggressively\n                rush_chance = current_aggression\n                if random.random() < rush_chance:\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # Jump in for aerial approach\n                    if abs(height_diff) < 0.3:\n                        return 3\n                    else:\n                        return 1 if relative_pos < 0 else 2\n        \n        else:\n            # Close range but not ultra-close: final approach\n            if opponent_attack_status > 0.6:\n                # Opponent is attacking, block and advance\n                if relative_pos > 0:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n            else:\n                # Rush in for attack\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Ultra-close range combat (rushdown pressure)\n    else:\n        # Detect if opponent is attacking\n        if opponent_attack_status > 0.7:\n            # Opponent is attacking, decide whether to block or counter\n            if my_health < opponent_health * 0.7:\n                return 6  # Block when at health disadvantage\n            elif random.random() < 0.3:\n                return 6  # Sometimes block even when winning\n            else:\n                # Counter attack - favor faster punch\n                return 4\n        \n        # Detect if opponent is blocking heavily\n        elif opponent_block_status > 0.6:\n            # Mix up against blocking opponent\n            mixup_option = random.random()\n            if mixup_option < 0.25:\n                # Throw/projectile to break guard\n                if my_projectile_cooldown < 0.5:\n                    return 9\n                else:\n                    return 5  # Strong kick\n            elif mixup_option < 0.5:\n                # Reposition for different angle\n                if my_pos_x < 0.3:\n                    return 2  # Move right\n                elif my_pos_x > 0.7:\n                    return 1  # Move left\n                else:\n                    return 3  # Jump for overhead\n            elif mixup_option < 0.75:\n                return 5  # Kick to break guard\n            else:\n                return 4  # Quick punch\n        \n        # Opponent not attacking or blocking heavily - rushdown pressure\n        else:\n            # Apply continuous pressure with attack mixups\n            pressure_option = random.random()\n            \n            # Weight attacks based on current aggression\n            punch_threshold = 0.5 + (current_aggression - 0.5) * 0.3\n            kick_threshold = punch_threshold + 0",
      "fighting_style": "rushdown",
      "creation_time": 1748766291.371382,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_elite_000",
      "generation": 2,
      "fitness": 340.32000000001113,
      "win_rate": 0.0,
      "avg_reward": 340.32000000001113,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define rushdown tactical parameters\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    \n    # Rushdown aggression levels\n    base_aggression = 0.8\n    winning_aggression = 0.9\n    losing_aggression = 0.6\n    \n    # Determine current aggression level based on health\n    if health_advantage > 0.3:\n        current_aggression = winning_aggression\n    elif health_advantage < -0.3:\n        current_aggression = losing_aggression\n    else:\n        current_aggression = base_aggression\n    \n    # Emergency defensive actions when very low health\n    if my_health < 0.2 and health_advantage < -0.4:\n        if opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        if distance > medium_range and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to create space\n        if distance < close_range:\n            # Try to escape close range when critically low\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Rushdown core: Always try to close distance when not in ultra-close range\n    if distance > ultra_close_range:\n        # Detect opponent trying to create distance\n        opponent_retreating = False\n        if relative_pos > 0 and opponent_velocity_x < -0.3:\n            opponent_retreating = True\n        elif relative_pos < 0 and opponent_velocity_x > 0.3:\n            opponent_retreating = True\n        \n        # Chase retreating opponent aggressively\n        if opponent_retreating and distance < medium_range:\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Standard approach when not ultra-close\n        if distance > far_range:\n            # At long range, mix projectiles with advancing\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9  # Projectile while advancing\n            else:\n                # Move toward opponent\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        elif distance > medium_range:\n            # Medium-far range: aggressive advance\n            approach_chance = current_aggression + 0.1\n            if random.random() < approach_chance:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Occasional projectile to mix up approach\n                if my_projectile_cooldown < 0.3:\n                    return 9\n                else:\n                    return 1 if relative_pos < 0 else 2\n        \n        elif distance > close_range:\n            # Medium range: prepare for rush\n            # Check if opponent is blocking heavily\n            if opponent_block_status > 0.7:\n                # Throw to break guard or reposition\n                if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                    return 9\n                else:\n                    # Close distance to grab/throw range\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            else:\n                # Advance aggressively\n                rush_chance = current_aggression\n                if random.random() < rush_chance:\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # Jump in for aerial approach\n                    if abs(height_diff) < 0.3:\n                        return 3\n                    else:\n                        return 1 if relative_pos < 0 else 2\n        \n        else:\n            # Close range but not ultra-close: final approach\n            if opponent_attack_status > 0.6:\n                # Opponent is attacking, block and advance\n                if relative_pos > 0:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n            else:\n                # Rush in for attack\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Ultra-close range combat (rushdown pressure)\n    else:\n        # Detect if opponent is attacking\n        if opponent_attack_status > 0.7:\n            # Opponent is attacking, decide whether to block or counter\n            if my_health < opponent_health * 0.7:\n                return 6  # Block when at health disadvantage\n            elif random.random() < 0.3:\n                return 6  # Sometimes block even when winning\n            else:\n                # Counter attack - favor faster punch\n                return 4\n        \n        # Detect if opponent is blocking heavily\n        elif opponent_block_status > 0.6:\n            # Mix up against blocking opponent\n            mixup_option = random.random()\n            if mixup_option < 0.25:\n                # Throw/projectile to break guard\n                if my_projectile_cooldown < 0.5:\n                    return 9\n                else:\n                    return 5  # Strong kick\n            elif mixup_option < 0.5:\n                # Reposition for different angle\n                if my_pos_x < 0.3:\n                    return 2  # Move right\n                elif my_pos_x > 0.7:\n                    return 1  # Move left\n                else:\n                    return 3  # Jump for overhead\n            elif mixup_option < 0.75:\n                return 5  # Kick to break guard\n            else:\n                return 4  # Quick punch\n        \n        # Opponent not attacking or blocking heavily - rushdown pressure\n        else:\n            # Apply continuous pressure with attack mixups\n            pressure_option = random.random()\n            \n            # Weight attacks based on current aggression\n            punch_threshold = 0.5 + (current_aggression - 0.5) * 0.3\n            kick_threshold = punch_threshold + 0",
      "fighting_style": "rushdown",
      "creation_time": 1748769390.9783292,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_elite_000",
      "generation": 3,
      "fitness": 335.7730666666777,
      "win_rate": 0.0,
      "avg_reward": 329.1666666666776,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define rushdown tactical parameters\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    \n    # Rushdown aggression levels\n    base_aggression = 0.8\n    winning_aggression = 0.9\n    losing_aggression = 0.6\n    \n    # Determine current aggression level based on health\n    if health_advantage > 0.3:\n        current_aggression = winning_aggression\n    elif health_advantage < -0.3:\n        current_aggression = losing_aggression\n    else:\n        current_aggression = base_aggression\n    \n    # Emergency defensive actions when very low health\n    if my_health < 0.2 and health_advantage < -0.4:\n        if opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        if distance > medium_range and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to create space\n        if distance < close_range:\n            # Try to escape close range when critically low\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Rushdown core: Always try to close distance when not in ultra-close range\n    if distance > ultra_close_range:\n        # Detect opponent trying to create distance\n        opponent_retreating = False\n        if relative_pos > 0 and opponent_velocity_x < -0.3:\n            opponent_retreating = True\n        elif relative_pos < 0 and opponent_velocity_x > 0.3:\n            opponent_retreating = True\n        \n        # Chase retreating opponent aggressively\n        if opponent_retreating and distance < medium_range:\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Standard approach when not ultra-close\n        if distance > far_range:\n            # At long range, mix projectiles with advancing\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9  # Projectile while advancing\n            else:\n                # Move toward opponent\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        elif distance > medium_range:\n            # Medium-far range: aggressive advance\n            approach_chance = current_aggression + 0.1\n            if random.random() < approach_chance:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Occasional projectile to mix up approach\n                if my_projectile_cooldown < 0.3:\n                    return 9\n                else:\n                    return 1 if relative_pos < 0 else 2\n        \n        elif distance > close_range:\n            # Medium range: prepare for rush\n            # Check if opponent is blocking heavily\n            if opponent_block_status > 0.7:\n                # Throw to break guard or reposition\n                if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                    return 9\n                else:\n                    # Close distance to grab/throw range\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            else:\n                # Advance aggressively\n                rush_chance = current_aggression\n                if random.random() < rush_chance:\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # Jump in for aerial approach\n                    if abs(height_diff) < 0.3:\n                        return 3\n                    else:\n                        return 1 if relative_pos < 0 else 2\n        \n        else:\n            # Close range but not ultra-close: final approach\n            if opponent_attack_status > 0.6:\n                # Opponent is attacking, block and advance\n                if relative_pos > 0:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n            else:\n                # Rush in for attack\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Ultra-close range combat (rushdown pressure)\n    else:\n        # Detect if opponent is attacking\n        if opponent_attack_status > 0.7:\n            # Opponent is attacking, decide whether to block or counter\n            if my_health < opponent_health * 0.7:\n                return 6  # Block when at health disadvantage\n            elif random.random() < 0.3:\n                return 6  # Sometimes block even when winning\n            else:\n                # Counter attack - favor faster punch\n                return 4\n        \n        # Detect if opponent is blocking heavily\n        elif opponent_block_status > 0.6:\n            # Mix up against blocking opponent\n            mixup_option = random.random()\n            if mixup_option < 0.25:\n                # Throw/projectile to break guard\n                if my_projectile_cooldown < 0.5:\n                    return 9\n                else:\n                    return 5  # Strong kick\n            elif mixup_option < 0.5:\n                # Reposition for different angle\n                if my_pos_x < 0.3:\n                    return 2  # Move right\n                elif my_pos_x > 0.7:\n                    return 1  # Move left\n                else:\n                    return 3  # Jump for overhead\n            elif mixup_option < 0.75:\n                return 5  # Kick to break guard\n            else:\n                return 4  # Quick punch\n        \n        # Opponent not attacking or blocking heavily - rushdown pressure\n        else:\n            # Apply continuous pressure with attack mixups\n            pressure_option = random.random()\n            \n            # Weight attacks based on current aggression\n            punch_threshold = 0.5 + (current_aggression - 0.5) * 0.3\n            kick_threshold = punch_threshold + 0",
      "fighting_style": "rushdown",
      "creation_time": 1748772554.503244,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_elite_000",
      "generation": 4,
      "fitness": 329.7000000000111,
      "win_rate": 0.0,
      "avg_reward": 329.7000000000111,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define rushdown tactical parameters\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    \n    # Rushdown aggression levels\n    base_aggression = 0.8\n    winning_aggression = 0.9\n    losing_aggression = 0.6\n    \n    # Determine current aggression level based on health\n    if health_advantage > 0.3:\n        current_aggression = winning_aggression\n    elif health_advantage < -0.3:\n        current_aggression = losing_aggression\n    else:\n        current_aggression = base_aggression\n    \n    # Emergency defensive actions when very low health\n    if my_health < 0.2 and health_advantage < -0.4:\n        if opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        if distance > medium_range and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to create space\n        if distance < close_range:\n            # Try to escape close range when critically low\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Rushdown core: Always try to close distance when not in ultra-close range\n    if distance > ultra_close_range:\n        # Detect opponent trying to create distance\n        opponent_retreating = False\n        if relative_pos > 0 and opponent_velocity_x < -0.3:\n            opponent_retreating = True\n        elif relative_pos < 0 and opponent_velocity_x > 0.3:\n            opponent_retreating = True\n        \n        # Chase retreating opponent aggressively\n        if opponent_retreating and distance < medium_range:\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Standard approach when not ultra-close\n        if distance > far_range:\n            # At long range, mix projectiles with advancing\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9  # Projectile while advancing\n            else:\n                # Move toward opponent\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        elif distance > medium_range:\n            # Medium-far range: aggressive advance\n            approach_chance = current_aggression + 0.1\n            if random.random() < approach_chance:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Occasional projectile to mix up approach\n                if my_projectile_cooldown < 0.3:\n                    return 9\n                else:\n                    return 1 if relative_pos < 0 else 2\n        \n        elif distance > close_range:\n            # Medium range: prepare for rush\n            # Check if opponent is blocking heavily\n            if opponent_block_status > 0.7:\n                # Throw to break guard or reposition\n                if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                    return 9\n                else:\n                    # Close distance to grab/throw range\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            else:\n                # Advance aggressively\n                rush_chance = current_aggression\n                if random.random() < rush_chance:\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # Jump in for aerial approach\n                    if abs(height_diff) < 0.3:\n                        return 3\n                    else:\n                        return 1 if relative_pos < 0 else 2\n        \n        else:\n            # Close range but not ultra-close: final approach\n            if opponent_attack_status > 0.6:\n                # Opponent is attacking, block and advance\n                if relative_pos > 0:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n            else:\n                # Rush in for attack\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Ultra-close range combat (rushdown pressure)\n    else:\n        # Detect if opponent is attacking\n        if opponent_attack_status > 0.7:\n            # Opponent is attacking, decide whether to block or counter\n            if my_health < opponent_health * 0.7:\n                return 6  # Block when at health disadvantage\n            elif random.random() < 0.3:\n                return 6  # Sometimes block even when winning\n            else:\n                # Counter attack - favor faster punch\n                return 4\n        \n        # Detect if opponent is blocking heavily\n        elif opponent_block_status > 0.6:\n            # Mix up against blocking opponent\n            mixup_option = random.random()\n            if mixup_option < 0.25:\n                # Throw/projectile to break guard\n                if my_projectile_cooldown < 0.5:\n                    return 9\n                else:\n                    return 5  # Strong kick\n            elif mixup_option < 0.5:\n                # Reposition for different angle\n                if my_pos_x < 0.3:\n                    return 2  # Move right\n                elif my_pos_x > 0.7:\n                    return 1  # Move left\n                else:\n                    return 3  # Jump for overhead\n            elif mixup_option < 0.75:\n                return 5  # Kick to break guard\n            else:\n                return 4  # Quick punch\n        \n        # Opponent not attacking or blocking heavily - rushdown pressure\n        else:\n            # Apply continuous pressure with attack mixups\n            pressure_option = random.random()\n            \n            # Weight attacks based on current aggression\n            punch_threshold = 0.5 + (current_aggression - 0.5) * 0.3\n            kick_threshold = punch_threshold + 0",
      "fighting_style": "rushdown",
      "creation_time": 1748775503.904243,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_011",
      "generation": 1,
      "fitness": 326.2600000000102,
      "win_rate": 0.0,
      "avg_reward": 326.2600000000102,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 0.5\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_velocity = state[3] if len(state) > 3 else 0.0\n    my_y_velocity = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.5 if len(state) > 5 else False\n    my_blocking = state[6] > 0.5 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8]) if len(state) > 8 else 0.0\n    my_attack_cooldown = max(0.0, state[9]) if len(state) > 9 else 0.0\n    my_block_cooldown = max(0.0, state[10]) if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_velocity = state[14] if len(state) > 14 else 0.0\n    opp_y_velocity = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.5 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.5 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19]) if len(state) > 19 else 0.0\n    opp_attack_cooldown = max(0.0, state[20]) if len(state) > 20 else 0.0\n    opp_block_cooldown = max(0.0, state[21]) if len(state) > 21 else 0.0\n    \n    # Define hybrid fighter thresholds\n    close_range = 0.13\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.25\n    winning_margin = 0.15\n    losing_margin = -0.15\n    edge_threshold = 0.15\n    \n    # Calculate tactical variables\n    is_near_left_edge = my_x_pos < edge_threshold\n    is_near_right_edge = my_x_pos > (1.0 - edge_threshold)\n    is_cornered = is_near_left_edge or is_near_right_edge\n    opponent_closing_fast = abs(opp_x_velocity) > 0.3 and distance < 0.3\n    height_disadvantage = height_diff < -0.2\n    \n    # Emergency defensive responses\n    if my_stunned:\n        return 0  # Cannot act while stunned\n    \n    # Critical health survival mode\n    if my_health < critical_health and health_advantage < -0.3:\n        if opp_attacking and distance < close_range:\n            if my_block_cooldown < 0.2:\n                return 6  # Block immediate threat\n            else:\n                return 0  # Wait for block cooldown\n        elif distance > medium_range:\n            if my_projectile_cooldown < 0.3:\n                return 9  # Keep distance with projectiles\n            else:\n                # Maintain distance while waiting\n                if relative_pos > 0 and not is_near_right_edge:\n                    return 2  # Move away\n                elif relative_pos < 0 and not is_near_left_edge:\n                    return 1  # Move away\n                else:\n                    return 6  # Block if cornered\n        else:\n            # Medium range escape\n            if is_cornered:\n                return 6  # Block when cornered\n            else:\n                if relative_pos > 0:\n                    return 7  # Move left while blocking\n                else:\n                    return 8  # Move right while blocking\n    \n    # Opponent stunned - maximum punishment\n    if opp_stunned:\n        if distance < close_range:\n            if my_attack_cooldown < 0.1:\n                # Mix heavy and light attacks for optimal damage\n                if random.random() < 0.75:\n                    return 5  # Prefer kicks for damage\n                else:\n                    return 4  # Mix in punches for speed\n            else:\n                # Position for next attack\n                if abs(relative_pos) > 0.3:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Wait in optimal position\n        elif distance < medium_range:\n            # Close distance quickly\n            return 2 if relative_pos > 0 else 1\n        else:\n            # Too far for melee, use projectile\n            if my_projectile_cooldown < 0.2:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Counter opponent attacks\n    if opp_attacking:\n        if distance < close_range:\n            if my_block_cooldown < 0.2:\n                # Block and counter-move based on position\n                if is_cornered:\n                    return 6  # Pure block when cornered\n                elif random.random() < 0.6:\n                    return 6  # Standard block\n                else:\n                    # Mobile blocking\n                    return 7 if relative_pos > 0 else 8\n            else:\n                # Cannot block - evade\n                if not is_cornered:\n                    return 1 if relative_pos > 0 else 2\n                else:\n                    return 0  # Stay put if cornered\n        elif distance < medium_range and opponent_closing_fast:\n            # Prepare for incoming pressure\n            if my_block_cooldown < 0.3:\n                return 8 if relative_pos < 0 else 7  # Block while repositioning\n            else:\n                return 6  # Standard block\n    \n    # Winning strategy - controlled aggression\n    if health_advantage > winning_margin:\n        aggression_factor = min(1.2, 0.8 + (health_advantage * 0.8))\n        \n        if distance < close_range:\n            if my_attack_cooldown < 0.1:\n                if opp_blocking:\n                    # Break guard tactics\n                    action_roll = random.random()\n                    if action_roll < 0.4:\n                        return 5  # Heavy kick to break block\n                    elif action_roll < 0.7:\n                        return 4  # Quick punch\n                    else:\n                        # Reposition for angle attack\n                        if not is_cornered:\n                            return 2 if relative_pos < 0 else 1",
      "fighting_style": "evolved",
      "creation_time": 1748766291.3713868,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_005",
      "generation": 0,
      "fitness": 322.0000000000092,
      "win_rate": 0.0,
      "avg_reward": 322.0000000000092,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define rushdown tactical parameters\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    \n    # Rushdown aggression levels\n    base_aggression = 0.8\n    winning_aggression = 0.9\n    losing_aggression = 0.6\n    \n    # Determine current aggression level based on health\n    if health_advantage > 0.3:\n        current_aggression = winning_aggression\n    elif health_advantage < -0.3:\n        current_aggression = losing_aggression\n    else:\n        current_aggression = base_aggression\n    \n    # Emergency defensive actions when very low health\n    if my_health < 0.2 and health_advantage < -0.4:\n        if opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        if distance > medium_range and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to create space\n        if distance < close_range:\n            # Try to escape close range when critically low\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Rushdown core: Always try to close distance when not in ultra-close range\n    if distance > ultra_close_range:\n        # Detect opponent trying to create distance\n        opponent_retreating = False\n        if relative_pos > 0 and opponent_velocity_x < -0.3:\n            opponent_retreating = True\n        elif relative_pos < 0 and opponent_velocity_x > 0.3:\n            opponent_retreating = True\n        \n        # Chase retreating opponent aggressively\n        if opponent_retreating and distance < medium_range:\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Standard approach when not ultra-close\n        if distance > far_range:\n            # At long range, mix projectiles with advancing\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9  # Projectile while advancing\n            else:\n                # Move toward opponent\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        elif distance > medium_range:\n            # Medium-far range: aggressive advance\n            approach_chance = current_aggression + 0.1\n            if random.random() < approach_chance:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Occasional projectile to mix up approach\n                if my_projectile_cooldown < 0.3:\n                    return 9\n                else:\n                    return 1 if relative_pos < 0 else 2\n        \n        elif distance > close_range:\n            # Medium range: prepare for rush\n            # Check if opponent is blocking heavily\n            if opponent_block_status > 0.7:\n                # Throw to break guard or reposition\n                if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                    return 9\n                else:\n                    # Close distance to grab/throw range\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            else:\n                # Advance aggressively\n                rush_chance = current_aggression\n                if random.random() < rush_chance:\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # Jump in for aerial approach\n                    if abs(height_diff) < 0.3:\n                        return 3\n                    else:\n                        return 1 if relative_pos < 0 else 2\n        \n        else:\n            # Close range but not ultra-close: final approach\n            if opponent_attack_status > 0.6:\n                # Opponent is attacking, block and advance\n                if relative_pos > 0:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n            else:\n                # Rush in for attack\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Ultra-close range combat (rushdown pressure)\n    else:\n        # Detect if opponent is attacking\n        if opponent_attack_status > 0.7:\n            # Opponent is attacking, decide whether to block or counter\n            if my_health < opponent_health * 0.7:\n                return 6  # Block when at health disadvantage\n            elif random.random() < 0.3:\n                return 6  # Sometimes block even when winning\n            else:\n                # Counter attack - favor faster punch\n                return 4\n        \n        # Detect if opponent is blocking heavily\n        elif opponent_block_status > 0.6:\n            # Mix up against blocking opponent\n            mixup_option = random.random()\n            if mixup_option < 0.25:\n                # Throw/projectile to break guard\n                if my_projectile_cooldown < 0.5:\n                    return 9\n                else:\n                    return 5  # Strong kick\n            elif mixup_option < 0.5:\n                # Reposition for different angle\n                if my_pos_x < 0.3:\n                    return 2  # Move right\n                elif my_pos_x > 0.7:\n                    return 1  # Move left\n                else:\n                    return 3  # Jump for overhead\n            elif mixup_option < 0.75:\n                return 5  # Kick to break guard\n            else:\n                return 4  # Quick punch\n        \n        # Opponent not attacking or blocking heavily - rushdown pressure\n        else:\n            # Apply continuous pressure with attack mixups\n            pressure_option = random.random()\n            \n            # Weight attacks based on current aggression\n            punch_threshold = 0.5 + (current_aggression - 0.5) * 0.3\n            kick_threshold = punch_threshold + 0",
      "fighting_style": "rushdown",
      "creation_time": 1748763419.260764,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_029",
      "generation": 2,
      "fitness": 315.9000000000056,
      "win_rate": 0.0,
      "avg_reward": 315.9000000000056,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with defensive bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[0] if len(state) > 0 else 0.5\n    my_pos_y = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.5 if len(state) > 5 else False\n    my_blocking = state[6] > 0.5 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8] if len(state) > 8 else 0.0)\n    my_attack_cooldown = max(0.0, state[9] if len(state) > 9 else 0.0)\n    my_block_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    # Extract opponent status with defensive bounds checking  \n    opp_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opp_pos_x = state[11] if len(state) > 11 else 0.5\n    opp_pos_y = state[13] if len(state) > 13 else 0.5\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.5 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.5 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19] if len(state) > 19 else 0.0)\n    opp_attack_cooldown = max(0.0, state[20] if len(state) > 20 else 0.0)\n    opp_block_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Define hybrid fighter tactical ranges\n    point_blank_range = 0.06\n    very_close_range = 0.12\n    close_range = 0.18\n    medium_close_range = 0.25\n    medium_range = 0.35\n    medium_far_range = 0.45\n    far_range = 0.6\n    \n    # Hybrid fighting parameters - balanced approach\n    base_aggression = 0.75\n    defensive_threshold = 0.6\n    pressure_threshold = 0.8\n    zoning_threshold = 0.4\n    \n    # Calculate dynamic fighting style based on game state\n    health_ratio = my_health / max(opp_health, 0.1)\n    momentum_factor = health_advantage * 0.5\n    \n    # Determine current tactical mode\n    if health_advantage > 0.4:\n        tactical_mode = \"dominant\"\n        aggression_level = 0.9\n    elif health_advantage > 0.1:\n        tactical_mode = \"winning\"\n        aggression_level = 0.8\n    elif health_advantage > -0.1:\n        tactical_mode = \"even\"\n        aggression_level = 0.75\n    elif health_advantage > -0.4:\n        tactical_mode = \"losing\"\n        aggression_level = 0.6\n    else:\n        tactical_mode = \"desperate\"\n        aggression_level = 0.4\n    \n    # Emergency priority situations\n    if my_stunned and distance < close_range:\n        if opp_attacking:\n            return 6  # Block while stunned\n        elif my_block_cooldown < 0.1:\n            return 6  # Stay defensive\n        else:\n            # Try to create space while stunned\n            if distance < very_close_range:\n                return 1 if relative_pos > 0 else 2\n            else:\n                return 6\n    \n    # Critical health management\n    if my_health < 0.2:\n        if tactical_mode == \"desperate\":\n            if distance > medium_range:\n                # Desperate zoning\n                if my_projectile_cooldown < 0.2:\n                    return 9\n                else:\n                    return 6  # Block and wait\n            elif distance < very_close_range and not opp_attacking:\n                # All-in desperation attack\n                if my_attack_cooldown < 0.05:\n                    return 5 if random.random() < 0.7 else 4\n                else:\n                    return 6\n            else:\n                # Defensive positioning\n                return 6 if my_block_cooldown < 0.2 else 0\n    \n    # Capitalize on opponent vulnerabilities\n    if opp_stunned:\n        if distance < medium_range:\n            if distance > close_range:\n                # Rush in for punish\n                return 2 if relative_pos > 0 else 1\n            elif my_attack_cooldown < 0.1:\n                # Optimal punish combo\n                punish_choice = random.random()\n                if punish_choice < 0.6:\n                    return 5  # Heavy punish\n                elif punish_choice < 0.85:\n                    return 4  # Quick punish\n                else:\n                    return 9 if my_projectile_cooldown < 0.1 else 5\n            else:\n                # Position for punish\n                if distance > very_close_range:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Wait for attack cooldown\n        else:\n            # Close distance quickly\n            return 2 if relative_pos > 0 else 1\n    \n    # Opponent attack response - hybrid defensive tactics\n    if opp_attacking:\n        if distance < close_range:\n            # Close range defense with positioning\n            if my_block_cooldown < 0.1:\n                if tactical_mode in [\"losing\", \"desperate\"]:\n                    return 6  # Pure defense when behind\n                elif distance < very_close_range:\n                    return 6  # Block at point blank\n                else:\n                    # Block with positioning for counter\n                    return 8 if relative_pos > 0 else 7\n            else:\n                # Evasive movement when can't block\n                evasion_choice = random.random()\n                if evasion_choice < 0.4:\n                    return 1 if relative_pos > 0 else 2  # Lateral movement\n                elif evasion_choice < 0.7:\n                    return 3  # Jump evasion\n                else:\n                    return 0  # Stay and brace\n        elif distance < medium_range:\n            # Medium range - maintain spacing or advance with block\n            if tactical_mode in [\"winning\", \"dominant\"]:\n                return 8",
      "fighting_style": "evolved",
      "creation_time": 1748769390.9783418,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_009",
      "generation": 4,
      "fitness": 313.8800000000029,
      "win_rate": 0.5,
      "avg_reward": 313.8800000000029,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = max(0.0, min(1.0, state[2] if len(state) > 2 else 0.5))\n    my_velocity_x = max(-1.0, min(1.0, state[4] if len(state) > 4 else 0.0))\n    my_attack_status = max(0.0, min(1.0, state[7] if len(state) > 7 else 0.0))\n    my_block_status = max(0.0, min(1.0, state[8] if len(state) > 8 else 0.0))\n    my_projectile_cooldown = max(0.0, min(1.0, state[10] if len(state) > 10 else 0.0))\n    \n    opponent_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opponent_pos_x = max(0.0, min(1.0, state[13] if len(state) > 13 else 0.5))\n    opponent_velocity_x = max(-1.0, min(1.0, state[15] if len(state) > 15 else 0.0))\n    opponent_attack_status = max(0.0, min(1.0, state[18] if len(state) > 18 else 0.0))\n    opponent_block_status = max(0.0, min(1.0, state[19] if len(state) > 19 else 0.0))\n    opponent_projectile_cooldown = max(0.0, min(1.0, state[21] if len(state) > 21 else 0.0))\n    \n    # Enhanced rushdown tactical parameters\n    ultra_close_range = 0.06\n    close_range = 0.12\n    medium_close_range = 0.2\n    medium_range = 0.3\n    far_range = 0.45\n    \n    # Dynamic aggression system\n    base_aggression = 0.85\n    health_multiplier = 1.0 + (health_advantage * 0.3)\n    momentum_multiplier = 1.0\n    \n    # Calculate momentum based on recent positioning\n    if distance < close_range and my_velocity_x != 0:\n        momentum_multiplier = 1.15\n    elif distance > medium_range and abs(my_velocity_x) < 0.1:\n        momentum_multiplier = 0.9\n    \n    current_aggression = min(0.95, base_aggression * health_multiplier * momentum_multiplier)\n    \n    # Critical health emergency protocols\n    if my_health < 0.15:\n        if opponent_attack_status > 0.6:\n            return 6  # Desperate block\n        if distance > medium_range and my_projectile_cooldown < 0.2:\n            return 9  # Last resort projectile\n        if distance < close_range and opponent_health > 0.4:\n            # Try to escape when critically low\n            escape_direction = 7 if relative_pos > 0 else 8\n            return escape_direction\n    \n    # Opponent pattern recognition\n    opponent_defensive = opponent_block_status > 0.5\n    opponent_aggressive = opponent_attack_status > 0.4\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.2) or (relative_pos < 0 and opponent_velocity_x > 0.2)\n    opponent_stationary = abs(opponent_velocity_x) < 0.1\n    \n    # Corner detection and exploitation\n    opponent_cornered = (opponent_pos_x < 0.15) or (opponent_pos_x > 0.85)\n    im_cornered = (my_pos_x < 0.15) or (my_pos_x > 0.85)\n    \n    # Escape corner when pressured\n    if im_cornered and distance < medium_close_range and opponent_aggressive:\n        if my_pos_x < 0.15:\n            return 8 if opponent_attack_status > 0.6 else 2  # Move right, block if needed\n        else:\n            return 7 if opponent_attack_status > 0.6 else 1  # Move left, block if needed\n    \n    # Enhanced distance-based rushdown strategy\n    if distance > ultra_close_range:\n        \n        # Long range: Setup and projectile pressure\n        if distance > far_range:\n            if my_projectile_cooldown < 0.3:\n                # Use projectiles to control space and approach\n                if opponent_stationary or opponent_defensive:\n                    return 9\n                elif random.random() < 0.4:\n                    return 9\n            \n            # Aggressive advance with occasional jump-ins\n            advance_method = random.random()\n            if advance_method < 0.15 and abs(height_diff) < 0.4:\n                return 3  # Jump approach\n            elif relative_pos > 0:\n                return 2  # Ground advance right\n            else:\n                return 1  # Ground advance left\n        \n        # Medium-far range: Increase pressure\n        elif distance > medium_range:\n            if opponent_retreating:\n                # Chase aggressively\n                chase_speed = current_aggression + 0.1\n                if random.random() < chase_speed:\n                    if abs(height_diff) < 0.2 and random.random() < 0.2:\n                        return 3  # Jump chase\n                    elif relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            \n            # Mix projectiles with advance\n            if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                return 9\n            elif relative_pos > 0:\n                return 2\n            else:\n                return 1\n        \n        # Medium-close range: Prepare for engagement\n        elif distance > medium_close_range:\n            if opponent_defensive:\n                # Setup for guard break\n                if my_projectile_cooldown < 0.5 and random.random() < 0.25:\n                    return 9  # Projectile to test guard\n                elif random.random() < 0.3:\n                    return 3  # Jump for overhead setup\n                else:\n                    # Continue advance\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            elif opponent_aggressive:\n                # Counter-approach with blocking advance\n                if random.random() < 0.4:\n                    return 8 if relative_pos > 0 else 7\n                else:\n                    return 2 if relative_pos > 0 else 1\n            else:\n                # Standard advance\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        # Close range: Final approach phase\n        elif distance > close_range:\n            if opponent_attack_status > 0.5:\n                # Opponent attacking, block and advance or counter\n                if my_health < opponent_health * 0.8:\n                    return 8 if relative_pos > 0 else 7  # Block advance\n                elif random.random() < 0.3:\n                    return 6  # Pure block\n                else:\n                    return",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904267,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_011",
      "generation": 2,
      "fitness": 310.8800000000022,
      "win_rate": 0.5,
      "avg_reward": 310.8800000000022,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with defensive bounds checking\n    my_health = max(0.0, min(1.0, state[1]))\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = max(0.0, state[8])\n    my_attack_cooldown = max(0.0, state[9])\n    my_block_cooldown = max(0.0, state[10])\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[12]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = max(0.0, state[19])\n    opp_attack_cooldown = max(0.0, state[20])\n    opp_block_cooldown = max(0.0, state[21])\n    \n    # Hybrid fighter tactical ranges - balanced approach\n    point_blank_range = 0.06\n    close_range = 0.15\n    medium_range = 0.28\n    far_range = 0.45\n    max_range = 0.7\n    \n    # Dynamic aggression system based on multiple factors\n    base_aggression = 0.7\n    health_aggression_modifier = health_advantage * 0.4\n    distance_aggression_modifier = max(0.0, (0.3 - distance) * 0.5)\n    current_aggression = max(0.2, min(0.95, base_aggression + health_aggression_modifier + distance_aggression_modifier))\n    \n    # Defensive priority calculation\n    defense_priority = 0.6 - (health_advantage * 0.3) + (0.4 if my_health < 0.3 else 0.0)\n    defense_priority = max(0.1, min(0.9, defense_priority))\n    \n    # Counter-attack window detection\n    counter_window = not opp_attacking and opp_attack_cooldown > 0.2 and my_attack_cooldown < 0.15\n    \n    # Positioning awareness\n    wall_distance_left = my_x_pos\n    wall_distance_right = 1.0 - my_x_pos\n    near_wall = wall_distance_left < 0.2 or wall_distance_right < 0.2\n    opp_cornered = (opp_x_pos < 0.15 or opp_x_pos > 0.85)\n    \n    # Movement prediction\n    opp_closing_in = (relative_pos > 0 and opp_x_velocity > 0.1) or (relative_pos < 0 and opp_x_velocity < -0.1)\n    opp_retreating = (relative_pos > 0 and opp_x_velocity < -0.1) or (relative_pos < 0 and opp_x_velocity > 0.1)\n    \n    # Critical situation handling - highest priority\n    if my_stunned:\n        if distance < close_range and opp_attacking:\n            return 6 if my_block_cooldown < 0.3 else 0\n        elif opp_closing_in:\n            return 6 if my_block_cooldown < 0.5 else 0\n        else:\n            # Try to create space while stunned\n            if distance < medium_range:\n                return 7 if relative_pos < 0 else 8\n            else:\n                return 9 if my_projectile_cooldown < 0.2 else 6\n    \n    # Emergency health situations\n    if my_health < 0.2:\n        if distance > far_range and my_projectile_cooldown < 0.1:\n            return 9  # Desperate projectile spam\n        elif distance < close_range and opp_attacking:\n            return 6  # Survival blocking\n        elif distance < close_range and not opp_blocking and my_attack_cooldown < 0.1:\n            # All-in desperation attack\n            return 5 if random.random() < 0.7 else 4\n        else:\n            # Evasive movement with blocking\n            if near_wall:\n                return 8 if wall_distance_left < wall_distance_right else 7\n            else:\n                return 7 if relative_pos > 0 else 8\n    \n    # Capitalize on stunned opponent\n    if opp_stunned:\n        if distance < close_range and my_attack_cooldown < 0.1:\n            # Maximize damage on stunned opponent\n            combo_choice = random.random()\n            if combo_choice < 0.6:\n                return 5  # Heavy damage\n            elif combo_choice < 0.85:\n                return 4  # Quick follow-up\n            else:\n                return 9 if my_projectile_cooldown < 0.1 else 5\n        elif distance >= close_range:\n            # Rush in for combo opportunity\n            return 2 if relative_pos > 0 else 1\n        else:\n            return 0  # Wait for attack cooldown\n    \n    # Defensive responses to opponent attacks\n    if opp_attacking:\n        if distance < point_blank_range:\n            return 6 if my_block_cooldown < 0.2 else 0\n        elif distance < close_range:\n            # Block with positioning for counter\n            if my_block_cooldown < 0.1:\n                spacing_direction = 2 if relative_pos > 0 else 1\n                return 8 if spacing_direction == 2 else 7\n            else:\n                # Evasive movement\n                if not near_wall:\n                    return 3 if random.random() < 0.4 else (1 if relative_pos > 0 else 2)\n                else:\n                    return 3\n        elif distance < medium_range:\n            # Medium range defense with gap closing\n            return 8 if relative_pos > 0 else 7\n        else:\n            # Long range - projectile counter or movement\n            if my_projectile_cooldown < 0.1 and random.random() < 0.6:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Range-specific hybrid tactics\n    if distance <= point_blank_range:\n        # Point blank - explosive mixups\n        if my_attack_cooldown < 0.05:\n            if opp_blocking:\n                # Guard break sequences\n                if my_projectile_cooldown < 0.1 and random.random() < 0.3:\n                    return 9  # Point blank projectile surprise\n                elif random.random() < 0.6:\n                    return 5  # Power through block\n                else:\n                    # Micro spacing for better angle\n                    if random.random() < 0.5:\n                        return 1 if relative_pos > 0.3 else 2",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978343,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_009",
      "generation": 3,
      "fitness": 307.5000000000037,
      "win_rate": 0.0,
      "avg_reward": 307.5000000000037,
      "code": "def get_action(state):\n    import random\n    import math\n    import numpy as np\n    \n    # Extract and validate key state information with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information\n    my_x_pos = state[0]\n    my_y_pos = state[1] \n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_x_pos = state[11]\n    opp_y_pos = state[12]\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Advanced tactical parameters\n    close_range = 0.14\n    medium_range = 0.32\n    far_range = 0.5\n    \n    # Enhanced adaptive aggression system\n    base_aggression = 0.65\n    health_ratio = my_health / max(0.05, opp_health)\n    momentum_factor = health_advantage * 0.3\n    \n    # Calculate dynamic aggression level\n    if health_advantage > 0.5:\n        aggression_level = min(0.9, base_aggression * 1.6 + momentum_factor)\n    elif health_advantage > 0.2:\n        aggression_level = base_aggression * 1.3 + momentum_factor\n    elif health_advantage < -0.5:\n        aggression_level = max(0.25, base_aggression * 0.5 + momentum_factor)\n    elif health_advantage < -0.2:\n        aggression_level = base_aggression * 0.7 + momentum_factor\n    else:\n        aggression_level = base_aggression + momentum_factor * 0.5\n    \n    # Enhanced positioning awareness\n    near_left_wall = my_x_pos < 0.2\n    near_right_wall = my_x_pos > 0.8\n    in_corner = near_left_wall or near_right_wall\n    center_stage = 0.3 < my_x_pos < 0.7\n    \n    # Advanced movement prediction\n    opp_closing_fast = (relative_pos > 0 and opp_x_vel > 0.25) or (relative_pos < 0 and opp_x_vel < -0.25)\n    opp_retreating_fast = (relative_pos > 0 and opp_x_vel < -0.25) or (relative_pos < 0 and opp_x_vel > 0.25)\n    opp_aerial = abs(opp_y_vel) > 0.2 or abs(height_diff) > 0.3\n    \n    # Critical state overrides\n    if my_stunned > 0.5:\n        return 0\n    \n    # Enhanced critical health management\n    if my_health < 0.25:\n        if opp_attacking > 0.6 and distance < close_range:\n            return 6  # Emergency defense\n        elif distance > medium_range and my_projectile_cd < 0.15:\n            if random.random() < 0.8:\n                return 9  # Projectile harassment\n        \n        # Improved escape sequences\n        if distance < medium_range:\n            if in_corner:\n                if near_left_wall and relative_pos <= 0:\n                    return 8 if random.random() < 0.7 else 3\n                elif near_right_wall and relative_pos >= 0:\n                    return 7 if random.random() < 0.7 else 3\n                else:\n                    return 3  # Jump escape\n            else:\n                # Enhanced retreat with options\n                if opp_closing_fast:\n                    return 6  # Block incoming rush\n                else:\n                    retreat_choice = random.random()\n                    if retreat_choice < 0.6:\n                        return 7 if relative_pos > 0 else 8\n                    elif retreat_choice < 0.8:\n                        return 3  # Jump retreat\n                    else:\n                        return 9 if my_projectile_cd < 0.3 else 6\n    \n    # Enhanced opponent vulnerability exploitation\n    if opp_stunned > 0.4:\n        if distance <= close_range:\n            # Maximum damage combinations\n            if abs(height_diff) > 0.2:\n                if my_y_pos < opp_y_pos:\n                    return 3  # Jump strike\n                else:\n                    return 5  # Downward kick\n            else:\n                combo_roll = random.random()\n                if combo_roll < 0.5:\n                    return 5  # Heavy damage\n                elif combo_roll < 0.75:\n                    return 4  # Fast follow-up\n                else:\n                    return 3  # Repositioning attack\n        elif distance <= medium_range:\n            # Quick gap closing\n            if abs(height_diff) > 0.25:\n                return 3\n            elif my_projectile_cd < 0.2 and random.random() < 0.4:\n                return 9  # Projectile punish\n            else:\n                return 2 if relative_pos > 0 else 1\n        else:\n            # Long range punishment\n            if my_projectile_cd < 0.25:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Advanced defensive responses with counter-attack options\n    if opp_attacking > 0.6:\n        if distance <= close_range:\n            # Close range defense with calculated risks\n            if aggression_level > 0.7 and my_health > opp_health * 1.2:\n                # Aggressive counter system\n                counter_roll = random.random()\n                if counter_roll < 0.35:\n                    return 4  # Quick counter\n                elif counter_roll < 0.55:\n                    return 3  # Jump counter\n                elif counter_roll < 0.75:\n                    return 6  # Safe block\n                else:\n                    return 5  # Risk/reward counter\n            else:\n                # Conservative defense with mobility\n                defense_roll = random.random()\n                if defense_roll < 0.6:\n                    return 6  # Primary defense\n                elif defense_roll < 0.8:\n                    return 7 if relative_pos > 0 else 8  # Evasive movement\n                else:\n                    return 3  # Jump defense\n        elif distance <= medium_range:\n            # Medium range threat response\n            if opp_closing_fast:\n                if my_projectile_cd < 0.2 and random.random() < 0.6:\n                    return 9  # Interrupt approach\n                else:\n                    return 6  # Prepare defense\n            else:\n                # Maintain range advantage\n                if my_projectile_cd < 0.3:\n                    return 9\n                elif aggression_level > 0.6:\n                    return 2 if relative_pos > 0 else 1",
      "fighting_style": "evolved",
      "creation_time": 1748772554.5032582,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_012",
      "generation": 1,
      "fitness": 307.38000000000136,
      "win_rate": 0.5,
      "avg_reward": 307.38000000000136,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity = state[3]\n    opponent_velocity = state[14]\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Enhanced tactical parameters for improved hit-and-run\n    strike_range = 0.14\n    danger_zone = 0.20\n    medium_range = 0.35\n    safe_projectile_range = 0.50\n    critical_health = 0.25\n    winning_margin = 0.25\n    retreat_health_threshold = -0.35\n    \n    # Track momentum and create unpredictability\n    momentum_factor = abs(my_velocity) + abs(opponent_velocity)\n    unpredictability = random.random()\n    \n    # Critical health emergency protocol\n    if my_health < critical_health or health_advantage < retreat_health_threshold:\n        if distance < danger_zone:\n            # Emergency retreat with maximum protection\n            if opponent_attack_status > 0.3:\n                # Opponent attacking - defensive retreat\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                # Quick escape\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n        elif distance < safe_projectile_range and projectile_cooldown < 0.15:\n            return 9  # Keep distance with projectile\n        else:\n            # Defensive positioning\n            if unpredictability < 0.4:\n                return 6  # Block\n            elif unpredictability < 0.7:\n                return 3  # Jump for evasion\n            else:\n                return 0  # Wait for opportunity\n    \n    # Aggressive finishing when opponent is vulnerable\n    if health_advantage > winning_margin and opponent_health < 0.35:\n        if distance < strike_range:\n            # Finishing combinations\n            if opponent_block_status < 0.2:\n                finish_choice = unpredictability\n                if finish_choice < 0.5:\n                    return 5  # Powerful kick\n                elif finish_choice < 0.8:\n                    return 4  # Quick punch\n                else:\n                    # Feint retreat then counter\n                    if relative_pos > 0:\n                        return 1  # Move away briefly\n                    else:\n                        return 2  # Move away briefly\n            else:\n                # Opponent blocking - reposition\n                if relative_pos > 0:\n                    return 2  # Circle right\n                else:\n                    return 1  # Circle left\n        elif distance < medium_range:\n            # Aggressive approach for finish\n            if opponent_projectile_cooldown > 0.4:\n                if relative_pos > 0:\n                    return 2  # Move in\n                else:\n                    return 1  # Move in\n            elif projectile_cooldown < 0.1:\n                return 9  # Projectile pressure\n    \n    # Core hit-and-run strategy - refined\n    if distance < strike_range:\n        # In striking range - hit or run decision\n        if my_attack_status > 0.3:\n            # Currently attacking - prepare immediate retreat\n            retreat_direction = random.random()\n            if retreat_direction < 0.6:\n                # Direct retreat\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n            else:\n                # Protected retreat\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        # Evaluate strike opportunity\n        if opponent_block_status > 0.4:\n            # Opponent blocking - avoid engagement\n            evasion_choice = unpredictability\n            if evasion_choice < 0.4:\n                # Quick retreat\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            elif evasion_choice < 0.7:\n                # Jump over/away\n                return 3  # Jump\n            else:\n                # Protected withdrawal\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        # Strike opportunity available\n        if opponent_attack_status > 0.5:\n            # Opponent attacking - counter or evade\n            if health_advantage > 0 and unpredictability < 0.4:\n                # Counter attack\n                return 4  # Quick punch counter\n            else:\n                # Evasive maneuver\n                if unpredictability < 0.5:\n                    return 3  # Jump\n                else:\n                    if relative_pos > 0:\n                        return 7  # Move left with block\n                    else:\n                        return 8  # Move right with block\n        \n        # Clean strike opportunity\n        strike_decision = unpredictability\n        if strike_decision < 0.45:\n            return 4  # Fast punch for hit-and-run\n        elif strike_decision < 0.7:\n            return 5  # Kick for damage\n        elif strike_decision < 0.85:\n            # Feint - no strike, immediate retreat\n            if relative_pos > 0:\n                return 1  # Move away\n            else:\n                return 2  # Move away\n        else:\n            # Mix up with jump\n            return 3  # Jump attack/evasion\n    \n    elif distance < danger_zone:\n        # Danger zone - prioritize repositioning\n        threat_assessment = opponent_attack_status + (1.0 - opponent_projectile_cooldown)\n        \n        if threat_assessment > 0.6:\n            # High threat - defensive movement\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n        \n        # Standard retreat from danger zone\n        retreat_style = unpredictability\n        if retreat_style < 0.5:\n            # Direct retreat\n            if relative_pos > 0:\n                return 1  # Move left\n            else:\n                return 2  # Move right\n        elif retreat_style < 0.75:\n            # Jump retreat\n            return 3  # Jump away\n        else:\n            # Protected retreat\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n    \n    elif distance < medium_range:\n        # Medium range - tactical positioning\n        # Assess opponent patterns and vulnerabilities\n        opponent_vulnerable = (opponent_attack_status > 0.4 or \n                             opponent_projectile_cooldown > 0.4 or\n                             momentum_factor > 0.5)\n        \n        if opponent_vulnerable and health_advantage > -0.15:\n            # Setup for hit-and-run approach\n            approach_style = unpredictability\n            if approach_style < 0.3:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2  # Move right",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371389,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_024",
      "generation": 1,
      "fitness": 303.6600000000006,
      "win_rate": 0.5,
      "avg_reward": 303.6600000000006,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, min(1.0, state[1]))\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = max(0.0, state[8])\n    my_attack_cooldown = max(0.0, state[9])\n    my_block_cooldown = max(0.0, state[10])\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[12]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = max(0.0, state[19])\n    opp_attack_cooldown = max(0.0, state[20])\n    opp_block_cooldown = max(0.0, state[21])\n    \n    # Define pressure fighter ranges and thresholds\n    very_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.28\n    far_range = 0.45\n    \n    # Calculate pressure intensity based on game state\n    base_aggression = 0.85\n    health_multiplier = 1.0\n    \n    if health_advantage > 0.3:\n        health_multiplier = 1.4  # Maximum aggression when dominating\n    elif health_advantage > 0.1:\n        health_multiplier = 1.2  # High aggression when winning\n    elif health_advantage < -0.3:\n        health_multiplier = 0.5  # Defensive when losing badly\n    elif health_advantage < -0.1:\n        health_multiplier = 0.7  # Cautious when behind\n    \n    pressure_intensity = base_aggression * health_multiplier\n    \n    # Emergency situations - highest priority\n    if my_stunned:\n        if distance < close_range and opp_attacking:\n            return 6  # Block when stunned and under attack\n        elif distance > medium_range:\n            return 9 if my_projectile_cooldown < 0.2 else 6\n        else:\n            return 6  # Default to blocking when stunned\n    \n    # Critical health situations\n    if my_health < 0.15:\n        if distance > far_range:\n            return 9 if my_projectile_cooldown < 0.1 else 6\n        elif distance < very_close_range and not opp_attacking:\n            # Desperate all-in attack\n            return 5 if my_attack_cooldown < 0.1 else 4\n        else:\n            return 6  # Survive mode\n    \n    # Capitalize on stunned opponent immediately\n    if opp_stunned:\n        if distance < close_range:\n            if my_attack_cooldown < 0.1:\n                # Choose optimal attack for stunned opponent\n                return 5 if random.random() < 0.8 else 4\n            else:\n                # Get into perfect position while they're stunned\n                if distance > very_close_range:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Wait for attack cooldown\n        else:\n            # Rush in while they can't defend\n            return 2 if relative_pos > 0 else 1\n    \n    # Counter opponent attacks with smart defense\n    if opp_attacking:\n        if distance < close_range:\n            if my_block_cooldown < 0.1:\n                # Block with positioning to maintain pressure\n                if distance < very_close_range:\n                    return 6  # Pure block at point blank\n                else:\n                    # Block while positioning for counter\n                    counter_direction = 2 if relative_pos > 0 else 1\n                    return 8 if counter_direction == 2 else 7\n            else:\n                # Can't block - evasive movement\n                if abs(my_x_velocity) < 0.1:  # Not already moving\n                    return 2 if relative_pos < 0 else 1  # Move away from attack\n                else:\n                    return 3  # Jump to avoid\n        elif distance < medium_range:\n            # Medium range attack incoming - close gap with block\n            return 8 if relative_pos > 0 else 7\n    \n    # Primary pressure fighter tactics by range\n    if distance < very_close_range:\n        # Point blank range - maximum aggression\n        if my_attack_cooldown < 0.05:\n            if opp_blocking:\n                # Break guard with varied timing\n                guard_break_chance = 0.6 + (health_advantage * 0.2)\n                if random.random() < guard_break_chance:\n                    # Mix heavy and light attacks vs blockers\n                    return 5 if random.random() < 0.7 else 4\n                else:\n                    # Reposition slightly to find opening\n                    micro_adjust = random.random()\n                    if micro_adjust < 0.4:\n                        return 1 if relative_pos > 0.5 else 2\n                    else:\n                        return 0  # Wait for opening\n            else:\n                # Unblocked opponent - devastating combos\n                combo_choice = random.random()\n                if combo_choice < 0.4:\n                    return 4  # Fast punch starter\n                elif combo_choice < 0.75:\n                    return 5  # Power kick\n                else:\n                    # Surprise close range projectile\n                    return 9 if my_projectile_cooldown < 0.1 else 4\n        else:\n            # Attack cooling down - maintain suffocating pressure\n            if opp_block_cooldown > 0.3:\n                # Opponent can't block soon - stay close\n                pressure_action = random.random()\n                if pressure_action < 0.5:\n                    return 0  # Stay ready\n                elif pressure_action < 0.8:\n                    # Micro movements to stay optimal\n                    return 2 if relative_pos < -0.2 else 1 if relative_pos > 0.2 else 0\n                else:\n                    return 6  # Brief block to mix rhythm\n            else:\n                # Keep close pressure alive\n                return 0 if random.random() < 0.6 else 6\n    \n    elif distance < close_range:\n        # Close range - primary engagement zone\n        if my_attack_cooldown < 0.1:\n            # Ready to attack\n            if opp_attacking:\n                # Counter attack opportunity\n                return 5 if random.random() < 0.8 else 4\n            elif opp_blocking:\n                # Pressure blocker with mix-ups\n                if random.random() < pressure_intensity:\n                    attack_mix = random.random()\n                    if attack_mix < 0.5:\n                        return 4  # Quick punch\n                    elif attack_mix < 0.8:\n                        return 5",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371391,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_014",
      "generation": 1,
      "fitness": 302.1800000000002,
      "win_rate": 0.5,
      "avg_reward": 302.1800000000002,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract comprehensive fighter information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_x_pos = state[0] if len(state) > 0 else 0.0\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_velocity = state[3] if len(state) > 3 else 0.0\n    my_y_velocity = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.5 if len(state) > 5 else False\n    my_blocking = state[6] > 0.5 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = state[8] if len(state) > 8 else 0.0\n    my_attack_cooldown = state[9] if len(state) > 9 else 0.0\n    my_block_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_health = state[12] if len(state) > 12 else 1.0\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_velocity = state[14] if len(state) > 14 else 0.0\n    opp_y_velocity = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.5 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.5 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = state[19] if len(state) > 19 else 0.0\n    opp_attack_cooldown = state[20] if len(state) > 20 else 0.0\n    opp_block_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define hybrid fighter strategic parameters\n    close_range = 0.14\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.25\n    dominant_health = 0.3\n    desperate_health = -0.5\n    \n    # Calculate adaptive aggression based on multiple factors\n    base_aggression = 0.65  # Balanced baseline\n    aggression_modifier = 1.0\n    \n    # Health-based aggression adjustment\n    if health_advantage > dominant_health:\n        aggression_modifier = 1.2  # More aggressive when winning\n    elif health_advantage < desperate_health:\n        aggression_modifier = 1.4  # Desperate aggression when losing badly\n    elif health_advantage < -0.2:\n        aggression_modifier = 0.8  # More cautious when losing\n    \n    # Distance-based aggression\n    if distance < close_range:\n        aggression_modifier *= 1.1  # Slightly more aggressive up close\n    elif distance > far_range:\n        aggression_modifier *= 0.9  # Slightly more cautious at range\n    \n    current_aggression = min(1.0, base_aggression * aggression_modifier)\n    \n    # Emergency situations - highest priority\n    if my_stunned:\n        if distance < close_range and opp_attacking:\n            return 6  # Block while stunned\n        elif distance > medium_range:\n            return 9 if my_projectile_cooldown < 0.1 else 6\n        else:\n            return 6  # Default to blocking when stunned\n    \n    # Critical health emergency protocols\n    if my_health < critical_health and health_advantage < desperate_health:\n        if distance > far_range:\n            # Try to maintain distance and use projectiles\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                return 6  # Block while waiting for cooldown\n        elif distance < close_range and opp_attacking:\n            return 6  # Defensive blocking\n        elif distance < close_range:\n            # Desperate close combat\n            return 5 if random.random() < 0.6 else 4\n        else:\n            # Try to get to optimal range\n            if relative_pos > 0:\n                return 8  # Move with blocking\n            else:\n                return 7\n    \n    # Opponent stunned - capitalize with hybrid approach\n    if opp_stunned:\n        if distance < close_range:\n            if my_attack_cooldown < 0.1:\n                return 5 if random.random() < 0.7 else 4  # Prefer heavy attacks\n            else:\n                return 0  # Wait for attack cooldown\n        elif distance < medium_range:\n            # Close distance quickly\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        else:\n            # Use projectile if available, otherwise close distance\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Opponent attacking - hybrid defensive response\n    if opp_attacking:\n        if distance < close_range:\n            if my_block_cooldown < 0.1:\n                # Smart blocking with positioning\n                if health_advantage > 0.1:\n                    # Counter-attack when ahead\n                    if random.random() < 0.4:\n                        return 5 if my_attack_cooldown < 0.1 else 6\n                    else:\n                        return 6\n                else:\n                    # Pure defense when behind\n                    return 6\n            else:\n                # Can't block - try to reposition\n                if abs(relative_pos) > 0.3:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    return 3  # Jump to avoid attack\n        elif distance < medium_range:\n            # Medium range against attacking opponent\n            if health_advantage > 0.2:\n                # Rush in for counter when winning\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n            else:\n                # Cautious approach when not winning\n                if relative_pos > 0:\n                    return 8\n                else:\n                    return 7\n        else:\n            # Far range - projectile duel or close gap\n            if my_projectile_cooldown < 0.1 and random.random() < 0.5:\n                return 9\n            else:\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Opponent blocking - hybrid pressure tactics\n    if opp_blocking:\n        if distance < close_range:\n            # Close range guard breaking\n            if my_attack_cooldown < 0.1:\n                guard_break_roll = random.random()\n                if guard_break_roll < 0.35:\n                    return 5  # Heavy kick to break guar",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371393,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_027",
      "generation": 0,
      "fitness": 300.09999999999974,
      "win_rate": 0.5,
      "avg_reward": 300.09999999999974,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Define tactical parameters for hit-and-run style\n    close_range = 0.12\n    medium_range = 0.28\n    safe_range = 0.45\n    retreat_threshold = 0.18\n    health_panic_threshold = -0.4\n    winning_threshold = 0.3\n    \n    # Emergency defensive behavior when health is critical\n    if my_health < 0.2 or health_advantage < health_panic_threshold:\n        if distance < retreat_threshold:\n            # Immediate retreat with blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < safe_range and projectile_cooldown < 0.1:\n            return 9  # Projectile to keep opponent away\n        else:\n            return 6  # Block and wait for opportunity\n    \n    # Opportunistic behavior when winning significantly\n    if health_advantage > winning_threshold and opponent_health < 0.3:\n        if distance < close_range:\n            # Quick strike then prepare to retreat\n            if random.random() < 0.7:\n                return 4  # Fast punch\n            else:\n                return 5  # Stronger kick\n        elif distance < medium_range:\n            # Move in for finishing blow\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n    \n    # Hit-and-run core strategy implementation\n    if distance < close_range:\n        # In close range - strike or retreat decision\n        if opponent_block_status > 0.5:\n            # Opponent is blocking, retreat immediately\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n        \n        # Opponent not blocking - quick strike opportunity\n        if my_attack_status < 0.1:  # Not currently attacking\n            strike_choice = random.random()\n            if strike_choice < 0.6:\n                return 4  # Quick punch for hit-and-run\n            elif strike_choice < 0.85:\n                return 5  # Kick for more damage\n            else:\n                # Immediate retreat without striking\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n        else:\n            # Currently attacking, prepare retreat\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n    \n    elif distance < retreat_threshold:\n        # Just outside close range - critical retreat zone\n        retreat_urgency = random.random()\n        \n        if opponent_attack_status > 0.5:\n            # Opponent is attacking, defensive retreat\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n        \n        if retreat_urgency < 0.7:\n            # Standard retreat\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n        else:\n            # Retreat with protection\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    elif distance < medium_range:\n        # Medium range - positioning and opportunity assessment\n        opponent_vulnerable = opponent_attack_status > 0.5 or opponent_projectile_cooldown > 0.3\n        \n        if opponent_vulnerable and health_advantage > -0.2:\n            # Move in for hit-and-run attack\n            approach_method = random.random()\n            if approach_method < 0.6:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Cautious approach with blocking\n                if relative_pos > 0:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block\n        \n        # Maintain distance or use projectile\n        if projectile_cooldown < 0.1 and random.random() < 0.4:\n            return 9  # Projectile attack\n        \n        # Lateral movement for positioning\n        movement_pattern = random.random()\n        if movement_pattern < 0.3:\n            return 1  # Move left\n        elif movement_pattern < 0.6:\n            return 2  # Move right\n        else:\n            return 0  # Wait and observe\n    \n    elif distance < safe_range:\n        # Preferred hit-and-run range - projectile and positioning\n        if projectile_cooldown < 0.1:\n            projectile_decision = random.random()\n            \n            # More aggressive projectile use when winning\n            projectile_threshold = 0.7 if health_advantage > 0 else 0.5\n            \n            if projectile_decision < projectile_threshold:\n                return 9  # Projectile attack\n        \n        # Setup for approach or maintain position\n        if opponent_projectile_cooldown > 0.2 and health_advantage > -0.1:\n            # Opponent can't counter-projectile, consider approach\n            if random.random() < 0.3:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n        \n        # Default positioning behavior\n        positioning_choice = random.random()\n        if positioning_choice < 0.25:\n            return 1  # Move left\n        elif positioning_choice < 0.5:\n            return 2  # Move right\n        elif positioning_choice < 0.65:\n            return 3  # Jump for unpredictability\n        else:\n            return 0  # Idle observation\n    \n    else:\n        # Long range - projectile focused with setup\n        if projectile_cooldown < 0.1:\n            # High probability projectile use at long range\n            if random.random() < 0.8:\n                return 9  # Projectile attack\n        \n        # Close distance gradually for hit-and-run setup\n        if opponent_projectile_cooldown > 0.3:\n            # Safe to approach\n            approach_choice = random.random()\n            if approach_choice < 0.4:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            elif approach_choice < 0.6:\n                return 3  # Jump approach\n        \n        # Long range positioning\n        long_range_action = random.random()\n        if long_range_action < 0.3:\n            return 1  # Move left\n        elif long_range_action < 0.6:\n            return 2  # Move right\n        elif long_range_action < 0.75:\n            return 3  # Jump\n        else:\n            return 0  # Wait\n    \n    # Fallback",
      "fighting_style": "hit_and_run",
      "creation_time": 1748763419.260791,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_018",
      "generation": 0,
      "fitness": 288.07999999999697,
      "win_rate": 0.5,
      "avg_reward": 288.07999999999697,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = state[8]\n    my_attack_cooldown = state[9]\n    my_block_cooldown = state[10]\n    \n    # Extract opponent information\n    opp_health = state[12] if state[12] >= 0 else 0.5\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = state[19]\n    opp_attack_cooldown = state[20]\n    opp_block_cooldown = state[21]\n    \n    # Define strategic constants for pressure fighter\n    close_range = 0.12\n    medium_range = 0.25\n    far_range = 0.4\n    corner_distance = 0.1\n    aggression_base = 0.8\n    retreat_threshold = -0.4\n    \n    # Calculate dynamic aggression based on health and position\n    aggression_modifier = 1.0\n    if health_advantage > 0.2:\n        aggression_modifier = 1.3  # More aggressive when winning\n    elif health_advantage < -0.2:\n        aggression_modifier = 0.6  # Less aggressive when losing\n    \n    current_aggression = aggression_base * aggression_modifier\n    \n    # Emergency defensive situations\n    if my_stunned:\n        return 6  # Block if stunned\n    \n    if my_health < 0.2 and health_advantage < -0.3:\n        # Desperate situation - try to survive\n        if distance > 0.3:\n            return 9 if my_projectile_cooldown < 0.1 else 6\n        else:\n            return 6  # Block and hope\n    \n    # Opponent is attacking - defensive response\n    if opp_attacking and distance < 0.2:\n        if my_block_cooldown < 0.1:\n            # Can block - decide based on position\n            if distance < 0.08:\n                return 6  # Pure block at very close range\n            else:\n                # Block while positioning\n                if relative_pos > 0:\n                    return 8  # Block and move right\n                else:\n                    return 7  # Block and move left\n        else:\n            # Can't block - try to escape\n            if relative_pos > 0:\n                return 2  # Move right away\n            else:\n                return 1  # Move left away\n    \n    # Opponent is stunned - capitalize immediately\n    if opp_stunned and distance < 0.3:\n        if distance < close_range:\n            # Close enough for melee\n            if my_attack_cooldown < 0.1:\n                return 5 if random.random() < 0.7 else 4  # Prefer kicks when stunned\n            else:\n                # Move closer while they're stunned\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        else:\n            # Move in for the kill\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n    \n    # Core pressure fighter strategy based on range\n    if distance < close_range:\n        # Very close range - maximum pressure\n        if my_attack_cooldown < 0.1:\n            # Can attack\n            if opp_blocking:\n                # Opponent blocking - mix up timing and try to break guard\n                if random.random() < 0.4:\n                    # Sometimes wait/reposition against blockers\n                    if relative_pos > 0:\n                        return 2  # Slight repositioning\n                    else:\n                        return 1\n                else:\n                    # Keep pressure with varied attacks\n                    return 5 if random.random() < 0.6 else 4\n            else:\n                # Opponent not blocking - attack aggressively\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Quick punch\n                elif attack_choice < 0.8:\n                    return 5  # Strong kick\n                else:\n                    # Occasional projectile at close range for surprise\n                    return 9 if my_projectile_cooldown < 0.1 else 4\n        else:\n            # Attack on cooldown - maintain pressure through positioning\n            if abs(relative_pos) > 0.5:\n                # Opponent trying to escape - chase\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n            else:\n                # Stay close and ready\n                if random.random() < 0.3:\n                    return 6  # Occasional block to mix up rhythm\n                else:\n                    return 0  # Stay ready for next attack\n    \n    elif distance < medium_range:\n        # Medium range - close the gap aggressively\n        approach_modifier = 1.0\n        \n        # More aggressive approach if opponent is weakened\n        if health_advantage > 0.1:\n            approach_modifier = 1.2\n        \n        # Consider opponent's movement\n        if abs(opp_x_velocity) > 0.1:\n            # Opponent is moving - predict and intercept\n            if opp_x_velocity > 0:\n                # Opponent moving right\n                if relative_pos > 0:\n                    return 2  # Chase\n                else:\n                    return 1  # Cut off\n            else:\n                # Opponent moving left\n                if relative_pos < 0:\n                    return 1  # Chase\n                else:\n                    return 2  # Cut off\n        \n        # Standard approach based on position\n        if random.random() < current_aggression:\n            # Aggressive approach\n            if relative_pos > 0.1:\n                return 2  # Move right toward opponent\n            elif relative_pos < -0.1:\n                return 1  # Move left toward opponent\n            else:\n                # Very close to optimal position - prepare for engagement\n                if my_projectile_cooldown < 0.1 and random.random() < 0.3:\n                    return 9  # Surprise projectile\n                else:\n                    return 0  # Wait for perfect moment\n        else:\n            # Cautious approach with blocking\n            if relative_pos > 0:\n                return 8  # Move right while blocking\n            else:\n                return 7  # Move left while blocking\n    \n    elif distance < far_range:\n        # Far range - decide between closing distance or projectile pressure\n        \n        # Check if opponent is also at range and likely to projectile\n        if opp_projectile_cooldown < 0.1 and distance > 0.3:\n            # Opponent might projectile - either rush or counter-projectile\n            if random.random() < 0.6:\n                # Rush approach - pressure fighter style\n                if relative_pos > 0:\n                    return 2",
      "fighting_style": "pressure_fighter",
      "creation_time": 1748763419.260793,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_022",
      "generation": 2,
      "fitness": 281.42000000000684,
      "win_rate": 0.0,
      "avg_reward": 281.42000000000684,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information with bounds checking\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 0.5\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_velocity = state[3] if len(state) > 3 else 0.0\n    my_y_velocity = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.5 if len(state) > 5 else False\n    my_blocking = state[6] > 0.5 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8]) if len(state) > 8 else 0.0\n    my_attack_cooldown = max(0.0, state[9]) if len(state) > 9 else 0.0\n    my_block_cooldown = max(0.0, state[10]) if len(state) > 10 else 0.0\n    \n    # Extract opponent information with bounds checking\n    opp_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_velocity = state[14] if len(state) > 14 else 0.0\n    opp_y_velocity = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.5 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.5 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19]) if len(state) > 19 else 0.0\n    opp_attack_cooldown = max(0.0, state[20]) if len(state) > 20 else 0.0\n    opp_block_cooldown = max(0.0, state[21]) if len(state) > 21 else 0.0\n    \n    # Enhanced hybrid fighter parameters\n    close_range = 0.12\n    medium_range = 0.26\n    far_range = 0.42\n    optimal_range = 0.38\n    critical_health = 0.2\n    low_health = 0.4\n    winning_threshold = 0.2\n    losing_threshold = -0.2\n    \n    # Advanced positioning analysis\n    stage_center = 0.5\n    left_edge = 0.15\n    right_edge = 0.85\n    is_near_left_edge = my_x_pos < left_edge\n    is_near_right_edge = my_x_pos > right_edge\n    is_cornered = is_near_left_edge or is_near_right_edge\n    opp_cornered = opp_x_pos < left_edge or opp_x_pos > right_edge\n    \n    # Movement and timing analysis\n    opponent_closing = abs(opp_x_velocity) > 0.25 and distance < medium_range\n    opponent_retreating = (relative_pos > 0 and opp_x_velocity > 0.2) or (relative_pos < 0 and opp_x_velocity < -0.2)\n    projectile_ready = my_projectile_cooldown < 0.1\n    attack_ready = my_attack_cooldown < 0.1\n    block_ready = my_block_cooldown < 0.15\n    \n    # Opponent threat assessment\n    opp_projectile_threat = opp_projectile_cooldown < 0.12\n    opp_attack_threat = opp_attack_cooldown < 0.15\n    immediate_danger = opp_attacking and distance < close_range\n    \n    # Emergency defensive responses\n    if my_stunned:\n        return 0  # Cannot act while stunned\n    \n    # Critical health - pure survival mode\n    if my_health <= critical_health:\n        if immediate_danger:\n            if block_ready:\n                return 6  # Emergency block\n            else:\n                return 0  # Wait for block recovery\n        \n        if distance < close_range:\n            # Escape from danger zone\n            if is_cornered:\n                if height_diff > -0.15:\n                    return 3  # Jump escape\n                else:\n                    return 6  # Block in corner\n            else:\n                # Mobile escape\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        elif distance < medium_range:\n            # Create safe distance\n            if relative_pos > 0 and not is_near_left_edge:\n                return 1  # Move away left\n            elif relative_pos < 0 and not is_near_right_edge:\n                return 2  # Move away right\n            else:\n                if projectile_ready:\n                    return 9  # Desperation projectile\n                else:\n                    return 6  # Block\n        \n        else:\n            # Safe distance - try to chip\n            if projectile_ready:\n                return 9\n            else:\n                return 0  # Wait safely\n    \n    # Opponent stunned - maximum punishment combo\n    if opp_stunned:\n        if distance < close_range:\n            if attack_ready:\n                # Optimized damage combo\n                stun_timer = random.random()\n                if stun_timer < 0.3:\n                    return 4  # Quick punch to extend\n                elif stun_timer < 0.8:\n                    return 5  # Heavy kick for damage\n                else:\n                    return 4  # Quick finisher\n            else:\n                # Position for next attack\n                if distance > 0.05:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Perfect distance\n        elif distance < medium_range:\n            # Rush in for combo\n            return 2 if relative_pos > 0 else 1\n        else:\n            # Too far for melee\n            if projectile_ready:\n                return 9  # Projectile while closing\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Counter opponent attacks with improved timing\n    if opp_attacking:\n        if distance < close_range:\n            if block_ready:\n                # Intelligent blocking based on situation\n                if is_cornered:\n                    return 6  # Pure block when cornered\n                elif opponent_closing:\n                    # Mobile defense\n                    if relative_pos > 0 and not is_near_left_edge:\n                        return 7  # Block retreat left\n                    elif not is_near_right_edge:\n                        return 8  # Block retreat right\n                    else:\n                        return 6  # Standard block\n                else:\n                    return 6  # Standar",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978345,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_003",
      "generation": 1,
      "fitness": 275.29999999999444,
      "win_rate": 0.5,
      "avg_reward": 275.29999999999444,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent status\n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define enhanced rushdown ranges\n    touching_range = 0.05\n    ultra_close_range = 0.1\n    close_range = 0.18\n    medium_range = 0.32\n    far_range = 0.5\n    \n    # Advanced aggression calculation\n    base_aggression = 0.85\n    health_multiplier = 1.0 + (health_advantage * 0.3)\n    position_multiplier = 1.1 if my_pos_x > 0.3 and my_pos_x < 0.7 else 0.9\n    current_aggression = min(0.95, base_aggression * health_multiplier * position_multiplier)\n    \n    # Opponent behavior analysis\n    opponent_retreating = False\n    opponent_aggressive = False\n    \n    if relative_pos > 0 and opponent_velocity_x < -0.2:\n        opponent_retreating = True\n    elif relative_pos < 0 and opponent_velocity_x > 0.2:\n        opponent_retreating = True\n    \n    if opponent_attack_status > 0.5 or (distance < close_range and opponent_velocity_x > 0.1):\n        opponent_aggressive = True\n    \n    # Critical health emergency protocols\n    if my_health < 0.15 and health_advantage < -0.5:\n        if opponent_attack_status > 0.6:\n            return 6  # Desperate block\n        if distance > medium_range and my_projectile_cooldown < 0.2:\n            return 9  # Desperation projectile\n        # Try to escape while blocking\n        if my_pos_x < 0.2:\n            return 8  # Move right while blocking\n        elif my_pos_x > 0.8:\n            return 7  # Move left while blocking\n        else:\n            return 6  # Just block\n    \n    # Corner pressure detection and exploitation\n    opponent_cornered = opponent_pos_x < 0.15 or opponent_pos_x > 0.85\n    i_am_cornered = my_pos_x < 0.15 or my_pos_x > 0.85\n    \n    # Escape corner when cornered\n    if i_am_cornered and distance < close_range:\n        if opponent_attack_status > 0.4:\n            # Block and move toward center\n            if my_pos_x < 0.5:\n                return 8  # Move right while blocking\n            else:\n                return 7  # Move left while blocking\n        else:\n            # Jump over or dash out\n            if random.random() < 0.4:\n                return 3  # Jump\n            else:\n                if my_pos_x < 0.5:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n    \n    # Ultra-aggressive corner pressure when opponent is cornered\n    if opponent_cornered and distance < medium_range:\n        current_aggression = min(0.98, current_aggression + 0.15)\n    \n    # Enhanced distance closing logic\n    if distance > ultra_close_range:\n        # Long range approach\n        if distance > far_range:\n            # Mix projectiles with aggressive advance\n            if my_projectile_cooldown < 0.3:\n                if random.random() < 0.35:\n                    return 9  # Projectile\n            \n            # Advance with occasional jump-ins\n            advance_method = random.random()\n            if advance_method < 0.15 and abs(height_diff) < 0.4:\n                return 3  # Jump approach\n            else:\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        # Medium-far range tactical approach\n        elif distance > medium_range:\n            # Punish opponent projectile attempts\n            if opponent_projectile_cooldown > 0.7:\n                # Opponent likely used projectile, rush in\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n            \n            # Standard advance with mixups\n            if random.random() < current_aggression:\n                approach_type = random.random()\n                if approach_type < 0.7:\n                    # Ground approach\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                elif approach_type < 0.85:\n                    # Jump approach\n                    return 3\n                else:\n                    # Projectile then advance\n                    if my_projectile_cooldown < 0.4:\n                        return 9\n                    else:\n                        return 1 if relative_pos < 0 else 2\n            else:\n                # Cautious advance\n                if opponent_attack_status > 0.3:\n                    if relative_pos > 0:\n                        return 8  # Move right while blocking\n                    else:\n                        return 7  # Move left while blocking\n                else:\n                    return 1 if relative_pos < 0 else 2\n        \n        # Medium range preparation\n        elif distance > close_range:\n            # Counter opponent retreat attempts\n            if opponent_retreating:\n                chase_intensity = current_aggression + 0.1\n                if random.random() < chase_intensity:\n                    if relative_pos > 0:\n                        return 2  # Aggressive chase\n                    else:\n                        return 1\n                else:\n                    return 3  # Jump chase\n            \n            # Handle opponent blocking\n            if opponent_block_status > 0.6:\n                guard_break_option = random.random()\n                if guard_break_option < 0.3 and my_projectile_cooldown < 0.5:\n                    return 9  # Projectile to break guard\n                elif guard_break_option < 0.6:\n                    return 3  # Jump for overhead\n                else:\n                    # Close distance for throw\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n            \n            # Standard medium range rush\n            rush_decision = random.random()\n            if rush_decision < current_aggression:\n                if relative_pos > 0:\n                    return 2",
      "fighting_style": "evolved",
      "creation_time": 1748766291.3713942,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_011",
      "generation": 0,
      "fitness": 275.27999999999446,
      "win_rate": 0.5,
      "avg_reward": 275.27999999999446,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key game state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    my_velocity = state[3]\n    opponent_velocity = state[14]\n    \n    # Extract attack and defense status\n    my_attacking = state[6] > 0.5\n    opponent_attacking = state[17] > 0.5\n    my_blocking = state[7] > 0.5\n    opponent_blocking = state[18] > 0.5\n    \n    # Projectile cooldown information\n    my_projectile_cooldown = state[10]\n    opponent_projectile_cooldown = state[21]\n    \n    # Height difference\n    height_diff = state[24]\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.35\n    danger_health = 0.3\n    critical_health = 0.15\n    safe_distance = 0.45\n    \n    # Emergency survival mode when critically low health\n    if my_health < critical_health:\n        if opponent_attacking and distance < close_range:\n            return 6  # Block incoming attack\n        elif distance < safe_distance:\n            # Retreat while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Use projectile from safe distance\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                return 6  # Block while waiting for cooldown\n    \n    # Defensive positioning when health is low\n    if my_health < danger_health:\n        # Prioritize blocking and safe distance\n        if opponent_attacking:\n            if distance < medium_range:\n                return 6  # Block incoming attacks\n            elif distance < safe_distance:\n                # Maintain defensive distance\n                if relative_pos > 0:\n                    return 7  # Retreat left with block\n                else:\n                    return 8  # Retreat right with block\n        \n        # Counter-attack opportunities when opponent is vulnerable\n        if not opponent_blocking and distance < close_range:\n            if opponent_velocity > 0.3:  # Opponent moving fast, risky\n                return 6  # Stay defensive\n            else:\n                # Quick counter-attack\n                return 4 if random.random() < 0.7 else 5\n        \n        # Long-range harassment\n        if distance > safe_distance and my_projectile_cooldown < 0.2:\n            return 9\n        \n        # Default defensive stance\n        return 6\n    \n    # Standard defensive play when health is moderate\n    if health_advantage < 0:\n        # We're behind, play more defensively\n        if opponent_attacking and distance < medium_range:\n            if distance < close_range:\n                return 6  # Block close attacks\n            else:\n                # Defensive movement\n                if relative_pos > 0:\n                    return 7  # Move away with block\n                else:\n                    return 8  # Move away with block\n        \n        # Look for counter-attack windows\n        if distance < close_range and not opponent_blocking:\n            if my_attacking:  # Already in attack sequence\n                return 0  # Let attack complete\n            else:\n                # Conservative counter-attack\n                if random.random() < 0.6:\n                    return 4  # Quick punch\n                else:\n                    return 6  # Stay defensive\n        \n        # Medium range positioning\n        if distance >= close_range and distance < medium_range:\n            if opponent_attacking:\n                return 6  # Block at medium range\n            else:\n                # Careful positioning\n                if abs(relative_pos) > 0.5:\n                    # Move to better position\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                else:\n                    return 6  # Maintain guard\n        \n        # Long range defensive tactics\n        if distance >= medium_range:\n            if my_projectile_cooldown < 0.3 and not opponent_blocking:\n                return 9  # Safe projectile\n            else:\n                # Maintain safe distance\n                if distance < safe_distance:\n                    if relative_pos > 0:\n                        return 1  # Move away\n                    else:\n                        return 2  # Move away\n                else:\n                    return 6  # Guard up\n    \n    # Balanced play when health is even\n    elif abs(health_advantage) < 0.2:\n        # Focus on defensive positioning with selective aggression\n        if opponent_attacking:\n            if distance < close_range:\n                return 6  # Block close attacks\n            elif distance < medium_range:\n                # Defensive movement at medium range\n                if random.random() < 0.7:\n                    return 6  # Block\n                else:\n                    # Occasional evasive movement\n                    if relative_pos > 0:\n                        return 7\n                    else:\n                        return 8\n        \n        # Controlled aggression opportunities\n        if distance < close_range and not opponent_blocking:\n            if opponent_velocity < 0.2:  # Opponent relatively still\n                # Measured attack\n                if random.random() < 0.5:\n                    return 4  # Quick punch\n                elif random.random() < 0.3:\n                    return 5  # Stronger kick\n                else:\n                    return 6  # Stay defensive\n            else:\n                return 6  # Opponent moving, stay defensive\n        \n        # Medium range control\n        if distance >= close_range and distance < medium_range:\n            if opponent_projectile_cooldown > 0.5:  # Safe from projectiles\n                # Move to optimal range\n                if distance > 0.25:\n                    # Close distance slightly\n                    if relative_pos > 0:\n                        return 2  # Move right toward opponent\n                    else:\n                        return 1  # Move left toward opponent\n                else:\n                    return 6  # Maintain guard\n            else:\n                return 6  # Guard against potential projectile\n        \n        # Long range tactics\n        if distance >= medium_range:\n            if my_projectile_cooldown < 0.4 and opponent_projectile_cooldown > 0.3:\n                return 9  # Safe projectile opportunity\n            elif distance > 0.6:\n                # Close distance gradually\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                return 6  # Maintain defensive stance\n    \n    # Cautious offense when ahead\n    else:\n        # We have health advantage, but maintain defensive principles\n        if opponent_attacking:\n            # Still prioritize defense even when winning\n            if distance < medium_range:\n                return 6  # Block attacks\n            else:\n                # Can be slightly more mobile when ahead\n                if relative_pos > 0:\n                    return 7  # Move with block\n                else:\n                    return 8  # Move with block\n        \n        # Selective pressure when winning\n        if distance < close_range:\n            if not opponent_blocking and opponent_velocity < 0.3:\n                # Apply controlled pressure\n                if random.random() < 0.6:\n                    return 4  # Punch\n                elif random.random() < 0.4:\n                    return 5  # Kick\n                else:\n                    return 6  # Stay guarded\n            else:\n                return 6  # Maintain defense",
      "fighting_style": "defensive",
      "creation_time": 1748763419.2607958,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_002",
      "generation": 0,
      "fitness": 274.51999999999447,
      "win_rate": 0.5,
      "avg_reward": 274.51999999999447,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    \n    # Extract attack and block status\n    my_attack_status = state[4]\n    opponent_attack_status = state[15]\n    my_block_status = state[5]\n    opponent_block_status = state[16]\n    \n    # Extract projectile cooldown\n    my_projectile_cooldown = max(0.0, state[6])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Extract velocities for movement prediction\n    my_velocity_x = state[7]\n    opponent_velocity_x = state[18]\n    \n    # Height difference\n    height_diff = state[24]\n    \n    # Define strategic constants for zoner playstyle\n    safe_distance = 0.4\n    medium_distance = 0.25\n    close_distance = 0.15\n    danger_distance = 0.08\n    \n    # Health thresholds\n    critical_health = 0.2\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Projectile cooldown threshold\n    projectile_ready = my_projectile_cooldown < 0.1\n    \n    # Corner detection (assuming stage boundaries at -1.0 and 1.0)\n    near_left_corner = my_position < -0.7\n    near_right_corner = my_position > 0.7\n    opponent_near_left = opponent_position < -0.7\n    opponent_near_right = opponent_position > 0.7\n    \n    # Emergency situations - highest priority\n    if my_health <= critical_health:\n        # Desperate survival mode\n        if distance < danger_distance and opponent_attack_status > 0:\n            return 6  # Block incoming attack\n        \n        if distance < close_distance:\n            # Too close, need to escape\n            if relative_pos > 0:  # Opponent to right\n                if not near_left_corner:\n                    return 7  # Move left while blocking\n                else:\n                    return 6  # Block if cornered\n            else:  # Opponent to left\n                if not near_right_corner:\n                    return 8  # Move right while blocking\n                else:\n                    return 6  # Block if cornered\n        \n        # Try to create distance with projectiles\n        if projectile_ready and distance > close_distance:\n            return 9\n        \n        # Maintain safe distance\n        if distance < safe_distance:\n            if relative_pos > 0 and not near_left_corner:\n                return 1  # Move left away from opponent\n            elif relative_pos < 0 and not near_right_corner:\n                return 2  # Move right away from opponent\n            else:\n                return 6  # Block if can't escape\n    \n    # Opponent is attacking - defensive response\n    if opponent_attack_status > 0:\n        if distance < medium_distance:\n            # Close enough that attack might hit\n            if my_health <= low_health:\n                return 6  # Block when low health\n            else:\n                # Try to evade while blocking\n                if relative_pos > 0 and not near_left_corner:\n                    return 7  # Move left block\n                elif relative_pos < 0 and not near_right_corner:\n                    return 8  # Move right block\n                else:\n                    return 6  # Just block\n        else:\n            # Far enough to potentially counter with projectile\n            if projectile_ready:\n                return 9\n    \n    # Anti-air response if opponent is jumping\n    if height_diff < -0.3:  # Opponent is significantly higher\n        if distance < medium_distance:\n            if projectile_ready:\n                return 9  # Projectile anti-air\n            else:\n                # Move away and prepare\n                if relative_pos > 0 and not near_left_corner:\n                    return 1\n                elif not near_right_corner:\n                    return 2\n                else:\n                    return 6  # Block if cornered\n    \n    # Zoner main strategy - range control\n    if distance > safe_distance:\n        # Optimal zoning range\n        if projectile_ready:\n            # Add some timing variation to avoid predictability\n            if random.random() < 0.8:\n                return 9  # Primary zoning tool\n            else:\n                # Occasional movement to avoid being too static\n                if relative_pos > 0 and random.random() < 0.5:\n                    return 1  # Move left occasionally\n                elif relative_pos < 0:\n                    return 2  # Move right occasionally\n                else:\n                    return 9  # Default to projectile\n        else:\n            # Projectile on cooldown, maintain position\n            if opponent_velocity_x != 0:\n                # Opponent is moving, adjust position\n                if opponent_velocity_x > 0:  # Opponent moving right\n                    if not near_left_corner:\n                        return 1  # Move left to maintain distance\n                elif opponent_velocity_x < 0:  # Opponent moving left\n                    if not near_right_corner:\n                        return 2  # Move right to maintain distance\n            \n            # Default positioning\n            return 0  # Wait for projectile cooldown\n    \n    elif distance > medium_distance:\n        # Good zoning range but need to be ready\n        if projectile_ready:\n            # Check opponent's movement pattern\n            if opponent_velocity_x == 0:\n                # Stationary opponent, good projectile target\n                return 9\n            else:\n                # Moving opponent, predict and adjust\n                if abs(opponent_velocity_x) > 0.5:\n                    # Fast moving opponent, prepare for defense\n                    if distance < 0.35:\n                        return 6  # Block as they approach\n                    else:\n                        return 9  # Projectile while still safe\n                else:\n                    return 9  # Standard projectile\n        else:\n            # Maintain optimal spacing while cooldown recovers\n            if relative_pos > 0:  # Opponent to right\n                if distance < 0.3 and not near_left_corner:\n                    return 1  # Create more space\n                elif distance > 0.35 and not near_right_corner:\n                    return 2  # Close gap slightly\n            else:  # Opponent to left\n                if distance < 0.3 and not near_right_corner:\n                    return 2  # Create more space\n                elif distance > 0.35 and not near_left_corner:\n                    return 1  # Close gap slightly\n            \n            return 0  # Hold position\n    \n    elif distance > close_distance:\n        # Medium range - transition zone\n        if health_advantage > 0.3:\n            # Winning significantly, can afford some risks\n            if projectile_ready:\n                return 9\n            else:\n                # Maybe pressure slightly\n                if opponent_block_status > 0:\n                    # Opponent blocking, maintain pressure\n                    if relative_pos > 0 and not near_right_corner:\n                        return 2  # Move closer\n                    elif relative_pos < 0 and not near_left_corner:\n                        return 1  # Move closer\n                else:\n                    # Opponent not blocking but we're in danger zone\n                    if not near_left_corner and relative_pos > 0:\n                        return 1  # Back away\n                    elif not near_right_corner and relative_pos < 0:\n                        return 2  # Back away",
      "fighting_style": "zoner",
      "creation_time": 1748763419.260798,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_012",
      "generation": 2,
      "fitness": 273.9399999999984,
      "win_rate": 0.0,
      "avg_reward": 273.9399999999984,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter state\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = state[0]\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[7]\n    my_blocking = state[8]\n    my_projectile_cooldown = max(0.0, state[9])\n    \n    # Extract opponent state\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_x_pos = state[11]\n    opponent_y_pos = state[12]\n    opponent_x_vel = state[14]\n    opponent_y_vel = state[15]\n    opponent_attacking = state[18]\n    opponent_blocking = state[19]\n    opponent_projectile_cooldown = max(0.0, state[20])\n    \n    # Enhanced tactical parameters for evolved balanced fighter\n    close_range = 0.13\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = -0.4\n    winning_health = 0.3\n    retreat_distance = 0.18\n    \n    # Dynamic aggression system with momentum tracking\n    base_aggression = 0.55\n    momentum_factor = 0.0\n    \n    # Calculate momentum based on health trends and positioning\n    if health_advantage > 0.1:\n        momentum_factor = min(0.3, health_advantage * 0.5)\n    elif health_advantage < -0.1:\n        momentum_factor = max(-0.4, health_advantage * 0.7)\n    \n    # Adjust aggression based on distance advantage\n    distance_factor = 0.0\n    if distance < 0.2 and health_advantage > 0:\n        distance_factor = 0.2\n    elif distance > 0.4 and my_projectile_cooldown < 0.3:\n        distance_factor = 0.15\n    \n    current_aggression = max(0.1, min(0.85, base_aggression + momentum_factor + distance_factor))\n    \n    # Advanced opponent behavior analysis\n    opponent_advancing = False\n    opponent_retreating = False\n    opponent_velocity_threshold = 0.04\n    \n    if relative_pos > 0 and opponent_x_vel > opponent_velocity_threshold:\n        opponent_advancing = True\n    elif relative_pos < 0 and opponent_x_vel < -opponent_velocity_threshold:\n        opponent_advancing = True\n    elif relative_pos > 0 and opponent_x_vel < -opponent_velocity_threshold:\n        opponent_retreating = True\n    elif relative_pos < 0 and opponent_x_vel > opponent_velocity_threshold:\n        opponent_retreating = True\n    \n    # Opponent pattern recognition\n    opponent_aggressive = opponent_attacking > 0.4 and distance < 0.25\n    opponent_defensive = opponent_blocking > 0.5 or (opponent_retreating and health_advantage < 0)\n    opponent_projectile_focused = opponent_projectile_cooldown < 0.2 and distance > 0.3\n    \n    # Critical health emergency protocols\n    if my_health < 0.12 or health_advantage < -0.6:\n        if distance < retreat_distance:\n            if opponent_attacking > 0.6:\n                return 6  # Emergency block\n            else:\n                # Smart retreat with blocking\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        elif my_projectile_cooldown < 0.15 and distance > 0.25:\n            return 9  # Desperate projectile\n        else:\n            # Last resort blocking\n            return 6\n    \n    # Finishing move detection when opponent is very low\n    if opponent_health < 0.15 and health_advantage > 0.3:\n        if distance < close_range + 0.05:\n            # Aggressive finish\n            finish_choice = random.random()\n            if finish_choice < 0.6:\n                return 5  # Strong kick finish\n            else:\n                return 4  # Fast punch finish\n        elif distance < medium_range:\n            # Close distance for finish\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n    \n    # Close range combat with enhanced tactics (0.0 - 0.13)\n    if distance < close_range:\n        # Counter-attack timing\n        if opponent_attacking > 0.6:\n            counter_chance = 0.65 if health_advantage > 0 else 0.8\n            if random.random() < counter_chance:\n                return 6  # Block first\n            else:\n                # Risky counter-attack\n                return 4  # Fast punch through\n        \n        # Advanced anti-blocking strategies\n        if opponent_blocking > 0.7:\n            block_break_strategy = random.random()\n            if block_break_strategy < 0.35:\n                return 5  # Heavy kick to break guard\n            elif block_break_strategy < 0.55:\n                return 3  # Jump over guard\n            elif block_break_strategy < 0.75:\n                # Feint with movement then attack\n                if relative_pos > 0:\n                    return 1  # Move left to reposition\n                else:\n                    return 2  # Move right to reposition\n            else:\n                return 9 if my_projectile_cooldown < 0.3 else 0  # Reset with projectile\n        \n        # Combo system for sustained pressure\n        if health_advantage > 0.1 and opponent_blocking < 0.3:\n            combo_choice = random.random()\n            if combo_choice < 0.4:\n                return 4  # Punch for speed\n            elif combo_choice < 0.7:\n                return 5  # Kick for power\n            elif combo_choice < 0.85:\n                return 3  # Jump attack for mix-up\n            else:\n                return 6  # Block to reset rhythm\n        \n        # Defensive close combat with counter opportunities\n        elif health_advantage < 0:\n            defensive_counter = random.random()\n            if defensive_counter < 0.25:\n                return 4  # Quick counter punch\n            elif defensive_counter < 0.4:\n                return 5  # Power counter kick\n            elif defensive_counter < 0.6:\n                return 6  # Safe block\n            else:\n                # Create space\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n        \n        # Balanced close combat\n        else:\n            balanced_close = random.random()\n            if balanced_close < 0.3:\n                return 4  # Punch\n            elif balanced_close < 0.55:\n                return 5  # Kick  \n            elif balanced_close < 0.7:\n                return 6  # Block\n            else:\n                return 3  # Jump attack\n    \n    # Medium range with enhanced positioning (0.13 - 0.28)\n    elif distance < medium_range:\n        # Exploit opponent vulnerabilities\n        if opponent_attacking > 0.5 and distance > 0.18:\n            # Punish whiffed attacks\n            if current_aggression > 0.5:\n                if relative_pos > 0:\n                    return 2  # Rush in right\n                else:\n                    return 1",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978347,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_003",
      "generation": 0,
      "fitness": 271.53999999999377,
      "win_rate": 0.5,
      "avg_reward": 271.53999999999377,
      "code": "def get_action(state):\n    import random\n    import math\n    \n    # Extract and validate key state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[2] if len(state) > 2 else 1.0\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[1] if len(state) > 1 else 0.0\n    my_x_vel = state[3] if len(state) > 3 else 0.0\n    my_y_vel = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] if len(state) > 5 else 0.0\n    my_blocking = state[6] if len(state) > 6 else 0.0\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_health = state[13] if len(state) > 13 else 1.0\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[12] if len(state) > 12 else 0.0\n    opp_x_vel = state[14] if len(state) > 14 else 0.0\n    opp_y_vel = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] if len(state) > 16 else 0.0\n    opp_blocking = state[17] if len(state) > 17 else 0.0\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.15\n    medium_range = 0.35\n    critical_health = 0.3\n    winning_threshold = 0.2\n    losing_threshold = -0.2\n    \n    # Emergency situations - highest priority\n    if my_stunned > 0.5:\n        return 0  # Can't act while stunned\n    \n    # Critical health management\n    if my_health < critical_health:\n        if opp_attacking > 0.5 and distance < close_range:\n            return 6  # Block incoming attack\n        elif distance > medium_range and my_projectile_cd < 0.3:\n            return 9  # Keep distance with projectiles\n        elif distance < close_range:\n            # Try to escape close combat\n            if my_x_pos < 0.3:  # Near left edge\n                return 8  # Move right while blocking\n            elif my_x_pos > 0.7:  # Near right edge\n                return 7  # Move left while blocking\n            else:\n                return 8 if relative_pos < 0 else 7  # Move away while blocking\n    \n    # Opponent is stunned - capitalize\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            return 5 if random.random() < 0.7 else 4  # Prefer kick for damage\n        elif distance < medium_range:\n            if relative_pos > 0:\n                return 2  # Move right to close distance\n            else:\n                return 1  # Move left to close distance\n        else:\n            return 9  # Projectile if too far\n    \n    # Opponent is attacking - defensive response\n    if opp_attacking > 0.5:\n        if distance < close_range:\n            if my_blocking < 0.3:  # Not already blocking\n                return 6  # Block the attack\n            else:\n                # Try to counter or reposition\n                if random.random() < 0.4:\n                    return 4  # Quick counter punch\n                else:\n                    return 7 if relative_pos > 0 else 8  # Move away while blocking\n        elif distance < medium_range:\n            # Medium range - prepare for their approach\n            if opp_x_vel > 0.3 and relative_pos < 0:  # They're approaching from left\n                return 8  # Move right while blocking\n            elif opp_x_vel < -0.3 and relative_pos > 0:  # They're approaching from right\n                return 7  # Move left while blocking\n            else:\n                return 6  # Just block\n    \n    # Winning strategy - be aggressive but smart\n    if health_advantage > winning_threshold:\n        if distance < close_range:\n            # Close combat aggression\n            if opp_blocking > 0.5:\n                # Opponent is blocking - mix up attacks or reposition\n                action_choice = random.random()\n                if action_choice < 0.3:\n                    return 5  # Strong kick to break guard\n                elif action_choice < 0.6:\n                    return 3  # Jump to change angle\n                else:\n                    # Reposition for better angle\n                    return 2 if relative_pos < 0 else 1\n            else:\n                # Opponent not blocking - attack\n                return 4 if random.random() < 0.6 else 5\n        \n        elif distance < medium_range:\n            # Medium range control\n            if abs(height_diff) > 0.3 and my_y_pos < opp_y_pos:\n                return 3  # Jump to match height\n            else:\n                # Close the distance\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:\n            # Long range pressure\n            if my_projectile_cd < 0.2:\n                return 9  # Projectile attack\n            else:\n                # Move closer while projectile recharges\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Losing strategy - play more defensively\n    elif health_advantage < losing_threshold:\n        if distance < close_range:\n            # Close combat defense\n            if opp_attacking > 0.3:\n                return 6  # Block\n            elif my_health > critical_health and opp_blocking < 0.3:\n                # Safe attack opportunity\n                return 4  # Quick punch\n            else:\n                # Try to escape close combat\n                if my_x_pos < 0.2 or my_x_pos > 0.8:  # Near edge\n                    return 6  # Block - can't retreat further\n                else:\n                    return 7 if relative_pos > 0 else 8  # Move away\n        \n        elif distance < medium_range:\n            # Medium range caution\n            if opp_x_vel > 0.5 or opp_x_vel < -0.5:  # Opponent moving fast\n                return 6  # Prepare to block\n            elif my_projectile_cd < 0.3:\n                return 9  # Projectile to maintain distance\n            else:\n                # Maintain distance\n                if relative_pos > 0 and my_x_pos < 0.7:\n                    return 1  # Move away\n                elif relative_pos < 0 and my_x_pos > 0.3:\n                    return 2  # Move away\n                else:\n                    return 6  # Block if cornered\n        \n        else:\n            # Long range recovery\n            if my_projectile_cd < 0.2:\n                return 9  # Projectile\n            else:\n                return 6  # Block and wait",
      "fighting_style": "balanced",
      "creation_time": 1748763419.2608,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_017",
      "generation": 3,
      "fitness": 269.3599999999937,
      "win_rate": 0.5,
      "avg_reward": 269.3599999999937,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[2]))\n    my_position = state[0]\n    my_velocity_x = state[7]\n    my_velocity_y = state[8]\n    my_attack_status = max(0.0, state[4])\n    my_block_status = max(0.0, state[5])\n    my_projectile_cooldown = max(0.0, state[6])\n    \n    # Extract opponent status\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_position = state[11]\n    opponent_velocity_x = state[18]\n    opponent_velocity_y = state[19]\n    opponent_attack_status = max(0.0, state[15])\n    opponent_block_status = max(0.0, state[16])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Strategic range definitions for hybrid approach\n    ultra_close_range = 0.05\n    close_range = 0.12\n    mid_range = 0.25\n    far_range = 0.4\n    ultra_far_range = 0.6\n    \n    # Health thresholds\n    critical_health = 0.15\n    low_health = 0.35\n    good_health = 0.65\n    \n    # Positioning thresholds\n    corner_threshold = 0.8\n    near_corner_threshold = 0.65\n    center_zone = 0.3\n    \n    # Status checks\n    projectile_ready = my_projectile_cooldown < 0.08\n    projectile_charging = my_projectile_cooldown < 0.15\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.1\n    \n    # Movement analysis\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x > -0.2) or (relative_pos < 0 and opponent_velocity_x < 0.2)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.3) or (relative_pos < 0 and opponent_velocity_x > 0.3)\n    opponent_airborne = abs(height_diff) > 0.25\n    \n    # Positioning awareness\n    am_cornered = abs(my_position) > corner_threshold\n    am_near_corner = abs(my_position) > near_corner_threshold\n    opponent_cornered = abs(opponent_position) > corner_threshold\n    in_center = abs(my_position) < center_zone\n    \n    # Adaptive aggression calculation\n    base_aggression = 0.65\n    health_modifier = health_advantage * 0.35\n    distance_modifier = (mid_range - distance) * 0.4\n    position_modifier = 0.15 if opponent_cornered else (-0.1 if am_cornered else 0)\n    current_aggression = max(0.25, min(0.9, base_aggression + health_modifier + distance_modifier + position_modifier))\n    \n    # Defense priority system\n    defense_urgency = 0.4\n    if my_health < critical_health:\n        defense_urgency = 0.85\n    elif my_health < low_health:\n        defense_urgency = 0.65\n    elif health_advantage < -0.4:\n        defense_urgency = 0.7\n    \n    # Emergency survival mode - critical health\n    if my_health <= critical_health:\n        if opponent_attack_status > 0 and distance < mid_range:\n            return 6  # Priority block\n        \n        if distance < close_range:\n            if am_cornered:\n                # Cornered and desperate\n                if projectile_ready and random.random() < 0.4:\n                    return 9  # Point blank projectile gamble\n                elif opponent_airborne:\n                    return 4  # Anti-air attempt\n                else:\n                    return 6  # Block and hope\n            else:\n                # Escape with blocking movement\n                escape_direction = 7 if relative_pos > 0 else 8\n                return escape_direction\n        \n        # Create space when possible\n        if distance < mid_range and not am_cornered:\n            retreat_direction = 1 if relative_pos > 0 else 2\n            return retreat_direction\n        \n        # Long range chip damage attempt\n        if projectile_ready and distance > mid_range:\n            return 9\n        \n        return 6  # Default to blocking\n    \n    # Opponent attack response system\n    if opponent_attack_status > 0:\n        threat_level = 1.0 - distance\n        \n        if distance < ultra_close_range:\n            return 6  # Must block at point blank\n        elif distance < close_range:\n            if my_health > low_health and not am_near_corner:\n                # Mobile defense\n                defensive_move = 7 if relative_pos > 0 else 8\n                return defensive_move if random.random() < 0.7 else 6\n            else:\n                return 6  # Safe block\n        elif distance < mid_range:\n            # Medium range threat\n            if projectile_ready and random.random() < 0.5:\n                return 9  # Counter projectile\n            else:\n                return 6  # Block incoming\n        else:\n            # Long range attack - advance or counter\n            if projectile_ready:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Anti-air system\n    if opponent_airborne:\n        if distance < mid_range:\n            if projectile_ready:\n                return 9  # Projectile anti-air\n            elif distance < close_range:\n                return 4  # Quick anti-air punch\n            else:\n                # Position for landing punish\n                return 2 if relative_pos > 0 else 1\n        elif distance < far_range and projectile_ready:\n            return 9  # Long range anti-air\n    \n    # Projectile warfare management\n    if opponent_projectile_ready and distance > mid_range:\n        if projectile_ready:\n            if random.random() < 0.6:\n                return 9  # Projectile duel\n            else:\n                # Evasive approach\n                return 2 if relative_pos > 0 else 1\n        else:\n            # Dodge or advance\n            if distance > far_range:\n                return 2 if relative_pos > 0 else 1\n            else:\n                return 3 if random.random() < 0.3 else 6\n    \n    # Range-based hybrid combat system\n    \n    # Ultra close range - explosive mixups\n    if distance <= ultra_close_range:\n        if current_aggression > 0.6:\n            if opponent_block_status > 0:\n                # Guard pressure sequence\n                choice = random.random()\n                if choice < 0.35 and projectile_ready:\n                    return 9  # Point blank projectile mixup\n                elif choice < 0.7:\n                    return 5  # Power kick guard break\n                else:\n                    # Micro spacing\n                    return 1 if relative_pos > 0.2 else 2\n            else:\n                # Open opponent - damage maximize\n                return 5 if random.random() < 0.65 else 4\n        else:\n            # Defensive reset\n            if random.random() < defense_urgency:\n                return 6\n            else:\n                return 4  # Quick",
      "fighting_style": "evolved",
      "creation_time": 1748772554.50326,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_024",
      "generation": 0,
      "fitness": 265.5799999999921,
      "win_rate": 0.5,
      "avg_reward": 265.5799999999921,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract key strategic information with defensive bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player state information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_x = state[0] if len(state) > 0 else 0.5\n    my_attacking = state[4] if len(state) > 4 else 0.0\n    my_blocking = state[5] if len(state) > 5 else 0.0\n    my_projectile_cd = state[6] if len(state) > 6 else 0.0\n    \n    # Extract opponent state information\n    opp_health = state[12] if len(state) > 12 else 1.0\n    opp_x = state[11] if len(state) > 11 else 0.5\n    opp_attacking = state[15] if len(state) > 15 else 0.0\n    opp_blocking = state[16] if len(state) > 16 else 0.0\n    opp_projectile_cd = state[17] if len(state) > 17 else 0.0\n    \n    # Define tactical thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    \n    # Health-based aggression levels\n    desperate_threshold = -0.4\n    losing_threshold = -0.15\n    winning_threshold = 0.15\n    dominating_threshold = 0.4\n    \n    # Adaptive strategy decision tree\n    strategy_mode = \"balanced\"\n    \n    if health_advantage < desperate_threshold:\n        strategy_mode = \"desperate\"\n    elif health_advantage < losing_threshold:\n        strategy_mode = \"defensive\"\n    elif health_advantage > dominating_threshold:\n        strategy_mode = \"aggressive\"\n    elif health_advantage > winning_threshold:\n        strategy_mode = \"pressure\"\n    \n    # Emergency blocking when opponent is attacking and close\n    if opp_attacking > 0.5 and distance < 0.2:\n        block_chance = 0.8 if strategy_mode in [\"desperate\", \"defensive\"] else 0.6\n        if random.random() < block_chance:\n            # Block while positioning\n            if relative_pos > 0.3:\n                return 8  # move_right_block\n            elif relative_pos < -0.3:\n                return 7  # move_left_block\n            else:\n                return 6  # block\n    \n    # Desperate strategy - survival focus\n    if strategy_mode == \"desperate\":\n        if distance > far_range:\n            # Stay far and use projectiles\n            if my_projectile_cd < 0.3:\n                return 9  # projectile\n            else:\n                # Maintain distance\n                if relative_pos > 0:\n                    return 1  # move_left\n                else:\n                    return 2  # move_right\n        \n        elif distance > medium_range:\n            # Medium range - careful positioning\n            if opp_attacking > 0.3:\n                return 6  # block\n            else:\n                # Try to get to projectile range\n                if relative_pos > 0:\n                    return 1  # move_left\n                else:\n                    return 2  # move_right\n        \n        else:\n            # Close range - mostly defensive\n            if opp_attacking > 0.2:\n                return 6  # block\n            elif random.random() < 0.3:\n                # Occasional quick attack\n                return 4  # punch\n            else:\n                # Try to escape\n                if abs(my_x - 0.5) < 0.3:  # Not near wall\n                    if relative_pos > 0:\n                        return 1  # move_left\n                    else:\n                        return 2  # move_right\n                else:\n                    return 6  # block\n    \n    # Defensive strategy - cautious play\n    elif strategy_mode == \"defensive\":\n        if distance > far_range:\n            # Long range harassment\n            if my_projectile_cd < 0.4 and random.random() < 0.7:\n                return 9  # projectile\n            else:\n                # Control spacing\n                if distance > 0.8:\n                    # Get closer for projectile accuracy\n                    if relative_pos > 0:\n                        return 2  # move_right\n                    else:\n                        return 1  # move_left\n                else:\n                    return 0  # idle\n        \n        elif distance > medium_range:\n            # Medium range - careful positioning\n            if opp_attacking > 0.4:\n                return 6  # block\n            elif my_projectile_cd < 0.3:\n                return 9  # projectile\n            else:\n                # Maintain optimal distance\n                if distance < 0.25:\n                    # Back away\n                    if relative_pos > 0:\n                        return 1  # move_left\n                    else:\n                        return 2  # move_right\n                else:\n                    return 0  # idle\n        \n        else:\n            # Close range - mixed defense and counter-attack\n            if opp_attacking > 0.3:\n                return 6  # block\n            elif opp_blocking > 0.5:\n                # Opponent blocking, try to reposition\n                if relative_pos > 0:\n                    return 1  # move_left\n                else:\n                    return 2  # move_right\n            elif random.random() < 0.4:\n                # Counter-attack opportunity\n                attack_choice = random.random()\n                if attack_choice < 0.6:\n                    return 4  # punch\n                else:\n                    return 5  # kick\n            else:\n                # Create space\n                if relative_pos > 0:\n                    return 1  # move_left\n                else:\n                    return 2  # move_right\n    \n    # Balanced strategy - adaptive play\n    elif strategy_mode == \"balanced\":\n        if distance > far_range:\n            # Long range - projectile game\n            if my_projectile_cd < 0.5:\n                projectile_chance = 0.7 if opp_projectile_cd > 0.5 else 0.5\n                if random.random() < projectile_chance:\n                    return 9  # projectile\n            \n            # Positioning for projectiles\n            if distance > 0.85:\n                if relative_pos > 0:\n                    return 2  # move_right\n                else:\n                    return 1  # move_left\n            else:\n                positioning_choice = random.random()\n                if positioning_choice < 0.4:\n                    if relative_pos > 0:\n                        return 2  # move_right\n                    else:\n                        return 1  # move_left\n                else:\n                    return 0  # idle\n        \n        elif distance > medium_range:\n            # Medium range - tactical positioning\n            if opp_attacking > 0.4:\n                return 6  # block\n            \n            action_choice = random.random()\n            if action_choice < 0.3 and my_projectile_cd < 0.4:\n                return 9  # projectile\n            elif action_choice < 0.6:\n                # Advance for attack\n                if relative_pos > 0:\n                    return 2  # move_right\n                else:\n                    return 1  # move_left\n            elif action_choice < 0.8:\n                # Wait and observe\n                return 0  # idle\n            else:\n                # Jump for positioning\n                return 3  # jump",
      "fighting_style": "adaptive",
      "creation_time": 1748763419.260802,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_028",
      "generation": 0,
      "fitness": 264.9200000000031,
      "win_rate": 0.0,
      "avg_reward": 264.9200000000031,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] if len(state) > 5 else 0.0\n    my_blocking = state[6] if len(state) > 6 else 0.0\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cooldown = state[8] if len(state) > 8 else 0.0\n    \n    # Extract opponent information\n    opp_health = state[12] if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] if len(state) > 16 else 0.0\n    opp_blocking = state[17] if len(state) > 17 else 0.0\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Define pressure fighter strategic parameters\n    close_range_threshold = 0.15\n    medium_range_threshold = 0.3\n    far_range_threshold = 0.5\n    aggression_multiplier = 1.2\n    corner_distance_threshold = 0.8\n    health_desperation_threshold = -0.4\n    winning_threshold = 0.3\n    \n    # Emergency survival mode when health is critically low\n    if health_advantage < health_desperation_threshold and my_health < 0.3:\n        if distance < close_range_threshold and opp_attacking > 0.5:\n            return 6  # Block incoming attack\n        elif distance > medium_range_threshold and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to maintain distance\n        elif distance > close_range_threshold:\n            # Maintain distance while low health\n            if relative_pos > 0:\n                return 8  # Move right while blocking\n            else:\n                return 7  # Move left while blocking\n    \n    # Opponent is stunned - maximum aggression opportunity\n    if opp_stunned > 0.5:\n        if distance < close_range_threshold:\n            # Close range - mix up attacks for maximum damage\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 5  # Kick for higher damage\n            elif attack_choice < 0.8:\n                return 4  # Punch for speed\n            else:\n                return 5  # Another kick\n        elif distance < medium_range_threshold:\n            # Rush in for the kill\n            if relative_pos > 0:\n                return 2  # Move right toward stunned opponent\n            else:\n                return 1  # Move left toward stunned opponent\n        else:\n            # Too far for immediate pressure\n            if my_projectile_cooldown < 0.3:\n                return 9  # Projectile while closing distance\n            else:\n                # Move closer aggressively\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # I'm stunned - defensive recovery\n    if my_stunned > 0.5:\n        if distance < close_range_threshold and opp_attacking > 0.3:\n            return 6  # Block to minimize damage\n        elif distance < medium_range_threshold:\n            # Try to create space while stunned\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            return 6  # Just block and recover\n    \n    # Opponent is attacking - pressure fighter response\n    if opp_attacking > 0.5:\n        if distance < close_range_threshold:\n            # In close range during opponent attack\n            block_or_counter = random.random()\n            if health_advantage < -0.2:\n                return 6  # Block when losing\n            elif block_or_counter < 0.3:\n                return 6  # Sometimes block for safety\n            elif block_or_counter < 0.65:\n                return 4  # Fast counter punch\n            else:\n                return 5  # Counter kick\n        elif distance < medium_range_threshold:\n            # Medium range - rush in during their attack recovery\n            if relative_pos > 0:\n                return 2  # Aggressive advance right\n            else:\n                return 1  # Aggressive advance left\n    \n    # Corner pressure strategy - key to pressure fighting\n    stage_position = my_x_pos\n    opp_stage_position = opp_x_pos\n    \n    # Determine if opponent is near corner\n    opp_near_left_corner = opp_stage_position < 0.2\n    opp_near_right_corner = opp_stage_position > 0.8\n    my_near_left_corner = stage_position < 0.2\n    my_near_right_corner = stage_position > 0.8\n    \n    # If I'm cornered, try to escape with movement\n    if my_near_left_corner or my_near_right_corner:\n        if distance < close_range_threshold and opp_attacking > 0.3:\n            # Cornered and under attack - block and move\n            if my_near_left_corner:\n                return 8  # Move right while blocking\n            else:\n                return 7  # Move left while blocking\n        elif distance < medium_range_threshold:\n            # Try to jump out or create space\n            escape_method = random.random()\n            if escape_method < 0.4:\n                return 3  # Jump to escape corner\n            elif my_near_left_corner:\n                return 2  # Move right to escape\n            else:\n                return 1  # Move left to escape\n    \n    # Opponent is cornered - maximum pressure opportunity\n    if opp_near_left_corner or opp_near_right_corner:\n        if distance < close_range_threshold:\n            # Perfect position for corner pressure\n            if opp_blocking > 0.5:\n                # Opponent is blocking - mix up attacks to break guard\n                mixup_choice = random.random()\n                if mixup_choice < 0.3:\n                    return 5  # Heavy kick to break block\n                elif mixup_choice < 0.6:\n                    return 4  # Fast punch\n                else:\n                    return 3  # Jump attack to confuse\n            else:\n                # Opponent not blocking - aggressive attack\n                corner_attack = random.random()\n                if corner_attack < 0.6:\n                    return 5  # Strong kick\n                else:\n                    return 4  # Fast punch\n        elif distance < medium_range_threshold:\n            # Close the distance for corner pressure\n            if relative_pos > 0:\n                return 2  # Move right to maintain corner pressure\n            else:\n                return 1",
      "fighting_style": "pressure_fighter",
      "creation_time": 1748763419.260812,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_025",
      "generation": 1,
      "fitness": 263.6399999999932,
      "win_rate": 0.5,
      "avg_reward": 263.6399999999932,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    opponent_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Define hybrid tactical ranges\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    \n    # Hybrid fighting parameters - balanced approach\n    base_aggression = 0.65\n    defensive_threshold = 0.75\n    counter_attack_window = 0.25\n    spacing_preference = 0.2\n    \n    # Adaptive aggression based on health advantage\n    if health_advantage > 0.4:\n        current_aggression = min(0.85, base_aggression + 0.2)\n        defense_priority = 0.3\n    elif health_advantage < -0.4:\n        current_aggression = max(0.4, base_aggression - 0.25)\n        defense_priority = 0.8\n    else:\n        current_aggression = base_aggression\n        defense_priority = 0.5\n    \n    # Critical health emergency responses\n    if my_health < 0.15:\n        if opponent_attack_status > 0.6 and distance < 0.25:\n            return 6  # Emergency block\n        if distance > 0.4 and my_projectile_cooldown < 0.2:\n            return 9  # Desperate projectile\n        # Escape with blocking movement\n        if relative_pos > 0:\n            return 7\n        else:\n            return 8\n    \n    # Opponent behavior analysis for hybrid adaptation\n    opponent_is_aggressive = opponent_velocity_x != 0 and abs(opponent_velocity_x) > 0.2\n    opponent_is_retreating = (relative_pos > 0 and opponent_velocity_x < -0.2) or (relative_pos < 0 and opponent_velocity_x > 0.2)\n    opponent_is_attacking = opponent_attack_status > 0.5\n    opponent_is_blocking = opponent_block_status > 0.6\n    \n    # Wall awareness for positioning\n    near_left_wall = my_pos_x < 0.2\n    near_right_wall = my_pos_x > 0.8\n    opponent_near_wall = opponent_pos_x < 0.2 or opponent_pos_x > 0.8\n    \n    # Range-based hybrid strategy\n    if distance <= ultra_close_range:\n        # Ultra-close: Mix offense and defense\n        if opponent_is_attacking:\n            # Defensive response with counter opportunities\n            if my_health < opponent_health * 0.8:\n                return 6  # Block when at disadvantage\n            elif random.random() < defense_priority:\n                return 6  # Block based on defensive priority\n            else:\n                # Counter attack - quick punch for speed\n                return 4\n        \n        elif opponent_is_blocking:\n            # Guard break mixups\n            mixup_choice = random.random()\n            if mixup_choice < 0.3 and my_projectile_cooldown < 0.4:\n                return 9  # Projectile to break guard\n            elif mixup_choice < 0.55:\n                return 5  # Strong kick\n            elif mixup_choice < 0.75:\n                # Reposition for angle change\n                if not near_left_wall and (near_right_wall or random.random() < 0.5):\n                    return 1\n                else:\n                    return 2\n            else:\n                return 4  # Quick punch\n        \n        else:\n            # Neutral ultra-close - hybrid pressure\n            attack_choice = random.random()\n            aggression_modifier = current_aggression + 0.1\n            \n            if attack_choice < aggression_modifier * 0.4:\n                return 4  # Quick punch\n            elif attack_choice < aggression_modifier * 0.7:\n                return 5  # Power kick\n            elif attack_choice < aggression_modifier * 0.85:\n                return 6  # Defensive stance\n            else:\n                # Movement for positioning\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    elif distance <= close_range:\n        # Close range: Balanced approach with spacing control\n        if opponent_is_attacking:\n            # Defensive options with spacing\n            if distance < 0.12:\n                return 6  # Block close attacks\n            else:\n                # Create space while defending\n                if relative_pos > 0:\n                    return 7  # Block and move left\n                else:\n                    return 8  # Block and move right\n        \n        # Counter attack window after opponent attack\n        if opponent_attack_status < 0.1 and my_attack_status < 0.1:\n            counter_chance = current_aggression + 0.15\n            if random.random() < counter_chance:\n                if health_advantage > 0.2:\n                    return 5  # Power attack when ahead\n                else:\n                    return 4  # Safe quick attack\n        \n        # Standard close range tactics\n        if opponent_is_blocking:\n            # Patient approach against defense\n            if my_projectile_cooldown < 0.3 and random.random() < 0.25:\n                return 9  # Occasional projectile\n            elif random.random() < 0.4:\n                return 5  # Strong attack vs block\n            else:\n                return 6  # Wait for opening\n        \n        else:\n            # Mixed approach in close range\n            action_choice = random.random()\n            if action_choice < current_aggression * 0.5:\n                return 4  # Quick attack\n            elif action_choice < current_aggression * 0.75:\n                return 5  # Power attack\n            elif action_choice < current_aggression:\n                # Spacing movement\n                if relative_pos > spacing_preference:\n                    return 1  # Move left for spacing\n                else:\n                    return 2  # Move right for spacing\n            else:\n                return 6  # Defensive stance\n    \n    elif distance <= medium_range:\n        # Medium range: Hybrid positioning and engagement\n        if opponent_is_attacking and distance < 0.25:\n            return 6  # Block incoming attacks",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371396,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_022",
      "generation": 1,
      "fitness": 263.3999999999918,
      "win_rate": 0.5,
      "avg_reward": 263.3999999999918,
      "code": "def get_action(state):\n    import random\n    import math\n    import numpy as np\n    \n    # Extract and validate key state information with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information\n    my_x_pos = state[0]\n    my_y_pos = state[1] \n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_x_pos = state[11]\n    opp_y_pos = state[12]\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Hybrid strategic parameters - balanced approach\n    close_range = 0.14\n    medium_range = 0.32\n    far_range = 0.50\n    \n    # Adaptive aggression based on situation\n    base_aggression = 0.65\n    defensive_threshold = 0.4\n    aggressive_threshold = 0.8\n    \n    # Health-based strategic adjustment\n    health_ratio = my_health / max(0.1, opp_health)\n    critical_health = 0.25\n    winning_health = 0.7\n    \n    # Calculate dynamic aggression level\n    if health_advantage > 0.3:\n        aggression_level = min(aggressive_threshold, base_aggression * 1.3)\n    elif health_advantage < -0.3:\n        aggression_level = max(defensive_threshold, base_aggression * 0.7)\n    else:\n        aggression_level = base_aggression\n    \n    # Emergency situations - override normal strategy\n    if my_stunned > 0.5:\n        return 0  # Cannot act while stunned\n    \n    # Critical health management\n    if my_health < critical_health:\n        if opp_attacking > 0.5 and distance < close_range:\n            return 6  # Emergency block\n        elif distance > medium_range and my_projectile_cd < 0.2:\n            return 9  # Keep away with projectiles\n        elif distance < medium_range:\n            # Escape while blocking\n            if my_x_pos < 0.2:  # Near left wall\n                return 8  # Move right with block\n            elif my_x_pos > 0.8:  # Near right wall  \n                return 7  # Move left with block\n            else:\n                return 7 if relative_pos > 0 else 8  # Move away with block\n    \n    # Opponent stunned - capitalize with balanced approach\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            combo_choice = random.random()\n            if combo_choice < 0.4:\n                return 5  # Heavy kick for damage\n            elif combo_choice < 0.7:\n                return 4  # Quick punch\n            else:\n                return 3  # Jump attack for mix-up\n        elif distance < medium_range:\n            # Close distance efficiently\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n        else:\n            return 9  # Projectile if too far\n    \n    # Opponent attacking - balanced defensive response\n    if opp_attacking > 0.5:\n        if distance < close_range:\n            defensive_choice = random.random()\n            if defensive_choice < 0.6:\n                return 6  # Block primary option\n            elif defensive_choice < 0.8:\n                return 4  # Counter attack\n            else:\n                return 7 if relative_pos > 0 else 8  # Evasive movement\n        elif distance < medium_range:\n            # Prepare for approach\n            if abs(opp_x_vel) > 0.4:  # Opponent rushing\n                return 6  # Block preparation\n            else:\n                return 9 if my_projectile_cd < 0.3 else 6  # Projectile or block\n    \n    # CLOSE RANGE COMBAT - Hybrid approach\n    if distance <= close_range:\n        # Opponent blocking - mix-up strategy\n        if opp_blocking > 0.5:\n            mixup_choice = random.random()\n            if mixup_choice < 0.25:\n                return 5  # Strong kick to break guard\n            elif mixup_choice < 0.45:\n                return 3  # Jump to change angle\n            elif mixup_choice < 0.65:\n                return 4  # Quick punch\n            else:\n                # Reposition for better angle\n                side_choice = random.random()\n                if side_choice < 0.5:\n                    return 1 if my_x_pos > 0.3 else 2  # Move to open side\n                else:\n                    return 2 if my_x_pos < 0.7 else 1  # Move to open side\n        \n        # Open opponent - attack based on aggression level\n        elif my_attacking < 0.3:  # Not currently attacking\n            if random.random() < aggression_level:\n                # Height-based attack selection\n                if abs(height_diff) > 0.3:\n                    if my_y_pos < opp_y_pos:\n                        return 3  # Jump to reach\n                    else:\n                        return 5  # Kick from above\n                \n                # Standard attack selection\n                attack_choice = random.random()\n                if attack_choice < 0.55:\n                    return 4  # Punch - faster\n                else:\n                    return 5  # Kick - stronger\n            else:\n                # More defensive approach\n                if health_advantage < 0:\n                    return 6  # Block when losing\n                else:\n                    return 4  # Safe punch\n        \n        # Currently attacking or cooling down\n        else:\n            # Maintain position and pressure\n            if abs(relative_pos) > 0.2:\n                return 2 if relative_pos > 0 else 1  # Stay close\n            else:\n                return 0  # Wait for attack cooldown\n    \n    # MEDIUM RANGE COMBAT - Positioning and control\n    elif distance <= medium_range:\n        # Projectile opportunity\n        if my_projectile_cd < 0.2 and random.random() < 0.4:\n            return 9\n        \n        # Approach vs. maintain distance decision\n        approach_decision = random.random()\n        \n        if approach_decision < aggression_level:\n            # Aggressive approach\n            if abs(height_diff) > 0.4:\n                return 3  # Jump to close height gap\n            \n            # Smart approach based on opponent state\n            if opp_blocking > 0.3:\n                # Cautious approach against blocking opponent\n                if relative_pos > 0.1:\n                    return 8  # Move right with block\n                elif relative_pos < -0.1:\n                    return 7  # Move left with block\n                else:\n                    return 6  # Block and wait\n            else:\n                # Direct approach against open opponent\n                if relative_pos > 0.1:\n                    return",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371398,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_027",
      "generation": 1,
      "fitness": 263.139999999993,
      "win_rate": 0.5,
      "avg_reward": 263.139999999993,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24]\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity_x = state[3]\n    my_velocity_y = state[4]\n    my_attack_status = state[5]\n    my_block_status = state[6]\n    opponent_velocity_x = state[14]\n    opponent_velocity_y = state[15]\n    opponent_attack_status = state[16]\n    opponent_block_status = state[17]\n    projectile_cooldown = state[10]\n    opponent_projectile_cooldown = state[21]\n    \n    # Advanced tactical ranges and thresholds\n    very_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.32\n    far_range = 0.5\n    critical_health = 0.2\n    low_health = 0.35\n    winning_threshold = 0.25\n    losing_threshold = -0.25\n    \n    # Adaptive strategy parameters based on current situation\n    base_aggression = 0.5\n    situation_modifier = 0.0\n    \n    # Calculate dynamic aggression based on multiple factors\n    if health_advantage > winning_threshold:\n        situation_modifier += 0.3\n    elif health_advantage < losing_threshold:\n        situation_modifier -= 0.4\n    \n    if my_health < critical_health:\n        situation_modifier -= 0.3\n    elif my_health > 0.8:\n        situation_modifier += 0.2\n    \n    current_aggression = max(0.1, min(0.9, base_aggression + situation_modifier))\n    \n    # Pattern tracking for adaptation\n    opponent_seems_aggressive = opponent_attack_status > 0 or abs(opponent_velocity_x) > 0.1\n    opponent_is_blocking = opponent_block_status > 0\n    opponent_is_mobile = abs(opponent_velocity_x) > 0.05\n    opponent_can_projectile = opponent_projectile_cooldown <= 0\n    i_can_projectile = projectile_cooldown <= 0\n    \n    # Emergency survival mode\n    if my_health < critical_health and health_advantage < -0.5:\n        if distance < very_close_range and opponent_attack_status > 0:\n            return 6  # Block immediate threat\n        elif distance > far_range and i_can_projectile and not opponent_is_blocking:\n            return 9  # Safe projectile\n        elif distance < medium_range:\n            # Create distance with defensive movement\n            if relative_pos > 0:\n                return 7 if random.random() < 0.7 else 1\n            else:\n                return 8 if random.random() < 0.7 else 2\n        else:\n            return 6  # Default defensive block\n    \n    # Very close range combat - high intensity\n    if distance < very_close_range:\n        # Counter-attack opportunities\n        if opponent_attack_status > 0 and not my_attack_status:\n            if health_advantage > 0 and random.random() < 0.6:\n                return 5  # Counter with strong kick\n            else:\n                return 6  # Block first\n        \n        # Break through opponent's guard\n        if opponent_is_blocking:\n            choice = random.random()\n            if choice < 0.25:\n                return 5  # Strong kick to break guard\n            elif choice < 0.4:\n                return 3  # Jump over guard\n            elif choice < 0.6:\n                # Try to get around guard\n                return 1 if relative_pos > 0 else 2\n            else:\n                return 4  # Quick punch\n        \n        # Aggressive very close combat\n        if current_aggression > 0.6:\n            attack_roll = random.random()\n            if attack_roll < 0.4:\n                return 4  # Fast punch\n            elif attack_roll < 0.7:\n                return 5  # Strong kick\n            elif attack_roll < 0.85:\n                return 3  # Jump attack setup\n            else:\n                return 6  # Defensive block\n        \n        # Defensive very close combat\n        else:\n            if random.random() < 0.5:\n                return 6  # Block\n            elif random.random() < 0.75:\n                return 4  # Safe punch\n            else:\n                # Try to create space\n                return 1 if relative_pos > 0 else 2\n    \n    # Close range combat tactics\n    elif distance < close_range:\n        # Adaptive responses to opponent behavior\n        if opponent_is_blocking and opponent_is_mobile:\n            # Opponent is mobile guard - predict movement\n            if opponent_velocity_x > 0.05:  # Moving right\n                return 2 if random.random() < 0.6 else 5  # Follow or kick\n            elif opponent_velocity_x < -0.05:  # Moving left\n                return 1 if random.random() < 0.6 else 5  # Follow or kick\n            else:\n                return 3  # Jump over stationary guard\n        \n        elif opponent_seems_aggressive and not opponent_is_blocking:\n            # Counter aggressive opponent\n            if health_advantage > 0:\n                # Trade blows when winning\n                return 5 if random.random() < 0.6 else 4\n            else:\n                # Defend when losing\n                if random.random() < 0.6:\n                    return 6\n                else:\n                    return 4  # Quick counter\n        \n        # Standard close combat based on health advantage\n        if health_advantage > winning_threshold:\n            # Aggressive pressure when winning\n            combat_choice = random.random()\n            if combat_choice < 0.35:\n                return 4  # Punch\n            elif combat_choice < 0.6:\n                return 5  # Kick\n            elif combat_choice < 0.75:\n                return 3  # Jump attack\n            elif combat_choice < 0.9:\n                return 6  # Block\n            else:\n                return 1 if relative_pos > 0 else 2  # Reposition\n        \n        elif health_advantage < losing_threshold:\n            # Cautious approach when losing\n            if random.random() < 0.45:\n                return 6  # Block more often\n            elif random.random() < 0.7:\n                return 4  # Safe punch\n            elif random.random() < 0.85:\n                return 5  # Kick\n            else:\n                return 3  # Jump\n        \n        # Balanced close combat\n        else:\n            balanced_choice = random.random()\n            if balanced_choice < 0.3:\n                return 4  # Punch\n            elif balanced_choice < 0.55:\n                return 5  # Kick\n            elif balanced_choice < 0.75:\n                return 6  # Block\n            elif balanced_choice < 0.9:\n                return 3  # Jump\n            else:\n                return 0  # Wait and observe\n    \n    # Medium range - critical positioning zone\n    elif distance < medium_range:\n        # Handle opponent projectile threat\n        if opponent_can_projectile and distance > 0.25:\n            evasion_choice = random.random()\n            if evasion_choice < 0.3:\n                return 3  # Jump over projectile\n            elif evasion_choice < 0.6:\n                return 6  # Block projectile\n            else:\n                # Approach with blocking movement\n                if relative_pos > 0:\n                    return 8",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371399,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_004",
      "generation": 0,
      "fitness": 261.2399999999912,
      "win_rate": 0.5,
      "avg_reward": 261.2399999999912,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_block_status = state[6]\n    opponent_block_status = state[17]\n    my_attack_status = state[5]\n    opponent_attack_status = state[16]\n    projectile_cooldown = state[10]\n    opponent_projectile_cooldown = state[21]\n    \n    # Define tactical ranges and thresholds\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.25\n    winning_threshold = 0.2\n    losing_threshold = -0.2\n    \n    # Adaptive personality factors based on current situation\n    aggression_base = 0.5\n    if health_advantage > winning_threshold:\n        aggression_base = 0.7  # More aggressive when winning\n    elif health_advantage < losing_threshold:\n        aggression_base = 0.3  # More defensive when losing\n    \n    # Emergency defensive mode - critical health\n    if my_health < critical_health and health_advantage < -0.4:\n        if distance < close_range and opponent_attack_status > 0:\n            return 6  # Block incoming attack\n        elif distance > far_range and projectile_cooldown <= 0:\n            return 9  # Try projectile from safe distance\n        elif distance < medium_range:\n            # Try to create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            return 6  # Default to blocking\n    \n    # Opponent behavior analysis for adaptation\n    opponent_is_aggressive = opponent_attack_status > 0\n    opponent_is_blocking = opponent_block_status > 0\n    opponent_has_projectile = opponent_projectile_cooldown <= 0\n    \n    # Close range combat tactics\n    if distance < close_range:\n        # If opponent is blocking, try to mix up or reposition\n        if opponent_is_blocking:\n            if random.random() < 0.4:\n                # Try to get behind opponent\n                if relative_pos > 0:\n                    return 1  # Move left to get around\n                else:\n                    return 2  # Move right to get around\n            elif random.random() < 0.3:\n                return 3  # Jump to confuse\n            else:\n                # Try strong attack to break guard\n                return 5  # Kick\n        \n        # If opponent is attacking, defend or counter\n        elif opponent_is_aggressive:\n            if health_advantage < 0:\n                return 6  # Block when losing\n            else:\n                # Counter attack when winning\n                if random.random() < 0.6:\n                    return 4  # Quick punch\n                else:\n                    return 5  # Strong kick\n        \n        # Neutral close combat\n        else:\n            if health_advantage > winning_threshold:\n                # Aggressive when winning\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Punch\n                elif attack_choice < 0.8:\n                    return 5  # Kick\n                else:\n                    return 3  # Jump attack setup\n            elif health_advantage < losing_threshold:\n                # More cautious when losing\n                if random.random() < 0.4:\n                    return 6  # Block\n                elif random.random() < 0.7:\n                    return 4  # Safe punch\n                else:\n                    return 5  # Kick\n            else:\n                # Balanced approach\n                choice = random.random()\n                if choice < 0.4:\n                    return 4  # Punch\n                elif choice < 0.65:\n                    return 5  # Kick\n                elif choice < 0.8:\n                    return 6  # Block\n                else:\n                    return 3  # Jump\n    \n    # Medium range positioning and tactics\n    elif distance < medium_range:\n        # This is the key tactical range for positioning\n        \n        # If opponent has projectile ready, be more careful\n        if opponent_has_projectile and distance > 0.2:\n            if random.random() < 0.6:\n                # Move unpredictably to avoid projectile\n                if random.random() < 0.3:\n                    return 3  # Jump\n                elif relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                return 6  # Block projectile\n        \n        # Aggressive positioning when winning\n        if health_advantage > winning_threshold:\n            if relative_pos > 0.1:\n                return 2  # Move right toward opponent\n            elif relative_pos < -0.1:\n                return 1  # Move left toward opponent\n            else:\n                # Close enough to pressure\n                if random.random() < 0.4:\n                    return 4  # Punch\n                elif random.random() < 0.7:\n                    return 5  # Kick\n                else:\n                    return 3  # Jump in\n        \n        # Defensive positioning when losing\n        elif health_advantage < losing_threshold:\n            if opponent_is_aggressive:\n                return 6  # Block\n            elif projectile_cooldown <= 0:\n                return 9  # Projectile\n            else:\n                # Try to maintain distance\n                if relative_pos > 0:\n                    return 7  # Move left with guard\n                else:\n                    return 8  # Move right with guard\n        \n        # Neutral medium range\n        else:\n            choice = random.random()\n            if choice < 0.3:\n                # Close distance\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            elif choice < 0.5 and projectile_cooldown <= 0:\n                return 9  # Projectile\n            elif choice < 0.7:\n                return 3  # Jump for positioning\n            elif choice < 0.85:\n                return 6  # Block\n            else:\n                return 0  # Wait and observe\n    \n    # Far range tactics\n    elif distance < far_range:\n        # Projectile range - key for ranged combat\n        \n        # If we can use projectile\n        if projectile_cooldown <= 0:\n            # Don't always use projectile - be unpredictable\n            if random.random() < 0.7:\n                return 9  # Projectile attack\n        \n        # If opponent might have projectile, be defensive\n        if opponent_has_projectile:\n            if random.random() < 0.4:\n                return 6  # Block\n            elif random.random() < 0.6:\n                return 3  # Jump to avoid\n            else:\n                # Try to close distance safely\n                if relative_pos > 0:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block\n        \n        # Positioning based on health advantage\n        if health_advantage > winning_threshold:\n            # Winning - can afford to close distance\n            if relative_pos > 0.1:\n                return 2  # Move right\n            elif relative_pos < -0.1:\n                return 1  # Move left\n            else:\n                return 3  # Jump in\n        \n        elif health_advantage < losing_threshold:\n            # Losing - try to keep distance and poke\n            if projectile_cooldown <= 0:\n                return",
      "fighting_style": "adaptive",
      "creation_time": 1748763419.2608151,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_029",
      "generation": 0,
      "fitness": 257.23999999999035,
      "win_rate": 0.5,
      "avg_reward": 257.23999999999035,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key game state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[3]))\n    opponent_health = max(0.0, min(1.0, state[14]))\n    my_position = state[1]\n    opponent_position = state[12]\n    \n    # Extract attack and defense states\n    my_attack_cooldown = max(0.0, state[8])\n    opponent_attack_cooldown = max(0.0, state[19])\n    my_projectile_cooldown = max(0.0, state[10])\n    opponent_is_attacking = state[18] > 0.5\n    \n    # Define strategic thresholds for patient defender style\n    close_range = 0.12\n    medium_range = 0.28\n    critical_health = 0.25\n    safe_health = 0.6\n    perfect_block_distance = 0.18\n    \n    # Emergency defensive actions when health is critical\n    if my_health < critical_health:\n        if opponent_is_attacking and distance < perfect_block_distance:\n            return 6  # Block incoming attack\n        \n        if distance > 0.4 and my_projectile_cooldown < 0.1:\n            return 9  # Safe projectile from distance\n        \n        # Defensive movement when critically low\n        if relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Patient defense - wait for opponent mistakes\n    if opponent_is_attacking:\n        if distance < 0.2:\n            return 6  # Perfect block timing\n        elif distance < 0.35:\n            # Create space while blocking\n            if relative_pos > 0:\n                return 7  # Block and move left\n            else:\n                return 8  # Block and move right\n    \n    # Counter-attack opportunities after successful defense\n    if opponent_attack_cooldown > 0.3 and distance < close_range:\n        # Opponent is vulnerable after attack\n        if health_advantage > 0.2:\n            return 5  # Power kick when ahead\n        else:\n            return 4  # Quick punch to stay safe\n    \n    # Health advantage adaptations\n    if health_advantage > 0.4:\n        # Winning decisively - more aggressive patient style\n        if distance < close_range and my_attack_cooldown < 0.1:\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 4  # Quick punch\n            elif attack_choice < 0.7:\n                return 5  # Power kick\n            else:\n                return 6  # Maintain defensive stance\n        \n        elif distance > medium_range and my_projectile_cooldown < 0.2:\n            return 9  # Projectile pressure\n    \n    # Losing situation - ultra defensive\n    elif health_advantage < -0.3:\n        if distance < 0.15:\n            return 6  # Block close attacks\n        elif distance > 0.45:\n            if my_projectile_cooldown < 0.1:\n                return 9  # Long range harassment\n            else:\n                return 6  # Defensive stance\n        else:\n            # Medium range defensive movement\n            if abs(my_position) > 0.7:  # Near wall\n                if my_position > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                return 6  # Hold defensive position\n    \n    # Core patient defender logic by range\n    if distance < close_range:\n        # Close range - prioritize defense with calculated offense\n        if opponent_attack_cooldown > 0.2:\n            # Safe window to attack\n            if random.random() < 0.6:\n                return 4  # Quick punch\n            else:\n                return 5  # Power kick\n        else:\n            # Default to blocking in close range\n            return 6\n    \n    elif distance < medium_range:\n        # Medium range - positioning and timing\n        if opponent_is_attacking:\n            return 6  # Block incoming attacks\n        \n        # Controlled approach when safe\n        if opponent_attack_cooldown > 0.4:\n            if relative_pos > 0.1:\n                return 2  # Move right toward opponent\n            elif relative_pos < -0.1:\n                return 1  # Move left toward opponent\n            else:\n                return 6  # Hold position defensively\n        else:\n            return 6  # Stay defensive\n    \n    else:\n        # Long range - patient projectile game\n        if my_projectile_cooldown < 0.1:\n            return 9  # Projectile attack\n        \n        # Position for projectiles while staying defensive\n        if abs(my_position) > 0.8:  # Too close to wall\n            if my_position > 0:\n                return 7  # Move away from right wall with block\n            else:\n                return 8  # Move away from left wall with block\n        \n        # Maintain distance advantage\n        if distance < 0.4:\n            if relative_pos > 0:\n                return 7  # Back away left with defense\n            else:\n                return 8  # Back away right with defense\n        else:\n            return 6  # Patient defensive stance\n    \n    # Fallback to defensive stance\n    return 6",
      "fighting_style": "patient_defender",
      "creation_time": 1748763419.2608168,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_012",
      "generation": 0,
      "fitness": 256.61999999999307,
      "win_rate": 0.0,
      "avg_reward": 256.61999999999307,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player state information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent state information\n    opp_health = state[12] if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attack_status = state[16] if len(state) > 16 else 0.0\n    opp_block_status = state[17] if len(state) > 17 else 0.0\n    \n    # Define strategic thresholds for zoner playstyle\n    optimal_distance = 0.4  # Preferred fighting distance\n    danger_distance = 0.15  # Too close for comfort\n    max_distance = 0.8      # Maximum effective range\n    projectile_range = 0.3  # Minimum distance for projectiles\n    \n    # Health-based aggression modifiers\n    desperate_threshold = -0.6  # When losing badly\n    winning_threshold = 0.4     # When winning decisively\n    conservative_threshold = -0.2  # When slightly behind\n    \n    # Movement and positioning parameters\n    corner_threshold = 0.1  # Near stage edge\n    retreat_urgency = 0.8   # How aggressively to retreat when close\n    \n    # Projectile management\n    projectile_ready = my_projectile_cooldown <= 0.1\n    projectile_spam_distance = 0.5  # Distance for safe projectile spam\n    \n    # Opponent behavior analysis\n    opponent_rushing = opp_velocity_x != 0 and distance < 0.3\n    opponent_blocking = opp_block_status > 0.5\n    opponent_attacking = opp_attack_status > 0.5\n    opponent_airborne = abs(height_diff) > 0.2\n    \n    # Emergency defensive situations\n    if distance < danger_distance and opponent_attacking:\n        if health_advantage < conservative_threshold:\n            # Desperate situation - block and retreat\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Can afford to trade - quick counter\n            if random.random() < 0.3:\n                return 4  # Quick punch\n            else:\n                return 6  # Block\n    \n    # Critical health management\n    if health_advantage < desperate_threshold:\n        # Losing badly - play very defensively\n        if distance < projectile_range:\n            # Too close - retreat while blocking\n            if my_x_pos < corner_threshold:\n                return 8  # Move right while blocking\n            elif my_x_pos > (1.0 - corner_threshold):\n                return 7  # Move left while blocking\n            else:\n                # Choose retreat direction based on opponent position\n                if relative_pos > 0:\n                    return 7  # Move away left\n                else:\n                    return 8  # Move away right\n        else:\n            # Safe distance - spam projectiles\n            if projectile_ready:\n                return 9  # Projectile\n            else:\n                # Maintain distance while cooldown recovers\n                if distance < optimal_distance:\n                    if relative_pos > 0:\n                        return 1  # Move left (away)\n                    else:\n                        return 2  # Move right (away)\n                else:\n                    return 0  # Idle while waiting\n    \n    # Winning decisively - controlled aggression\n    elif health_advantage > winning_threshold:\n        if distance > max_distance:\n            # Too far - close in slightly\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        elif distance > projectile_range:\n            # Perfect zoning range\n            if projectile_ready:\n                if opponent_blocking:\n                    # Mix up timing against blocking opponent\n                    if random.random() < 0.3:\n                        return 0  # Idle to break rhythm\n                    else:\n                        return 9  # Projectile\n                else:\n                    return 9  # Projectile\n            else:\n                # Maintain position while cooldown recovers\n                if opponent_rushing:\n                    if relative_pos > 0:\n                        return 1  # Move away left\n                    else:\n                        return 2  # Move away right\n                else:\n                    return 0  # Idle\n        else:\n            # Too close for comfort - create space\n            if my_x_pos < corner_threshold:\n                return 2  # Move right to avoid corner\n            elif my_x_pos > (1.0 - corner_threshold):\n                return 1  # Move left to avoid corner\n            else:\n                if relative_pos > 0:\n                    return 1  # Move left (away)\n                else:\n                    return 2  # Move right (away)\n    \n    # Neutral or slightly losing game state\n    else:\n        # Core zoner gameplay\n        if distance > projectile_spam_distance:\n            # Long range - projectile pressure\n            if projectile_ready:\n                if opponent_airborne:\n                    # Lead the target if opponent is jumping\n                    return 9  # Projectile\n                elif opponent_blocking:\n                    # Vary timing against defensive opponents\n                    if random.random() < 0.4:\n                        # Pause to break their rhythm\n                        return 0  # Idle\n                    else:\n                        return 9  # Projectile\n                else:\n                    return 9  # Projectile\n            else:\n                # No projectile available - manage distance\n                if distance > max_distance:\n                    # Close in slightly\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    # Maintain distance\n                    return 0  # Idle\n        \n        elif distance > optimal_distance:\n            # Medium-long range - optimal zoning distance\n            if projectile_ready:\n                if opponent_rushing:\n                    # Opponent closing in - prioritize spacing\n                    if random.random() < 0.7:\n                        return 9  # Projectile to stop rush\n                    else:\n                        # Retreat while shooting\n                        if relative_pos > 0:\n                            return 1  # Move away left\n                        else:\n                            return 2  # Move away right\n                else:\n                    # Opponent not rushing - safe to projectile\n                    return 9  # Project",
      "fighting_style": "zoner",
      "creation_time": 1748763419.260819,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_022",
      "generation": 0,
      "fitness": 255.81999999999374,
      "win_rate": 0.5,
      "avg_reward": 255.81999999999374,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract player and opponent info\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position_x = state[0]\n    opponent_position_x = state[11]\n    \n    # Extract combat status\n    my_block_status = state[5] if len(state) > 5 else 0\n    opponent_attack_status = state[16] if len(state) > 16 else 0\n    my_projectile_cooldown = state[7] if len(state) > 7 else 0\n    opponent_projectile_cooldown = state[18] if len(state) > 18 else 0\n    \n    # Define zoner strategy constants\n    optimal_distance = 0.4  # Preferred fighting distance\n    danger_zone = 0.12      # Too close for comfort\n    projectile_range = 0.35 # Effective projectile distance\n    retreat_threshold = 0.2 # When to retreat\n    health_crisis = 0.3     # Critical health level\n    \n    # Calculate stage position awareness\n    stage_center = 0.5\n    near_corner = abs(my_position_x - stage_center) > 0.7\n    opponent_cornered = abs(opponent_position_x - stage_center) > 0.7\n    \n    # Determine current tactical situation\n    is_critical_health = my_health < health_crisis\n    is_dominating = health_advantage > 0.4\n    is_losing = health_advantage < -0.2\n    projectile_ready = my_projectile_cooldown < 0.1\n    opponent_aggressive = opponent_attack_status > 0.5\n    \n    # Emergency defensive situations\n    if is_critical_health and distance < danger_zone:\n        if opponent_aggressive:\n            return 6  # Block incoming attack\n        elif relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Ultra close range - escape immediately\n    if distance < danger_zone:\n        # Try to create space with movement\n        if near_corner:\n            # If near corner, move toward center\n            if my_position_x < stage_center:\n                if random.random() < 0.7:\n                    return 8  # Move right blocking\n                else:\n                    return 2  # Move right quickly\n            else:\n                if random.random() < 0.7:\n                    return 7  # Move left blocking\n                else:\n                    return 1  # Move left quickly\n        else:\n            # Normal escape\n            if relative_pos > 0:\n                if random.random() < 0.6:\n                    return 7  # Move left blocking\n                else:\n                    return 1  # Move left\n            else:\n                if random.random() < 0.6:\n                    return 8  # Move right blocking\n                else:\n                    return 2  # Move right\n    \n    # Close range but not ultra close\n    elif distance < retreat_threshold:\n        # If opponent is attacking, prioritize defense\n        if opponent_aggressive:\n            if random.random() < 0.8:\n                return 6  # Block\n            else:\n                # Try to escape while blocking\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n        \n        # If we're dominating, might risk a quick attack\n        elif is_dominating and random.random() < 0.3:\n            if random.random() < 0.6:\n                return 4  # Quick punch\n            else:\n                return 5  # Kick\n        \n        # Default: create space\n        else:\n            if near_corner:\n                # Move toward center\n                if my_position_x < stage_center:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Move away from opponent\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n    \n    # Medium range - positioning phase\n    elif distance < projectile_range:\n        # If we're losing badly, try to get to projectile range\n        if is_losing:\n            if near_corner:\n                # Escape corner first\n                if my_position_x < stage_center:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Create more distance\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        \n        # If projectile is ready and good positioning\n        elif projectile_ready:\n            # Sometimes reposition for better angle\n            if random.random() < 0.2:\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            else:\n                return 9  # Fire projectile\n        \n        # Wait for projectile cooldown while maintaining distance\n        else:\n            if distance < 0.25:  # Too close, back up\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            else:\n                # Good distance, wait and watch\n                if random.random() < 0.7:\n                    return 0  # Idle, wait for cooldown\n                else:\n                    # Minor repositioning\n                    if random.random() < 0.5:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n    \n    # Optimal projectile range\n    elif distance <= optimal_distance:\n        if projectile_ready:\n            # Perfect zoner range\n            if random.random() < 0.85:\n                return 9  # Fire projectile\n            else:\n                # Occasional repositioning for unpredictability\n                if random.random() < 0.5:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        else:\n            # Wait for projectile while maintaining position\n            if opponent_projectile_cooldown < 0.1:\n                # Opponent might fire, be ready to move\n                if random.random() < 0.4:\n                    return 1 if random.random() < 0.5 else 2\n                else:\n                    return 0  # Stand ground\n            else:\n                # Safe to wait\n                if random.random() < 0.8:\n                    return 0  # Idle\n                else:\n                    # Minor positioning adjustment\n                    if random.random() < 0.5:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n    \n    # Long range - maximum zoner effectiveness\n    else:\n        if projectile_ready:\n            if random.random() < 0.9:\n                return 9  # Fire projectile\n            else:\n                # Move to better angle\n                if abs(relative_pos) < 0.1:  # Directly facing\n                    return 9  # Perfect shot\n                else:\n                    # Adjust angle slightly\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n        \n        # Projectile on cooldown at long range\n        else:\n            # If opponent is also at long range, maintain distance\n            if opponent_cornered and not near_corner:\n                # Perfect position, wait for cooldown\n                return 0  # Idle",
      "fighting_style": "zoner",
      "creation_time": 1748763419.26082,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_018",
      "generation": 1,
      "fitness": 255.7599999999914,
      "win_rate": 0.5,
      "avg_reward": 255.7599999999914,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    \n    # Extract attack and block status\n    my_attack_status = state[4]\n    opponent_attack_status = state[15]\n    my_block_status = state[5]\n    opponent_block_status = state[16]\n    \n    # Extract projectile cooldown and velocities\n    my_projectile_cooldown = max(0.0, state[6])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    my_velocity_x = state[7]\n    opponent_velocity_x = state[18]\n    \n    # Height difference for jump detection\n    height_diff = state[24]\n    \n    # Enhanced strategic constants for improved zoner play\n    optimal_range = 0.45\n    safe_distance = 0.35\n    medium_distance = 0.22\n    close_distance = 0.12\n    danger_distance = 0.06\n    \n    # Health management thresholds\n    critical_health = 0.15\n    low_health = 0.35\n    moderate_health = 0.6\n    \n    # Projectile management\n    projectile_ready = my_projectile_cooldown < 0.08\n    projectile_almost_ready = my_projectile_cooldown < 0.2\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.1\n    \n    # Enhanced corner detection and stage control\n    stage_left = -0.8\n    stage_right = 0.8\n    corner_danger_left = my_position < -0.65\n    corner_danger_right = my_position > 0.65\n    opponent_cornered_left = opponent_position < -0.65\n    opponent_cornered_right = opponent_position > 0.65\n    \n    # Movement prediction and opponent analysis\n    opponent_approaching = (relative_pos > 0 and opponent_velocity_x < -0.2) or (relative_pos < 0 and opponent_velocity_x > 0.2)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.2) or (relative_pos < 0 and opponent_velocity_x < -0.2)\n    opponent_stationary = abs(opponent_velocity_x) < 0.1\n    \n    # Critical survival mode - highest priority\n    if my_health <= critical_health:\n        # Immediate attack defense\n        if opponent_attack_status > 0 and distance < medium_distance:\n            return 6  # Block incoming damage\n        \n        # Escape from close quarters\n        if distance < close_distance:\n            if relative_pos > 0:  # Opponent to right\n                if not corner_danger_left:\n                    return 7  # Move left with block\n                else:\n                    # Cornered, try to jump over or block\n                    if height_diff > -0.1:\n                        return 3  # Jump to escape\n                    else:\n                        return 6  # Block\n            else:  # Opponent to left\n                if not corner_danger_right:\n                    return 8  # Move right with block\n                else:\n                    if height_diff > -0.1:\n                        return 3  # Jump to escape\n                    else:\n                        return 6  # Block\n        \n        # Desperate zoning attempts\n        if projectile_ready and distance > close_distance:\n            return 9\n        \n        # Create distance when possible\n        if distance < safe_distance:\n            if relative_pos > 0 and not corner_danger_left:\n                return 1  # Move away left\n            elif relative_pos < 0 and not corner_danger_right:\n                return 2  # Move away right\n            else:\n                return 6  # Block if can't escape\n    \n    # Enhanced defensive responses\n    if opponent_attack_status > 0:\n        if distance < medium_distance:\n            # Threat is real, need defense\n            if my_health <= low_health:\n                return 6  # Priority block when low health\n            else:\n                # Try evasive blocking\n                if opponent_approaching:\n                    if relative_pos > 0 and not corner_danger_left:\n                        return 7  # Retreat left with block\n                    elif relative_pos < 0 and not corner_danger_right:\n                        return 8  # Retreat right with block\n                    else:\n                        return 6  # Pure block\n                else:\n                    return 6  # Standard block\n        elif distance < safe_distance and projectile_ready:\n            # Counter-attack opportunity\n            return 9\n    \n    # Anti-air and jump defense\n    if height_diff < -0.25:  # Opponent jumping\n        if distance < safe_distance:\n            if projectile_ready:\n                return 9  # Anti-air projectile\n            else:\n                # Prepare for landing mixup\n                if distance < medium_distance:\n                    return 6  # Block potential dive attack\n                else:\n                    # Create space\n                    if relative_pos > 0 and not corner_danger_left:\n                        return 1\n                    elif not corner_danger_right:\n                        return 2\n                    else:\n                        return 6\n    \n    # Opponent projectile threat response\n    if opponent_projectile_threat and distance > medium_distance:\n        # They might throw projectile, prepare to deal with it\n        if opponent_stationary and distance > safe_distance:\n            # Likely projectile incoming, prepare movement or our own\n            if projectile_ready and random.random() < 0.6:\n                return 9  # Counter-projectile\n            else:\n                # Prepare to evade\n                if relative_pos > 0 and not corner_danger_left:\n                    return 1  # Move left to avoid\n                elif not corner_danger_right:\n                    return 2  # Move right to avoid\n        elif distance < safe_distance:\n            # Close enough to pressure them out of projectile\n            if relative_pos > 0 and not corner_danger_right:\n                return 2  # Close distance\n            elif not corner_danger_left:\n                return 1  # Close distance\n    \n    # Core zoning strategy - optimal range control\n    if distance >= optimal_range:\n        # Perfect zoning distance\n        if projectile_ready:\n            # Check for optimal firing conditions\n            if opponent_stationary or opponent_approaching:\n                return 9  # High-probability hit\n            elif opponent_retreating:\n                # They're backing away, maintain pressure but consider spacing\n                if distance > 0.6:\n                    # Too far, let them retreat and reset\n                    if relative_pos > 0 and not corner_danger_right:\n                        return 2  # Close gap slightly\n                    elif not corner_danger_left:\n                        return 1  # Close gap slightly\n                    else:\n                        return 0  # Wait\n                else:\n                    return 9  # Continue pressure\n            else:\n                # Uncertain movement, throw projectile with slight delay\n                if random.random() < 0.75:\n                    return 9\n                else:\n                    return 0  # Occasional pause for unpredictability\n        else:\n            # Projectile cooling down, maintain optimal position\n            if opponent_approaching and distance < 0.55:\n                # They're getting too close, back up\n                if relative_pos > 0 and not corner_danger_left:\n                    return 1\n                elif not corner_danger_right:\n                    return 2\n                else:\n                    return",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371406,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_018",
      "generation": 3,
      "fitness": 255.39999999999054,
      "win_rate": 0.5,
      "avg_reward": 255.39999999999054,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 1.0\n    my_pos_x = max(0.0, min(1.0, state[2])) if len(state) > 2 else 0.5\n    my_velocity_x = max(-1.0, min(1.0, state[4])) if len(state) > 4 else 0.0\n    my_velocity_y = max(-1.0, min(1.0, state[5])) if len(state) > 5 else 0.0\n    my_attack_status = max(0.0, min(1.0, state[7])) if len(state) > 7 else 0.0\n    my_block_status = max(0.0, min(1.0, state[8])) if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, min(1.0, state[10])) if len(state) > 10 else 0.0\n    \n    opponent_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 1.0\n    opponent_pos_x = max(0.0, min(1.0, state[13])) if len(state) > 13 else 0.5\n    opponent_velocity_x = max(-1.0, min(1.0, state[15])) if len(state) > 15 else 0.0\n    opponent_velocity_y = max(-1.0, min(1.0, state[16])) if len(state) > 16 else 0.0\n    opponent_attack_status = max(0.0, min(1.0, state[18])) if len(state) > 18 else 0.0\n    opponent_block_status = max(0.0, min(1.0, state[19])) if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, min(1.0, state[21])) if len(state) > 21 else 0.0\n    \n    # Define evolved tactical ranges with more granular control\n    point_blank_range = 0.03\n    ultra_close_range = 0.08\n    very_close_range = 0.15\n    close_range = 0.22\n    mid_close_range = 0.32\n    medium_range = 0.45\n    mid_far_range = 0.60\n    far_range = 0.80\n    \n    # Enhanced situational awareness\n    wall_proximity = min(my_pos_x, 1.0 - my_pos_x)\n    opponent_wall_proximity = min(opponent_pos_x, 1.0 - opponent_pos_x)\n    corner_pressure = wall_proximity < 0.12\n    opponent_cornered = opponent_wall_proximity < 0.12\n    near_corner = wall_proximity < 0.25\n    opponent_near_corner = opponent_wall_proximity < 0.25\n    \n    # Advanced opponent analysis\n    opponent_aggressive = opponent_attack_status > 0.3 or abs(opponent_velocity_x) > 0.15\n    opponent_very_aggressive = opponent_attack_status > 0.6 or abs(opponent_velocity_x) > 0.3\n    opponent_defensive = opponent_block_status > 0.4\n    opponent_very_defensive = opponent_block_status > 0.7\n    opponent_mobile = abs(opponent_velocity_x) > 0.08\n    opponent_highly_mobile = abs(opponent_velocity_x) > 0.2\n    opponent_approaching = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.25\n    my_projectile_ready = my_projectile_cooldown < 0.3\n    \n    # Calculate momentum and pressure states\n    momentum_factor = 0.0\n    if health_advantage > 0.2:\n        momentum_factor += 0.3\n    elif health_advantage < -0.2:\n        momentum_factor -= 0.3\n    \n    if opponent_cornered and not corner_pressure:\n        momentum_factor += 0.4\n    elif corner_pressure and not opponent_cornered:\n        momentum_factor -= 0.4\n    \n    if opponent_defensive and not opponent_mobile:\n        momentum_factor += 0.2\n    elif opponent_very_aggressive and my_health < opponent_health:\n        momentum_factor -= 0.3\n    \n    # Advanced aggression calculation with momentum\n    base_aggression = 0.55  # Balanced evolved baseline\n    aggression_modifier = momentum_factor * 0.6\n    \n    # Health differential fine-tuning\n    health_ratio = my_health / max(0.1, opponent_health)\n    if health_ratio > 1.5:\n        aggression_modifier += 0.2\n    elif health_ratio < 0.6:\n        aggression_modifier -= 0.25\n    \n    # Distance-based aggression adjustment\n    if distance < close_range:\n        aggression_modifier += 0.1  # Slightly more aggressive up close\n    elif distance > medium_range:\n        aggression_modifier -= 0.05  # Slightly more cautious at range\n    \n    current_aggression = max(0.15, min(0.85, base_aggression + aggression_modifier))\n    \n    # Critical health emergency protocols\n    if my_health < 0.12 and health_advantage < -0.5:\n        if opponent_attack_status > 0.6:\n            return 6  # Emergency block\n        elif distance > mid_far_range and my_projectile_ready:\n            return 9  # Desperate projectile\n        elif distance < very_close_range and corner_pressure:\n            # Last ditch escape attempt\n            if abs(height_diff) < 0.3:\n                return 3  # Jump escape\n            else:\n                return 4 if random.random() < 0.6 else 5  # Fight back\n        elif corner_pressure:\n            escape_direction = 2 if my_pos_x < 0.5 else 1\n            return 7 if escape_direction == 1 else 8  # Defensive movement\n        else:\n            return 6  # Block and pray\n    \n    # Enhanced corner management\n    if corner_pressure:\n        if opponent_very_aggressive and distance < close_range:\n            if opponent_attack_status > 0.7:\n                return 6  # Block immediate threat\n            elif distance < ultra_close_range and my_health > opponent_health * 0.8:\n                return 4 if random.random() < 0.6 else 5  # Counter-pressure\n            else:\n                # Escape sequence based on opponent position\n                if abs(height_diff) < 0.2 and random.random() < 0.5:\n                    return 3  # Jump out\n                else:\n                    center_direction = 2 if my_pos_x < 0.5 else 1\n                    return 7 if center_direction == 1 else 8  #",
      "fighting_style": "evolved",
      "creation_time": 1748772554.5032609,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_029",
      "generation": 1,
      "fitness": 255.01999999999202,
      "win_rate": 0.5,
      "avg_reward": 255.01999999999202,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information with defensive bounds\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = max(0.0, min(1.0, state[0]))\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7]\n    my_projectile_cd = max(0.0, state[10])\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_pos = max(0.0, min(1.0, state[11]))\n    opp_y_pos = state[12]\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18]\n    opp_projectile_cd = max(0.0, state[21]) if len(state) > 21 else 1.0\n    \n    # Define tactical parameters for hybrid style\n    close_range = 0.13\n    medium_range = 0.32\n    far_range = 0.48\n    critical_health = 0.25\n    winning_edge = 0.15\n    losing_edge = -0.15\n    wall_distance = 0.15\n    \n    # Calculate dynamic aggression based on situation\n    base_aggression = 0.5  # Hybrid baseline\n    if health_advantage > winning_edge:\n        base_aggression = 0.65  # More aggressive when ahead\n    elif health_advantage < losing_edge:\n        base_aggression = 0.35  # More defensive when behind\n    \n    # Edge position awareness\n    near_left_wall = my_x_pos < wall_distance\n    near_right_wall = my_x_pos > (1.0 - wall_distance)\n    opp_near_left_wall = opp_x_pos < wall_distance\n    opp_near_right_wall = opp_x_pos > (1.0 - wall_distance)\n    \n    # Cannot act while stunned\n    if my_stunned > 0.5:\n        return 0\n    \n    # Emergency defensive mode - critical health\n    if my_health < critical_health and health_advantage < -0.3:\n        if opp_attacking > 0.5 and distance < close_range:\n            return 6  # Block incoming attack\n        elif distance > medium_range and my_projectile_cd < 0.2:\n            return 9  # Keep distance with projectile\n        elif distance < medium_range:\n            # Escape while blocking\n            if near_left_wall:\n                return 8  # Can only go right\n            elif near_right_wall:\n                return 7  # Can only go left\n            else:\n                return 7 if relative_pos > 0 else 8  # Move away from opponent\n        else:\n            return 6  # Default block\n    \n    # Capitalize on stunned opponent\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            # Mix attacks for unpredictability\n            if random.random() < 0.6:\n                return 5  # Kick for more damage\n            else:\n                return 4  # Punch for speed\n        elif distance < medium_range:\n            # Close distance quickly\n            if relative_pos > 0.1:\n                return 2  # Move right\n            elif relative_pos < -0.1:\n                return 1  # Move left\n            else:\n                return 4  # Attack if close enough\n        else:\n            return 9 if my_projectile_cd < 0.3 else 1  # Projectile or approach\n    \n    # Close range tactics (primary engagement range)\n    if distance < close_range:\n        # Opponent is blocking - need to break guard or reposition\n        if opp_blocking > 0.5:\n            action_roll = random.random()\n            if action_roll < 0.25:\n                return 5  # Strong kick to break guard\n            elif action_roll < 0.45:\n                return 3  # Jump to change angle\n            elif action_roll < 0.7:\n                # Try to flank\n                if not near_right_wall and relative_pos < 0:\n                    return 2  # Move right around them\n                elif not near_left_wall and relative_pos > 0:\n                    return 1  # Move left around them\n                else:\n                    return 5  # Kick if can't flank\n            else:\n                return 4  # Quick punch\n        \n        # Opponent is attacking - defend or counter\n        elif opp_attacking > 0.5:\n            if health_advantage < losing_edge:\n                return 6  # Block when losing\n            elif my_blocking < 0.3:  # Not already blocking\n                counter_roll = random.random()\n                if counter_roll < 0.4:\n                    return 6  # Block first\n                elif counter_roll < 0.7:\n                    return 4  # Quick counter\n                else:\n                    return 5  # Strong counter\n            else:\n                return 4  # Quick counter if already blocking\n        \n        # Neutral close combat\n        else:\n            if health_advantage > winning_edge:\n                # Aggressive when winning\n                attack_roll = random.random()\n                if attack_roll < 0.45:\n                    return 4  # Punch\n                elif attack_roll < 0.75:\n                    return 5  # Kick\n                elif attack_roll < 0.9:\n                    return 3  # Jump attack setup\n                else:\n                    return 6  # Occasional block\n            elif health_advantage < losing_edge:\n                # Cautious when losing\n                caution_roll = random.random()\n                if caution_roll < 0.35:\n                    return 6  # Block more often\n                elif caution_roll < 0.65:\n                    return 4  # Safe punch\n                elif caution_roll < 0.85:\n                    return 5  # Kick\n                else:\n                    return 3  # Jump\n            else:\n                # Balanced hybrid approach\n                balance_roll = random.random()\n                if balance_roll < 0.35:\n                    return 4  # Punch\n                elif balance_roll < 0.6:\n                    return 5  # Kick\n                elif balance_roll < 0.8:\n                    return 6  # Block\n                else:\n                    return 3  # Jump\n    \n    # Medium range tactics (positioning and transition range)\n    elif distance < medium_range:\n        # Handle opponent projectile threat\n        if opp_projectile_cd < 0.3 and distance > 0.2:\n            evasion_roll = random.random()\n            if evasion_roll < 0.3:\n                return 3  # Jump to avoid\n            elif evasion_roll < 0.6:\n                # Move with block\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                return 6  # Block projectile\n        \n        # Corner opponent if they're near wall\n        if opp_near_left_wall and relative_pos < 0:\n            return 1  # Press the advantage",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371408,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_010",
      "generation": 2,
      "fitness": 254.4999999999925,
      "win_rate": 0.5,
      "avg_reward": 254.4999999999925,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 1.0\n    my_pos_x = max(0.0, min(1.0, state[2])) if len(state) > 2 else 0.5\n    my_velocity_x = max(-1.0, min(1.0, state[4])) if len(state) > 4 else 0.0\n    my_velocity_y = max(-1.0, min(1.0, state[5])) if len(state) > 5 else 0.0\n    my_attack_status = max(0.0, min(1.0, state[7])) if len(state) > 7 else 0.0\n    my_block_status = max(0.0, min(1.0, state[8])) if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, min(1.0, state[10])) if len(state) > 10 else 0.0\n    \n    opponent_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 1.0\n    opponent_pos_x = max(0.0, min(1.0, state[13])) if len(state) > 13 else 0.5\n    opponent_velocity_x = max(-1.0, min(1.0, state[15])) if len(state) > 15 else 0.0\n    opponent_velocity_y = max(-1.0, min(1.0, state[16])) if len(state) > 16 else 0.0\n    opponent_attack_status = max(0.0, min(1.0, state[18])) if len(state) > 18 else 0.0\n    opponent_block_status = max(0.0, min(1.0, state[19])) if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, min(1.0, state[21])) if len(state) > 21 else 0.0\n    \n    # Define hybrid tactical ranges\n    ultra_close_range = 0.05\n    very_close_range = 0.12\n    close_range = 0.18\n    medium_range = 0.35\n    far_range = 0.55\n    \n    # Calculate situational awareness factors\n    wall_proximity = min(my_pos_x, 1.0 - my_pos_x)\n    opponent_wall_proximity = min(opponent_pos_x, 1.0 - opponent_pos_x)\n    corner_pressure = wall_proximity < 0.15\n    opponent_cornered = opponent_wall_proximity < 0.15\n    \n    # Analyze opponent patterns\n    opponent_aggressive = opponent_attack_status > 0.4 or abs(opponent_velocity_x) > 0.2\n    opponent_defensive = opponent_block_status > 0.5\n    opponent_mobile = abs(opponent_velocity_x) > 0.1\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.2\n    my_projectile_ready = my_projectile_cooldown < 0.2\n    \n    # Calculate adaptive aggression based on multiple factors\n    base_aggression = 0.6  # Hybrid balance\n    aggression_modifier = 0.0\n    \n    # Health-based aggression adjustment\n    if health_advantage > 0.4:\n        aggression_modifier += 0.25\n    elif health_advantage < -0.4:\n        aggression_modifier -= 0.3\n    \n    # Position-based adjustment\n    if opponent_cornered and not corner_pressure:\n        aggression_modifier += 0.2\n    elif corner_pressure and not opponent_cornered:\n        aggression_modifier -= 0.15\n    \n    # Opponent behavior adjustment\n    if opponent_defensive and not opponent_mobile:\n        aggression_modifier += 0.15  # Pressure turtling opponent\n    elif opponent_aggressive and my_health < opponent_health:\n        aggression_modifier -= 0.2  # Be cautious against aggressive opponent when losing\n    \n    current_aggression = max(0.2, min(0.9, base_aggression + aggression_modifier))\n    \n    # Emergency survival protocols\n    if my_health < 0.15 and health_advantage < -0.6:\n        # Critical health - prioritize survival\n        if opponent_attack_status > 0.6:\n            return 6  # Block immediate danger\n        elif distance > medium_range and my_projectile_ready:\n            return 9  # Safe projectile from distance\n        elif distance < close_range and not corner_pressure:\n            # Try to escape with defensive movement\n            escape_direction = 1 if relative_pos > 0 else 2\n            return 7 if escape_direction == 1 else 8\n        else:\n            return 6  # Default to blocking\n    \n    # Corner escape priority\n    if corner_pressure and distance < medium_range:\n        if opponent_attack_status > 0.5:\n            return 6  # Block while cornered\n        elif distance < very_close_range:\n            # Try to jump out of corner\n            if abs(height_diff) < 0.4 and random.random() < 0.6:\n                return 3\n            else:\n                # Fight back to discourage pressure\n                return 4 if random.random() < 0.7 else 5\n        else:\n            # Move toward center when possible\n            center_direction = 2 if my_pos_x < 0.5 else 1\n            if opponent_projectile_ready and random.random() < 0.4:\n                return 7 if center_direction == 1 else 8  # Move with block\n            else:\n                return center_direction\n    \n    # Ultra-close range combat - frame trap and pressure game\n    if distance < ultra_close_range:\n        # Immediate threat response\n        if opponent_attack_status > 0.7:\n            if my_health > opponent_health * 1.2:\n                return 4  # Counter-attack when health advantage is significant\n            else:\n                return 6  # Block when health is close\n        \n        # Break opponent's guard with mixups\n        if opponent_defensive:\n            mixup_roll = random.random()\n            if mixup_roll < 0.2:\n                return 3  # Jump to break guard\n            elif mixup_roll < 0.4:\n                return 5  # Strong kick\n            elif mixup_roll < 0.6:\n                return 9 if my_projectile_ready else 4  # Point blank projectile or punch\n            elif mixup_roll < 0.8:\n                return 4  # Quick punch\n            else:\n                return 0  # Brief pause to bait\n        \n        # Aggressive pressure when opponent is open\n        if current_aggression > 0.7:\n            pressure_choice = random.random()\n            if pressure_choice < 0.45:\n                return 4  # Fast punch for frame advantage\n            elif pressure_choice < 0.75:\n                return 5  # Kick for damage\n            elif pressure_choice < 0.9:\n                return 3  # Jump for mixup\n            else:\n                return 6  # Block to reset\n        \n        # Balanced ultra-close approach\n        balanced_choice = random.random()\n        if balanced_choice < 0.35:\n            return 4",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978348,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_016",
      "generation": 1,
      "fitness": 254.27999999999003,
      "win_rate": 0.5,
      "avg_reward": 254.27999999999003,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key game state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[3]))\n    opponent_health = max(0.0, min(1.0, state[14]))\n    my_position = state[1]\n    opponent_position = state[12]\n    my_velocity = abs(state[2])\n    opponent_velocity = abs(state[13])\n    \n    # Attack and defense states\n    my_attacking = state[7] > 0.5\n    opponent_attacking = state[18] > 0.5\n    my_blocking = state[8] > 0.5\n    opponent_blocking = state[19] > 0.5\n    my_projectile_cooldown = max(0.0, state[10])\n    opponent_projectile_cooldown = max(0.0, state[21])\n    \n    # Height difference for aerial considerations\n    height_diff = state[24]\n    \n    # Strategic thresholds for hybrid balanced approach\n    close_range = 0.14\n    medium_range = 0.32\n    long_range = 0.55\n    critical_health = 0.2\n    danger_health = 0.35\n    winning_threshold = 0.25\n    decisive_advantage = 0.5\n    \n    # Timing and positioning variables\n    attack_window = opponent_projectile_cooldown > 0.4\n    safe_to_move = not opponent_attacking or distance > 0.25\n    cornered = abs(my_position) > 0.75\n    opponent_cornered = abs(opponent_position) > 0.75\n    \n    # Emergency survival protocol\n    if my_health < critical_health:\n        if opponent_attacking and distance < 0.2:\n            return 6  # Priority block\n        \n        if distance > long_range and my_projectile_cooldown < 0.15:\n            return 9  # Safe long-range harassment\n        \n        if cornered:\n            # Escape corner with defensive movement\n            if my_position > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n        \n        # Defensive spacing when critically low\n        if distance < 0.4:\n            if relative_pos > 0:\n                return 7  # Retreat left defensively\n            else:\n                return 8  # Retreat right defensively\n        \n        return 6  # Default block when critical\n    \n    # Defensive-oriented play when health is low\n    if my_health < danger_health:\n        # Enhanced blocking against attacks\n        if opponent_attacking:\n            if distance < medium_range:\n                # Perfect block timing at medium-close range\n                return 6\n            else:\n                # Defensive movement at longer ranges\n                if distance < long_range:\n                    if relative_pos > 0:\n                        return 7  # Block and create space\n                    else:\n                        return 8  # Block and create space\n        \n        # Conservative counter-attacks when safe\n        if distance < close_range and not opponent_blocking:\n            if opponent_velocity < 0.2 and attack_window:\n                # Calculated low-risk counter\n                if random.random() < 0.6:\n                    return 4  # Quick punch\n                else:\n                    return 6  # Stay defensive\n        \n        # Long-range tactical play\n        if distance > medium_range:\n            if my_projectile_cooldown < 0.2 and not opponent_blocking:\n                return 9  # Safe projectile pressure\n            \n            # Maintain optimal spacing\n            if distance < 0.45:\n                if relative_pos > 0:\n                    return 1  # Back away\n                else:\n                    return 2  # Back away\n        \n        return 6  # Default defensive stance\n    \n    # Balanced aggressive-defensive play when health is stable\n    if health_advantage > -0.15 and health_advantage < winning_threshold:\n        # React to opponent attacks with smart defense\n        if opponent_attacking:\n            if distance < close_range:\n                return 6  # Block close attacks\n            elif distance < medium_range:\n                # Mixed defensive responses\n                if random.random() < 0.7:\n                    return 6  # Block\n                else:\n                    # Evasive movement\n                    if relative_pos > 0:\n                        return 7  # Move left with block\n                    else:\n                        return 8  # Move right with block\n        \n        # Close range hybrid tactics\n        if distance < close_range:\n            if not opponent_blocking and not opponent_attacking:\n                # Optimal attack window\n                attack_choice = random.random()\n                if attack_choice < 0.35:\n                    return 4  # Quick punch\n                elif attack_choice < 0.6:\n                    return 5  # Power kick\n                else:\n                    return 6  # Maintain guard\n            elif opponent_blocking:\n                # Pressure blocked opponent\n                if random.random() < 0.4:\n                    return 5  # Strong kick to break guard\n                else:\n                    return 6  # Wait for opening\n        \n        # Medium range positioning and control\n        elif distance < medium_range:\n            if opponent_projectile_cooldown < 0.3:\n                return 6  # Guard against incoming projectile\n            \n            # Intelligent positioning\n            if safe_to_move:\n                if distance > 0.25:\n                    # Close distance for attack opportunities\n                    if relative_pos > 0:\n                        return 2  # Move right toward opponent\n                    else:\n                        return 1  # Move left toward opponent\n                else:\n                    # Perfect medium range - hold position\n                    if random.random() < 0.3 and my_projectile_cooldown < 0.3:\n                        return 9  # Medium range projectile\n                    else:\n                        return 6  # Maintain guard\n        \n        # Long range hybrid tactics\n        else:\n            if my_projectile_cooldown < 0.25 and attack_window:\n                return 9  # Long range projectile pressure\n            \n            # Control spacing intelligently\n            if distance > 0.7:\n                # Close distance gradually\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            elif opponent_cornered and distance < 0.5:\n                # Press advantage against cornered opponent\n                if my_projectile_cooldown < 0.4:\n                    return 9  # Projectile pressure\n                else:\n                    if relative_pos > 0:\n                        return 2  # Close in\n                    else:\n                        return 1  # Close in\n            else:\n                return 6  # Maintain defensive readiness\n    \n    # Controlled aggression when winning\n    elif health_advantage >= winning_threshold and health_advantage < decisive_advantage:\n        # Still respect opponent attacks but more confident\n        if opponent_attacking:\n            if distance < close_range:\n                if random.random() < 0.8:\n                    return 6  # Block most attacks\n                else:\n                    # Occasional counter-attack timing\n                    return 4  # Quick counter\n            else:\n                # More mobile defense when winning\n                if relative_pos > 0:\n                    return 7  # Move with block\n                else:\n                    return 8  # Move with block\n        \n        # Increased aggression at close range\n        if distance < close_range:\n            if not opponent_blocking:\n                # Higher attack frequency when winning\n                attack_choice = random.random()\n                if attack_choice < 0.45:\n                    return 4  # Quick punch\n                elif attack_choice < 0.7:\n                    return 5  # Power kick\n                else:\n                    return",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371409,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_009",
      "generation": 0,
      "fitness": 253.19999999999231,
      "win_rate": 0.5,
      "avg_reward": 253.19999999999231,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract player status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_attack_status = state[5]\n    opponent_attack_status = state[16]\n    my_block_status = state[6]\n    my_projectile_cooldown = max(0.0, state[7])\n    opponent_projectile_cooldown = max(0.0, state[18])\n    height_difference = state[24]\n    \n    # Define strategic thresholds for patient defender\n    close_range = 0.12\n    medium_range = 0.35\n    critical_health = 0.25\n    block_priority_threshold = -0.2\n    patience_factor = 0.8\n    \n    # Emergency survival mode when critically low health\n    if my_health < critical_health:\n        if distance < close_range and opponent_attack_status > 0:\n            # Immediate blocking when opponent is attacking close\n            if relative_pos > 0:\n                return 8  # Block while moving right\n            else:\n                return 7  # Block while moving left\n        elif distance < medium_range:\n            # Create distance while blocking\n            if relative_pos > 0:\n                return 8  # Block retreat right\n            else:\n                return 7  # Block retreat left\n        else:\n            # Long range defensive projectile\n            if my_projectile_cooldown == 0:\n                return 9\n            else:\n                return 6  # Pure block\n    \n    # Patient defender core logic - prioritize blocking when disadvantaged\n    if health_advantage < block_priority_threshold:\n        # Defensive posture when losing\n        if distance < close_range:\n            # Very close - high block priority\n            if opponent_attack_status > 0:\n                return 6  # Pure block against attacks\n            elif random.random() < patience_factor:\n                return 6  # Patient blocking\n            else:\n                # Rare counter-attack opportunity\n                if random.random() < 0.3:\n                    return 4  # Quick punch\n                else:\n                    return 6  # Back to blocking\n        \n        elif distance < medium_range:\n            # Medium range defensive positioning\n            if opponent_attack_status > 0:\n                # Opponent attacking, block while positioning\n                if relative_pos > 0:\n                    return 8  # Block right\n                else:\n                    return 7  # Block left\n            else:\n                # Cautious positioning\n                if random.random() < 0.6:\n                    return 6  # Block while waiting\n                elif distance > 0.25:\n                    # Move closer carefully\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    return 6  # Block\n        \n        else:\n            # Long range defensive tactics\n            if my_projectile_cooldown == 0 and random.random() < 0.4:\n                return 9  # Defensive projectile\n            elif opponent_projectile_cooldown == 0:\n                # Opponent can shoot, prepare to block\n                return 6\n            else:\n                # Safe to move closer slowly\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Balanced to winning position - still patient but more opportunity seeking\n    elif health_advantage < 0.3:\n        if distance < close_range:\n            # Close range with slight advantage\n            if opponent_attack_status > 0:\n                # Block first, counter second\n                if random.random() < 0.7:\n                    return 6\n                else:\n                    return 4  # Counter punch\n            else:\n                # Look for openings patiently\n                if random.random() < 0.5:\n                    return 6  # Still prioritize defense\n                elif random.random() < 0.6:\n                    return 4  # Quick punch\n                else:\n                    return 5  # Stronger kick\n        \n        elif distance < medium_range:\n            # Medium range tactical positioning\n            if opponent_attack_status > 0:\n                if relative_pos > 0:\n                    return 8  # Block right\n                else:\n                    return 7  # Block left\n            else:\n                # Methodical approach\n                if random.random() < 0.4:\n                    return 6  # Patient blocking\n                elif distance > 0.25:\n                    # Close distance\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # In striking range\n                    if random.random() < 0.3:\n                        return 4\n                    else:\n                        return 6  # Back to defense\n        \n        else:\n            # Long range with slight advantage\n            if my_projectile_cooldown == 0 and random.random() < 0.5:\n                return 9\n            elif opponent_projectile_cooldown == 0:\n                return 6  # Defensive blocking\n            else:\n                # Advance position\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Winning decisively - patient aggression\n    else:\n        if distance < close_range:\n            # Close range dominance but still careful\n            if opponent_attack_status > 0:\n                # Even when winning, respect opponent attacks\n                if random.random() < 0.6:\n                    return 6  # Block first\n                else:\n                    return 4  # Counter\n            else:\n                # Controlled aggression\n                if random.random() < 0.3:\n                    return 6  # Maintain defensive discipline\n                elif random.random() < 0.5:\n                    return 4  # Punch\n                else:\n                    return 5  # Kick\n        \n        elif distance < medium_range:\n            # Medium range pressure\n            if opponent_attack_status > 0:\n                # Still block attacks even when winning\n                if relative_pos > 0:\n                    return 8\n                else:\n                    return 7\n            else:\n                # Press advantage methodically\n                if random.random() < 0.2:\n                    return 6  # Occasional defensive pause\n                elif distance > 0.2:\n                    # Move to attack range\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    # Attack opportunity\n                    if random.random() < 0.6:\n                        return 4\n                    else:\n                        return 5\n        \n        else:\n            # Long range when winning\n            if my_projectile_cooldown == 0 and random.random() < 0.7:\n                return 9  # Projectile pressure\n            elif opponent_projectile_cooldown == 0:\n                return 6  # Block projectiles\n            else:\n                # Advance for finish\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Height-based adjustments for patient defender\n    if abs(height_difference) > 0.3:\n        if height_difference > 0:\n            # Opponent below - patient high guard\n            if distance < close_range:\n                return 6  # Block low attacks\n            else:\n                return 9 if my_projectile_cooldown == 0 else 6\n        else:\n            # Opponent above - careful anti-air\n            if distance < close_range and opponent_attack_status > 0:\n                return 6\n            elif distance < medium_range:\n                return 6",
      "fighting_style": "patient_defender",
      "creation_time": 1748763419.260821,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_008",
      "generation": 2,
      "fitness": 250.759999999993,
      "win_rate": 0.5,
      "avg_reward": 250.759999999993,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_velocity_y = state[5] if len(state) > 5 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_stunned = state[9] if len(state) > 9 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_velocity_y = state[16] if len(state) > 16 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_stunned = state[20] if len(state) > 20 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define hybrid tactical ranges\n    point_blank_range = 0.06\n    ultra_close_range = 0.12\n    close_range = 0.18\n    medium_close_range = 0.28\n    medium_range = 0.42\n    far_range = 0.65\n    \n    # Calculate dynamic aggression based on multiple factors\n    base_aggression = 0.75\n    health_factor = 1.0\n    distance_factor = 1.0\n    momentum_factor = 1.0\n    \n    # Health-based aggression adjustment\n    if health_advantage > 0.4:\n        health_factor = 1.3  # Dominant position\n    elif health_advantage > 0.2:\n        health_factor = 1.15  # Winning\n    elif health_advantage > -0.1:\n        health_factor = 1.0  # Even\n    elif health_advantage > -0.3:\n        health_factor = 0.8  # Losing\n    else:\n        health_factor = 0.6  # Desperate\n    \n    # Distance-based aggression\n    if distance < close_range:\n        distance_factor = 1.2  # More aggressive up close\n    elif distance > medium_range:\n        distance_factor = 0.9  # More cautious at range\n    \n    # Momentum consideration\n    opponent_approaching = False\n    if relative_pos > 0 and opponent_velocity_x > 0.2:\n        opponent_approaching = True\n    elif relative_pos < 0 and opponent_velocity_x < -0.2:\n        opponent_approaching = True\n    \n    if opponent_approaching:\n        momentum_factor = 1.1  # Counter-aggressive\n    \n    current_aggression = min(1.0, base_aggression * health_factor * distance_factor * momentum_factor)\n    \n    # Emergency defensive protocols\n    if my_stunned > 0.5:\n        if distance < close_range and opponent_attack_status > 0.5:\n            return 6  # Block while stunned\n        elif distance > medium_range and my_projectile_cooldown < 0.3:\n            return 9  # Projectile to reset\n        else:\n            return 6  # Default block when stunned\n    \n    # Critical health situations\n    if my_health < 0.18:\n        if opponent_stunned > 0.5 and distance < close_range:\n            # Last chance offensive\n            if random.random() < 0.7:\n                return 5  # Strong attack\n            else:\n                return 4  # Quick attack\n        elif distance > far_range:\n            if my_projectile_cooldown < 0.2:\n                return 9  # Long range safety\n            else:\n                return 6  # Defensive\n        elif distance < ultra_close_range and opponent_attack_status < 0.3:\n            # Desperate close range gamble\n            return 5 if random.random() < 0.6 else 4\n        else:\n            # Survival mode\n            if opponent_attack_status > 0.6:\n                return 6  # Block incoming\n            elif distance < medium_close_range:\n                # Try to create space while blocking\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n            else:\n                return 6\n    \n    # Exploit stunned opponent\n    if opponent_stunned > 0.5:\n        if distance < medium_close_range:\n            if distance > ultra_close_range:\n                # Close the gap quickly\n                return 2 if relative_pos > 0 else 1\n            else:\n                # Maximize damage on stunned target\n                punish_choice = random.random()\n                if punish_choice < 0.7:\n                    return 5  # Heavy punish\n                elif punish_choice < 0.9:\n                    return 4  # Quick punish\n                else:\n                    return 9 if my_projectile_cooldown < 0.1 else 5\n        else:\n            # Rush in while they're helpless\n            return 2 if relative_pos > 0 else 1\n    \n    # Opponent attack responses - hybrid defensive approach\n    if opponent_attack_status > 0.6:\n        if distance < close_range:\n            # Close range defense with counter potential\n            defense_choice = random.random()\n            if my_health < opponent_health * 0.8:\n                # Prioritize blocking when behind\n                if defense_choice < 0.8:\n                    return 6\n                else:\n                    return 8 if relative_pos > 0 else 7\n            else:\n                # Mix blocks and counters when ahead\n                if defense_choice < 0.5:\n                    return 6  # Pure block\n                elif defense_choice < 0.7:\n                    return 4  # Counter punch\n                else:\n                    return 8 if relative_pos > 0 else 7  # Block and reposition\n        elif distance < medium_range:\n            # Medium range - advance with block\n            return 8 if relative_pos > 0 else 7\n        else:\n            # Far range - projectile counter or block\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9\n            else:\n                return 6\n    \n    # Range-based hybrid tactics\n    if distance < point_blank_range:\n        # Point blank - maximum pressure\n        if opponent_block_status > 0.7:\n            # Guard break mixups\n            mixup_roll = random.random()\n            if mixup_roll < 0.3:\n                return 9 if my_projectile_cooldown < 0.1 else 5",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978349,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_028",
      "generation": 1,
      "fitness": 250.15999999999153,
      "win_rate": 0.5,
      "avg_reward": 250.15999999999153,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity = state[3]\n    opponent_velocity = state[14]\n    my_attacking = state[6] > 0.5\n    opponent_attacking = state[17] > 0.5\n    my_blocking = state[7] > 0.5\n    opponent_blocking = state[18] > 0.5\n    my_projectile_cooldown = max(0.0, state[10])\n    opponent_projectile_cooldown = state[21]\n    height_diff = state[24]\n    \n    # Enhanced tactical parameters for hybrid style\n    close_range = 0.13\n    medium_range = 0.32\n    safe_range = 0.48\n    critical_health = 0.18\n    danger_health = 0.35\n    winning_threshold = 0.25\n    dominant_threshold = 0.5\n    \n    # Adaptive aggression based on game state\n    base_aggression = 0.5\n    if health_advantage > winning_threshold:\n        aggression_modifier = 0.3\n    elif health_advantage < -winning_threshold:\n        aggression_modifier = -0.4\n    else:\n        aggression_modifier = 0.0\n    \n    current_aggression = base_aggression + aggression_modifier\n    \n    # Emergency survival protocol\n    if my_health < critical_health:\n        if opponent_attacking and distance < medium_range:\n            return 6  # Block immediate threats\n        elif distance < safe_range:\n            # Defensive retreat with blocking\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n        elif my_projectile_cooldown < 0.2:\n            return 9  # Safe projectile harassment\n        else:\n            return 6  # Block and recover\n    \n    # Dominant finishing mode\n    if health_advantage > dominant_threshold and opponent_health < 0.25:\n        if distance < close_range:\n            if opponent_blocking:\n                # Mix up attacks against blocking opponent\n                if random.random() < 0.4:\n                    return 5  # Kick to break guard\n                else:\n                    # Create space then re-engage\n                    if relative_pos > 0:\n                        return 1  # Step back left\n                    else:\n                        return 2  # Step back right\n            else:\n                # Aggressive finishing sequence\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Quick punch\n                elif attack_choice < 0.8:\n                    return 5  # Power kick\n                else:\n                    return 6  # Stay ready for counter\n        elif distance < medium_range:\n            # Pressure opponent into corner\n            if relative_pos > 0:\n                return 2  # Move right to close\n            else:\n                return 1  # Move left to close\n        else:\n            # Long range pressure with projectiles\n            if my_projectile_cooldown < 0.3:\n                return 9\n            else:\n                # Close distance while cooldown recovers\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Close range hybrid tactics\n    if distance < close_range:\n        # React to opponent's defensive state\n        if opponent_blocking:\n            blocking_duration = random.random()\n            if blocking_duration < 0.3:\n                # Quick retreat to reset\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n            elif blocking_duration < 0.6:\n                # Guard break attempt with kick\n                return 5\n            else:\n                # Wait for opening\n                return 6\n        \n        # Opponent not blocking - attack opportunity assessment\n        if opponent_attacking:\n            # Counter-attack timing\n            if current_aggression > 0.6:\n                # Trade hits aggressively\n                return 4 if random.random() < 0.7 else 5\n            else:\n                # Defensive response\n                return 6\n        \n        # Clean attack opportunity\n        if not my_attacking:\n            attack_pattern = random.random()\n            if attack_pattern < current_aggression * 0.6:\n                return 4  # Fast punch\n            elif attack_pattern < current_aggression * 0.9:\n                return 5  # Stronger kick\n            else:\n                # Defensive patience\n                return 6\n        \n        # Currently attacking - follow through or retreat\n        if my_attacking:\n            if health_advantage > 0:\n                return 0  # Let attack complete\n            else:\n                # Prepare defensive retreat\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n    \n    # Medium range hybrid positioning\n    elif distance < medium_range:\n        # Threat assessment for positioning\n        immediate_threat = opponent_attacking or (opponent_projectile_cooldown < 0.2 and distance > 0.2)\n        \n        if immediate_threat:\n            threat_response = random.random()\n            if threat_response < 0.4:\n                return 6  # Block threat\n            elif threat_response < 0.7:\n                # Evasive movement with block\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                # Counter-approach\n                if relative_pos > 0:\n                    return 2  # Move toward opponent\n                else:\n                    return 1  # Move toward opponent\n        \n        # Opportunity-based positioning\n        opponent_vulnerable = opponent_projectile_cooldown > 0.4 or opponent_attacking\n        \n        if opponent_vulnerable and current_aggression > 0.4:\n            # Aggressive positioning to close distance\n            approach_style = random.random()\n            if approach_style < 0.6:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n            else:\n                # Cautious approach with guard\n                if relative_pos > 0:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block\n        \n        # Neutral positioning and projectile use\n        if my_projectile_cooldown < 0.3:\n            projectile_decision = random.random()\n            projectile_threshold = 0.5 + (current_aggression - 0.5) * 0.3\n            \n            if projectile_decision < projectile_threshold:\n                return 9\n        \n        # Movement for better positioning\n        positioning_choice = random.random()\n        if positioning_choice < 0.25:\n            return 1  # Move left\n        elif positioning_choice < 0.5:\n            return 2  # Move right\n        elif positioning_choice < 0.65:\n            return 3  # Jump for unpredictability\n        elif positioning_choice < 0.85:\n            return 6  # Guard up\n        else:\n            return 0  # Observe\n    \n    # Long range hybrid strategy\n    else:\n        # Projectile management at long range\n        if my_projectile_cooldown < 0.2:\n            projectile_aggression = 0.7 + current_aggression * 0.2\n            if random.random() < projectile_aggression:\n                return 9\n        \n        # Distance management based on strategy\n        optimal_distance = 0.25",
      "fighting_style": "evolved",
      "creation_time": 1748766291.3714108,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_014",
      "generation": 2,
      "fitness": 249.59999999999118,
      "win_rate": 0.5,
      "avg_reward": 249.59999999999118,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[2] if len(state) > 2 else 1.0))\n    my_pos_x = state[0] if len(state) > 0 else 0.5\n    my_velocity_x = state[7] if len(state) > 7 else 0.0\n    my_attack_status = state[4] if len(state) > 4 else 0.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_projectile_cooldown = max(0.0, state[6] if len(state) > 6 else 0.0)\n    \n    # Extract opponent status with bounds checking\n    opponent_health = max(0.0, min(1.0, state[13] if len(state) > 13 else 1.0))\n    opponent_pos_x = state[11] if len(state) > 11 else 0.5\n    opponent_velocity_x = state[18] if len(state) > 18 else 0.0\n    opponent_attack_status = state[15] if len(state) > 15 else 0.0\n    opponent_block_status = state[16] if len(state) > 16 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[17] if len(state) > 17 else 0.0)\n    \n    # Strategic range definitions for hybrid approach\n    touching_range = 0.08\n    close_range = 0.18\n    medium_close_range = 0.28\n    medium_range = 0.4\n    far_range = 0.55\n    \n    # Health-based strategy thresholds\n    critical_health = 0.12\n    low_health = 0.25\n    moderate_health = 0.5\n    good_health = 0.75\n    \n    # Positioning and stage control\n    stage_center = abs(my_pos_x) < 0.3\n    corner_danger = my_pos_x < -0.7 or my_pos_x > 0.7\n    opponent_cornered = opponent_pos_x < -0.7 or opponent_pos_x > 0.7\n    \n    # Opponent behavior analysis\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x < -0.15) or (relative_pos < 0 and opponent_velocity_x > 0.15)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.15) or (relative_pos < 0 and opponent_velocity_x < -0.15)\n    opponent_stationary = abs(opponent_velocity_x) < 0.1\n    \n    # Projectile status\n    projectile_ready = my_projectile_cooldown < 0.1\n    projectile_almost_ready = my_projectile_cooldown < 0.25\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.1\n    \n    # Adaptive aggression based on multiple factors\n    base_aggression = 0.65\n    health_factor = 1.0 + (health_advantage * 0.4)\n    distance_factor = 1.2 if distance < medium_range else 0.8\n    position_factor = 1.1 if stage_center else 0.9\n    current_aggression = max(0.2, min(0.95, base_aggression * health_factor * distance_factor * position_factor))\n    \n    # Critical survival mode - absolute priority\n    if my_health <= critical_health:\n        # Immediate threat response\n        if opponent_attack_status > 0.3 and distance < medium_close_range:\n            if corner_danger:\n                # Cornered and under attack - try to escape or block\n                if height_diff > -0.2 and random.random() < 0.4:\n                    return 3  # Desperate jump\n                else:\n                    return 6  # Block\n            else:\n                # Retreat while blocking\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        # Projectile harassment when safe\n        if projectile_ready and distance > medium_close_range and opponent_attack_status < 0.2:\n            return 9\n        \n        # Emergency spacing\n        if distance < close_range and not corner_danger:\n            if relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        \n        # Default defensive stance\n        return 6\n    \n    # Anti-air and aerial opponent handling\n    if height_diff < -0.3:  # Opponent jumping high\n        if distance < medium_range:\n            if projectile_ready and distance > close_range:\n                return 9  # Anti-air projectile\n            elif distance < close_range:\n                # Prepare for landing mix-up\n                if opponent_advancing:\n                    return 6  # Block potential dive attack\n                else:\n                    # Try to escape landing pressure\n                    if relative_pos > 0 and not corner_danger:\n                        return 1\n                    elif not corner_danger:\n                        return 2\n                    else:\n                        return 6\n        elif projectile_ready:\n            return 9  # Long range anti-air\n    \n    # Counter-projectile and zoning response\n    if opponent_projectile_ready and distance > medium_close_range:\n        if opponent_stationary and distance > medium_range:\n            # Likely projectile incoming\n            if projectile_ready and random.random() < 0.7:\n                return 9  # Counter-projectile\n            else:\n                # Evasive movement\n                evasion_choice = random.random()\n                if evasion_choice < 0.4:\n                    return 3  # Jump over\n                elif evasion_choice < 0.7 and not corner_danger:\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                else:\n                    return 6  # Block if cornered\n        elif distance < medium_range and opponent_attack_status < 0.2:\n            # Close enough to pressure them out of projectile\n            if relative_pos > 0:\n                return 2  # Advance right\n            else:\n                return 1  # Advance left\n    \n    # Defensive responses to opponent attacks\n    if opponent_attack_status > 0.4:\n        if distance < medium_close_range:\n            # Real threat - need defense\n            if my_health <= low_health:\n                return 6  # Priority block when low health\n            else:\n                # Try evasive defense\n                if opponent_advancing and not corner_danger:\n                    if relative_pos > 0:\n                        return 7  # Retreat left with block\n                    else:\n                        return 8  # Retreat right with block\n                else:\n                    return 6  # Standard block\n        elif distance < medium_range and projectile_ready:\n            # Counter-attack opportunity at mid range\n            return 9\n    \n    # Corner escape when cornered\n    if corner_danger and distance < medium_close_range:\n        if opponent_attack_status > 0.3:\n            # Under pressure in corner\n            escape_method = random.random()\n            if escape_method < 0.4:\n                return 3  # Jump escape",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978351,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_015",
      "generation": 2,
      "fitness": 249.45999999999066,
      "win_rate": 0.5,
      "avg_reward": 249.45999999999066,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    \n    # Extract velocities and movement data\n    my_velocity_x = state[7]\n    my_velocity_y = state[8]\n    opponent_velocity_x = state[18]\n    opponent_velocity_y = state[19]\n    \n    # Extract attack and defensive status\n    my_attack_status = state[4]\n    opponent_attack_status = state[15]\n    my_block_status = state[5]\n    opponent_block_status = state[16]\n    \n    # Projectile information\n    my_projectile_cooldown = max(0.0, state[6])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Height and positioning\n    height_diff = state[24]\n    \n    # Enhanced strategic constants\n    danger_zone = 0.08\n    close_range = 0.15\n    medium_range = 0.28\n    optimal_range = 0.42\n    max_range = 0.65\n    \n    # Health thresholds\n    critical_health = 0.18\n    low_health = 0.35\n    good_health = 0.65\n    \n    # Projectile timing\n    projectile_ready = my_projectile_cooldown < 0.1\n    projectile_almost_ready = my_projectile_cooldown < 0.25\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.12\n    \n    # Enhanced stage awareness\n    left_corner_danger = my_position < -0.7\n    right_corner_danger = my_position > 0.7\n    opponent_left_corner = opponent_position < -0.7\n    opponent_right_corner = opponent_position > 0.7\n    center_stage = abs(my_position) < 0.3\n    \n    # Movement analysis\n    opponent_rushing = abs(opponent_velocity_x) > 0.25 and (\n        (relative_pos > 0 and opponent_velocity_x < -0.2) or \n        (relative_pos < 0 and opponent_velocity_x > 0.2)\n    )\n    opponent_retreating = abs(opponent_velocity_x) > 0.15 and (\n        (relative_pos > 0 and opponent_velocity_x > 0.15) or \n        (relative_pos < 0 and opponent_velocity_x < -0.15)\n    )\n    opponent_airborne = abs(opponent_velocity_y) > 0.1 or height_diff < -0.2\n    my_airborne = abs(my_velocity_y) > 0.1\n    \n    # Adaptive aggression based on health and position\n    base_aggression = 0.5\n    if health_advantage > 0.3:\n        base_aggression = 0.7  # More aggressive when winning\n    elif health_advantage < -0.3:\n        base_aggression = 0.3  # More defensive when losing\n    \n    # Critical survival mode\n    if my_health <= critical_health:\n        # Immediate threat response\n        if opponent_attack_status > 0 and distance < medium_range:\n            if distance < close_range:\n                # Try to escape with blocking movement\n                if relative_pos > 0 and not left_corner_danger:\n                    return 7  # Block retreat left\n                elif relative_pos < 0 and not right_corner_danger:\n                    return 8  # Block retreat right\n                else:\n                    return 6  # Pure block if cornered\n            else:\n                return 6  # Block at medium range\n        \n        # Desperate escape from close quarters\n        if distance < close_range:\n            if left_corner_danger and relative_pos < 0:\n                # Cornered on left, opponent on left\n                if opponent_airborne or height_diff > 0.1:\n                    return 3  # Jump escape attempt\n                else:\n                    return 2  # Try to move past opponent\n            elif right_corner_danger and relative_pos > 0:\n                # Cornered on right, opponent on right\n                if opponent_airborne or height_diff > 0.1:\n                    return 3  # Jump escape attempt\n                else:\n                    return 1  # Try to move past opponent\n            else:\n                # Standard retreat\n                if relative_pos > 0 and not left_corner_danger:\n                    return 7  # Retreat left with block\n                elif not right_corner_danger:\n                    return 8  # Retreat right with block\n                else:\n                    return 6  # Block\n        \n        # Long-range survival tactics\n        if projectile_ready and distance > medium_range:\n            return 9  # Desperate projectile\n        \n        # Create distance when possible\n        if distance < optimal_range:\n            if relative_pos > 0 and not left_corner_danger:\n                return 1  # Move away\n            elif not right_corner_danger:\n                return 2  # Move away\n            else:\n                return 6  # Block if trapped\n    \n    # Enhanced defensive reactions\n    if opponent_attack_status > 0:\n        if distance < medium_range:\n            # Real threat detected\n            if opponent_rushing and distance < close_range:\n                # They're rushing with attack, counter-strategy\n                if my_health > low_health and projectile_ready and distance > danger_zone:\n                    return 9  # Counter-attack\n                else:\n                    # Defensive movement\n                    if relative_pos > 0 and not left_corner_danger:\n                        return 7  # Block retreat\n                    elif not right_corner_danger:\n                        return 8  # Block retreat\n                    else:\n                        return 6  # Pure block\n            else:\n                # Standard defensive response\n                if my_health <= low_health:\n                    return 6  # Prioritize blocking when low health\n                else:\n                    # Mix defense with positioning\n                    if random.random() < 0.75:\n                        return 6  # Block\n                    else:\n                        # Occasional evasion\n                        if relative_pos > 0 and not left_corner_danger:\n                            return 1\n                        elif not right_corner_danger:\n                            return 2\n                        else:\n                            return 6\n        elif distance < optimal_range and projectile_ready:\n            # Medium range counter-attack opportunity\n            if random.random() < 0.8:\n                return 9  # High probability counter\n            else:\n                return 6  # Occasional block\n    \n    # Anti-air and aerial combat\n    if opponent_airborne:\n        if distance < optimal_range:\n            if projectile_ready:\n                # Anti-air projectile timing\n                if distance > close_range:\n                    return 9  # Good anti-air position\n                else:\n                    # Too close, prepare for landing\n                    return 6  # Block potential dive attack\n            else:\n                # No projectile, positioning response\n                if distance < medium_range:\n                    # Get ready for their landing\n                    if opponent_velocity_y > 0:  # They're falling\n                        if relative_pos > 0 and not left_corner_danger:\n                            return 1  # Position for landing punish\n                        elif not right_corner_danger:\n                            return 2  # Position for landing punish\n                        else:\n                            return 6  # Block landing attack\n                    else:\n                        return 6  # Block while they're in air",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978352,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_021",
      "generation": 2,
      "fitness": 248.81999999999113,
      "win_rate": 0.5,
      "avg_reward": 248.81999999999113,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    \n    # Extract velocities and status\n    my_velocity_x = state[7]\n    opponent_velocity_x = state[18]\n    my_attack_status = state[4]\n    opponent_attack_status = state[15]\n    my_block_status = state[5]\n    opponent_block_status = state[16]\n    \n    # Projectile management\n    my_projectile_cooldown = max(0.0, state[6])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    height_diff = state[24]\n    \n    # Enhanced strategic constants for balanced approach\n    optimal_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    max_range = 0.7\n    \n    # Health thresholds for adaptive behavior\n    critical_health = 0.2\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Stage positioning\n    stage_center = 0.0\n    corner_threshold = 0.75\n    near_corner = 0.6\n    \n    # Projectile readiness states\n    projectile_ready = my_projectile_cooldown < 0.05\n    projectile_soon = my_projectile_cooldown < 0.15\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.08\n    \n    # Movement analysis\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x < -0.15) or (relative_pos < 0 and opponent_velocity_x > 0.15)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.15) or (relative_pos < 0 and opponent_velocity_x < -0.15)\n    opponent_airborne = height_diff < -0.2\n    \n    # Corner detection\n    i_am_cornered = abs(my_position) > corner_threshold\n    opponent_cornered = abs(opponent_position) > corner_threshold\n    i_near_corner = abs(my_position) > near_corner\n    \n    # Emergency survival mode\n    if my_health <= critical_health:\n        # Immediate threat response\n        if opponent_attack_status > 0 and distance < medium_range:\n            return 6  # Block critical attacks\n        \n        # Escape close quarters danger\n        if distance < close_range:\n            if not i_am_cornered:\n                # Try to escape with blocking movement\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                # Cornered - try desperate measures\n                if opponent_airborne:\n                    return 4  # Quick punch while they're vulnerable\n                elif projectile_ready:\n                    return 9  # Point blank projectile\n                else:\n                    return 6  # Block and pray\n        \n        # Desperate spacing attempt\n        if projectile_ready and distance > close_range:\n            return 9  # Try to chip damage\n        \n        # Create distance when not in immediate danger\n        if distance < medium_range and not i_am_cornered:\n            if relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        \n        # Default to blocking when all else fails\n        return 6\n    \n    # Reactive defense against opponent attacks\n    if opponent_attack_status > 0:\n        if distance < medium_range:\n            # Real threat - prioritize defense\n            if my_health <= low_health:\n                return 6  # Conservative blocking\n            else:\n                # Try mobile defense if space allows\n                if not i_near_corner:\n                    if relative_pos > 0:\n                        return 7  # Retreat left with block\n                    else:\n                        return 8  # Retreat right with block\n                else:\n                    return 6  # Standard block\n        elif distance < far_range and projectile_ready:\n            # Counter-attack opportunity at medium range\n            return 9\n    \n    # Anti-air response\n    if opponent_airborne and distance < medium_range:\n        if projectile_ready:\n            return 9  # Anti-air projectile\n        elif distance < close_range:\n            # Prepare for their landing\n            if my_health > low_health:\n                return 4  # Quick anti-air punch\n            else:\n                return 6  # Safe block\n        else:\n            # Reposition for better anti-air\n            if relative_pos > 0 and not i_near_corner:\n                return 2  # Move closer for better coverage\n            elif not i_near_corner:\n                return 1  # Move closer for better coverage\n    \n    # Opponent projectile threat management\n    if opponent_projectile_ready and distance > medium_range:\n        if projectile_ready and random.random() < 0.7:\n            return 9  # Projectile war\n        else:\n            # Evasive movement\n            if distance > far_range:\n                # Close distance to pressure them\n                if relative_pos > 0 and not i_near_corner:\n                    return 2\n                elif not i_near_corner:\n                    return 1\n            else:\n                # Mid-range evasion\n                if relative_pos > 0 and my_position > -near_corner:\n                    return 1  # Dodge left\n                elif my_position < near_corner:\n                    return 2  # Dodge right\n                else:\n                    return 6  # Block if cornered\n    \n    # Balanced offensive strategy based on range and health\n    \n    # Optimal close combat range\n    if distance <= optimal_close_range:\n        if health_advantage > 0.3:\n            # Winning decisively - aggressive mixups\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 4  # Fast punch\n            elif attack_choice < 0.7:\n                return 5  # Strong kick\n            else:\n                return 6  # Occasional defensive reset\n        elif health_advantage > -0.2:\n            # Even fight - balanced approach\n            if opponent_block_status > 0:\n                # They're blocking, try throws or repositioning\n                if random.random() < 0.5:\n                    return 5  # Kick to break guard\n                else:\n                    # Create space for mixup\n                    if relative_pos > 0 and not i_near_corner:\n                        return 1\n                    elif not i_near_corner:\n                        return 2\n                    else:\n                        return 4  # Quick punch\n            else:\n                # Open for attack\n                if random.random() < 0.6:\n                    return 4  # Reliable punch\n                else:\n                    return 5  # Power kick\n        else:\n            # Losing - defensive approach\n            if random.random() < 0.7:\n                return 6  # Mostly block\n            else:\n                return 4  # Occasional quick counter\n    \n    # Close combat range\n    elif distance <= close_range:\n        if opponent_cornered and my_health > low_health:\n            # Pressure cornered opponent\n            if opponent_block_status > 0:\n                # They're blocking, mix up timing\n                if random.random() < 0.4:\n                    return 5",
      "fighting_style": "evolved",
      "creation_time": 1748769390.9783528,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_010",
      "generation": 0,
      "fitness": 240.3199999999906,
      "win_rate": 0.5,
      "avg_reward": 240.3199999999906,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attack_cooldown = state[5]\n    my_block_status = state[6]\n    my_projectile_cooldown = state[9]\n    my_stamina = state[10] if len(state) > 10 else 1.0\n    \n    # Extract opponent information\n    opp_health = state[12] if state[12] >= 0 else 0.5\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attack_cooldown = state[16]\n    opp_block_status = state[17]\n    opp_projectile_cooldown = state[20]\n    \n    # Define aggressive strategy parameters\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    aggression_multiplier = 1.2\n    chase_threshold = 0.8\n    pressure_distance = 0.2\n    \n    # Aggressive style: Always prefer forward movement and attacks\n    base_aggression = 0.85\n    current_aggression = base_aggression * aggression_multiplier\n    \n    # Health-based aggression adjustment (still aggressive when losing)\n    if health_advantage < -0.4:\n        current_aggression = max(0.6, current_aggression * 0.8)\n    elif health_advantage > 0.3:\n        current_aggression = min(1.0, current_aggression * 1.3)\n    \n    # Critical health emergency (only time to be defensive)\n    if my_health < 0.15 and health_advantage < -0.6:\n        if distance < close_range and opp_attack_cooldown <= 0.1:\n            return 6  # Block when in immediate danger\n        elif distance > medium_range:\n            return 9  # Projectile to chip damage\n    \n    # Opponent vulnerability detection (aggressive exploitation)\n    opponent_vulnerable = (opp_attack_cooldown > 0.3 or \n                          opp_block_status < 0.1 or\n                          abs(opp_x_velocity) > 0.5)\n    \n    # Stamina management for sustained aggression\n    low_stamina = my_stamina < 0.3\n    critical_stamina = my_stamina < 0.15\n    \n    # CLOSE RANGE COMBAT (Primary aggressive zone)\n    if distance <= close_range:\n        # Maximum aggression in close range\n        if critical_stamina and opp_attack_cooldown <= 0.1:\n            return 6  # Brief defensive moment\n        \n        # Opponent is blocking - break through with variety\n        if opp_block_status > 0.5:\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 5  # Heavy kick to break blocks\n            elif attack_choice < 0.7:\n                return 4  # Quick punch combo\n            else:\n                # Reposition for better angle\n                if relative_pos > 0:\n                    return 2  # Move right for angle\n                else:\n                    return 1  # Move left for angle\n        \n        # Opponent vulnerable - unleash maximum offense\n        if opponent_vulnerable:\n            if my_attack_cooldown <= 0.1:\n                combo_choice = random.random()\n                if combo_choice < 0.5:\n                    return 4  # Fast punch\n                else:\n                    return 5  # Power kick\n        \n        # Standard close combat aggression\n        if my_attack_cooldown <= 0.2:\n            if not low_stamina:\n                attack_pattern = random.random()\n                if attack_pattern < 0.6:\n                    return 4  # Punch (primary close attack)\n                else:\n                    return 5  # Kick (power follow-up)\n            else:\n                return 4  # Conserve stamina with punches\n        \n        # Can't attack but stay aggressive with positioning\n        if abs(height_diff) > 0.3:\n            return 3  # Jump to match height\n        \n        # Maintain pressure even during cooldown\n        if relative_pos > 0.1:\n            return 2  # Stay close, move right\n        elif relative_pos < -0.1:\n            return 1  # Stay close, move left\n        else:\n            return 4  # Attempt attack\n    \n    # MEDIUM RANGE COMBAT (Aggressive positioning)\n    elif distance <= medium_range:\n        # Rush in for close combat (core aggressive strategy)\n        rush_probability = current_aggression * 0.9\n        \n        if random.random() < rush_probability:\n            # Determine best approach angle\n            if abs(height_diff) > 0.4:\n                return 3  # Jump to close height gap\n            \n            # Direct aggressive approach\n            if relative_pos > 0.05:\n                if opp_block_status > 0.3:\n                    return 8  # Move right with block (cautious aggression)\n                else:\n                    return 2  # Pure aggressive advance right\n            elif relative_pos < -0.05:\n                if opp_block_status > 0.3:\n                    return 7  # Move left with block (cautious aggression)\n                else:\n                    return 1  # Pure aggressive advance left\n            else:\n                # Direct frontal approach\n                if my_attack_cooldown <= 0.3:\n                    return 4  # Punch while advancing\n                else:\n                    return 2 if random.random() < 0.5 else 1\n        \n        # Projectile to force opponent reaction (aggressive zoning)\n        if my_projectile_cooldown <= 0.1 and not low_stamina:\n            if opp_x_velocity < 0.2:  # Opponent not moving much\n                return 9  # Force them to react\n        \n        # Jump-in attack approach\n        if abs(height_diff) < 0.2 and my_attack_cooldown <= 0.2:\n            jump_attack = random.random()\n            if jump_attack < 0.3:\n                return 3  # Jump toward opponent\n        \n        # Default: close the distance aggressively\n        if relative_pos > 0:\n            return 2  # Move right\n        else:\n            return 1  # Move left\n    \n    # FAR RANGE COMBAT (Aggressive approach/projectile game)\n    elif distance <= far_range:\n        # Projectile pressure while advancing\n        if my_projectile_cooldown <= 0.1:\n            projectile_aggression = random.random()\n            if projectile_aggression < current_aggression:\n                return 9  # Projectile attack\n        \n        # Aggressive approach - close distance quickly\n        approach_roll = random.random()\n        if approach_roll < current_aggression * 0.8:\n            if abs(height_diff) > 0.5:\n                return 3  # Jump to close gap\n            \n            # Sprint toward opponent\n            if relative_pos > 0.1:\n                return 2  # Move right aggressively\n            elif relative_pos < -0.1:\n                return 1  # Move left aggressively",
      "fighting_style": "aggressive",
      "creation_time": 1748763419.260823,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_019",
      "generation": 1,
      "fitness": 238.45999999999373,
      "win_rate": 0.0,
      "avg_reward": 238.45999999999373,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, min(1.0, state[2])) if len(state) > 2 else 0.5\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[1] if len(state) > 1 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_stamina = state[5] if len(state) > 5 else 1.0\n    my_attacking = state[7] if len(state) > 7 else 0.0\n    my_blocking = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[9] if len(state) > 9 else 0.0\n    my_recovery_frames = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[13])) if len(state) > 13 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[12] if len(state) > 12 else 0.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_stamina = state[16] if len(state) > 16 else 1.0\n    opp_attacking = state[18] if len(state) > 18 else 0.0\n    opp_blocking = state[19] if len(state) > 19 else 0.0\n    opp_projectile_cooldown = state[20] if len(state) > 20 else 0.0\n    opp_recovery_frames = state[21] if len(state) > 21 else 0.0\n    \n    # Hybrid fighter tactical parameters\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.25\n    winning_health_advantage = 0.25\n    losing_health_advantage = -0.25\n    corner_threshold = 0.15\n    aggressive_distance = 0.35\n    defensive_distance = 0.4\n    \n    # Calculate dynamic aggression level based on multiple factors\n    base_aggression = 0.5\n    health_aggression_bonus = health_advantage * 0.3\n    stamina_aggression_bonus = (my_stamina - 0.5) * 0.2\n    opponent_vulnerable_bonus = 0.0\n    \n    if opp_recovery_frames > 0.3 or opp_attacking > 0.5:\n        opponent_vulnerable_bonus = 0.3\n    \n    current_aggression = base_aggression + health_aggression_bonus + stamina_aggression_bonus + opponent_vulnerable_bonus\n    current_aggression = max(0.1, min(0.9, current_aggression))\n    \n    # Stage positioning analysis\n    my_near_left_wall = my_x_pos < corner_threshold\n    my_near_right_wall = my_x_pos > (1.0 - corner_threshold)\n    opp_near_left_wall = opp_x_pos < corner_threshold\n    opp_near_right_wall = opp_x_pos > (1.0 - corner_threshold)\n    i_am_cornered = my_near_left_wall or my_near_right_wall\n    opponent_cornered = opp_near_left_wall or opp_near_right_wall\n    \n    # Critical health emergency protocols\n    if my_health < critical_health and health_advantage < -0.3:\n        if distance < close_range and opp_attacking > 0.4:\n            return 6  # Emergency block\n        elif distance < medium_range:\n            # Desperate escape with blocking movement\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif my_projectile_cooldown < 0.2:\n            return 9  # Desperate projectile\n        else:\n            return 6  # Default to blocking\n    \n    # Opponent critical health - aggressive finishing\n    if opp_health < critical_health and health_advantage > 0.2:\n        if distance < close_range:\n            # Finish with strong attacks\n            if opp_blocking > 0.5:\n                return 5  # Kick to break guard\n            else:\n                finishing_attack = random.random()\n                if finishing_attack < 0.7:\n                    return 5  # Strong kick\n                else:\n                    return 4  # Fast punch\n        elif distance < medium_range:\n            # Aggressive approach for finish\n            if relative_pos > 0:\n                return 2  # Move right aggressively\n            else:\n                return 1  # Move left aggressively\n        elif my_projectile_cooldown < 0.1:\n            return 9  # Projectile to finish\n    \n    # Corner escape when I'm trapped\n    if i_am_cornered and distance < medium_range:\n        if opp_attacking > 0.4:\n            # Under pressure in corner\n            escape_method = random.random()\n            if escape_method < 0.4:\n                return 6  # Block first\n            elif escape_method < 0.7:\n                return 3  # Jump out of corner\n            else:\n                # Move out with blocking\n                if my_near_left_wall:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n        else:\n            # Not under immediate pressure, create space\n            if my_near_left_wall:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n    \n    # Corner pressure when opponent is trapped\n    if opponent_cornered and distance < aggressive_distance:\n        if distance < close_range:\n            # Maximum corner pressure\n            if opp_blocking > 0.6:\n                # Break guard with varied attacks\n                guard_break_choice = random.random()\n                if guard_break_choice < 0.4:\n                    return 5  # Heavy kick\n                elif guard_break_choice < 0.7:\n                    return 4  # Fast punch\n                else:\n                    return 3  # Jump attack mixup\n            else:\n                # Opponent not blocking - attack aggressively\n                corner_attack_choice = random.random()\n                if corner_attack_choice < 0.6:\n                    return 5  # Strong kick\n                else:\n                    return 4  # Quick punch\n        elif distance < medium_range:\n            # Maintain corner pressure\n            pressure_choice = random.random()\n            if pressure_choice < 0.6:\n                # Close distance for pressure\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            elif pressure_choice < 0.8 and my_projectile_cooldown < 0.1:\n                return 9  # Projectile pressure\n            else:\n                return 3",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371412,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_016",
      "generation": 4,
      "fitness": 238.03999999999692,
      "win_rate": 0.0,
      "avg_reward": 238.03999999999692,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with defensive bounds checking\n    my_health = max(0.0, min(1.0, state[1]))\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = max(0.0, state[8])\n    my_attack_cooldown = max(0.0, state[9])\n    my_block_cooldown = max(0.0, state[10])\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[12]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = max(0.0, state[19])\n    opp_attack_cooldown = max(0.0, state[20])\n    opp_block_cooldown = max(0.0, state[21])\n    \n    # Enhanced hybrid tactical ranges\n    melee_range = 0.08\n    optimal_strike = 0.14\n    close_combat = 0.22\n    transition_zone = 0.32\n    medium_range = 0.45\n    long_range = 0.60\n    max_effective = 0.80\n    \n    # Advanced aggression system with multiple factors\n    base_aggression = 0.65\n    health_aggression = health_advantage * 0.35\n    momentum_factor = min(0.15, abs(my_x_velocity) * 0.3)\n    distance_pressure = max(0.0, (0.35 - distance) * 0.4)\n    current_aggression = max(0.25, min(0.90, base_aggression + health_aggression + momentum_factor + distance_pressure))\n    \n    # Defensive priority system\n    base_defense = 0.45\n    health_defense = max(0.0, -health_advantage * 0.4)\n    critical_defense = 0.3 if my_health < 0.25 else 0.0\n    defense_priority = min(0.85, base_defense + health_defense + critical_defense)\n    \n    # Tactical state assessment\n    my_ready_attack = my_attack_cooldown < 0.12\n    my_ready_block = my_block_cooldown < 0.08\n    my_ready_projectile = my_projectile_cooldown < 0.15\n    opp_vulnerable = opp_stunned or (opp_attack_cooldown > 0.3 and not opp_blocking)\n    opp_dangerous = opp_attacking or (my_health < opp_health and distance < close_combat)\n    \n    # Position and movement analysis\n    wall_left = my_x_pos < 0.18\n    wall_right = my_x_pos > 0.82\n    near_wall = wall_left or wall_right\n    opp_cornered = opp_x_pos < 0.12 or opp_x_pos > 0.88\n    \n    # Velocity and momentum analysis\n    closing_speed = 0.0\n    if relative_pos > 0:\n        closing_speed = my_x_velocity - opp_x_velocity\n    else:\n        closing_speed = opp_x_velocity - my_x_velocity\n    \n    opponent_approaching = closing_speed > 0.05\n    opponent_retreating = closing_speed < -0.05\n    \n    # Pattern recognition variables\n    randomness = random.random()\n    tactical_choice = random.random()\n    combo_selector = random.random()\n    \n    # Critical situation handling - highest priority\n    if my_stunned:\n        if distance < close_combat and opp_attacking:\n            return 6 if my_ready_block else 0\n        elif distance < optimal_strike and opponent_approaching:\n            # Escape stun with defensive movement\n            if near_wall:\n                return 3 if randomness < 0.6 else 6\n            else:\n                return 7 if relative_pos > 0 else 8\n        elif distance > medium_range and my_ready_projectile:\n            return 9\n        else:\n            return 6 if my_ready_block else 0\n    \n    # Emergency health management\n    if my_health < 0.18:\n        if health_advantage < -0.6:\n            # Desperate comeback attempt\n            if distance > long_range and my_ready_projectile:\n                return 9\n            elif distance < optimal_strike and opp_vulnerable and my_ready_attack:\n                # All-in desperation\n                return 5 if tactical_choice < 0.65 else 4\n            elif distance < close_combat and opp_dangerous:\n                # Survival mode\n                if my_ready_block:\n                    return 6\n                elif near_wall:\n                    return 3\n                else:\n                    return 1 if relative_pos > 0 else 2\n            else:\n                # Cautious zoning\n                if distance < transition_zone:\n                    return 7 if relative_pos > 0 else 8\n                else:\n                    return 9 if my_ready_projectile else 6\n        else:\n            # Low health but competitive\n            if distance < melee_range and opp_attacking:\n                return 6 if my_ready_block else 3\n            elif distance > medium_range:\n                return 9 if my_ready_projectile else (2 if relative_pos > 0 else 1)\n    \n    # Exploit stunned opponent maximally\n    if opp_stunned:\n        if distance > optimal_strike:\n            # Rush in for maximum punish\n            return 2 if relative_pos > 0 else 1\n        elif distance < melee_range and my_ready_attack:\n            # Devastating close-range combo\n            if combo_selector < 0.4:\n                return 5  # Heavy damage\n            elif combo_selector < 0.75:\n                return 4  # Quick combo\n            else:\n                return 9 if my_ready_projectile else 5\n        elif my_ready_attack:\n            # Optimal range punish\n            return 5 if current_aggression > 0.7 else 4\n        else:\n            # Position for punish\n            if distance > melee_range:\n                return 2 if relative_pos > 0 else 1\n            else:\n                return 0\n    \n    # Advanced defensive responses\n    if opp_attacking:\n        if distance < melee_range:\n            # Point blank defense\n            if my_ready_block:\n                return 6\n            else:\n                return 3 if randomness < 0.7 else 0\n        elif distance < optimal_strike:\n            # Optimal counter-attack range\n            if my_ready_block and defense_priority > 0.6:\n                # Defensive block with positioning\n                if tactical_choice < 0.5:\n                    return 8 if relative_pos > 0 else 7\n                else:\n                    return",
      "fighting_style": "evolved",
      "creation_time": 1748775503.9042728,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_007",
      "generation": 0,
      "fitness": 237.43999999999104,
      "win_rate": 0.0,
      "avg_reward": 237.43999999999104,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Validate and extract key state information\n    if len(state) < 26:\n        return 0  # Safety fallback\n    \n    # Core strategic metrics\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # My fighter status\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Opponent status\n    opp_health = state[12] if len(state) > 12 else 1.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attack_status = state[16] if len(state) > 16 else 0.0\n    opp_block_status = state[17] if len(state) > 17 else 0.0\n    \n    # Hit and run tactical ranges\n    close_range = 0.12\n    strike_range = 0.18\n    medium_range = 0.35\n    far_range = 0.5\n    \n    # Hit and run aggression parameters\n    base_aggression = 0.4\n    winning_bonus = max(0.0, health_advantage * 0.3)\n    losing_penalty = max(0.0, -health_advantage * 0.4)\n    current_aggression = base_aggression + winning_bonus - losing_penalty\n    \n    # Emergency defensive behavior when health is critical\n    if my_health < 0.25 and health_advantage < -0.4:\n        if distance < 0.2:\n            # Too close when critical - block and retreat\n            if relative_pos > 0:\n                return 7  # Block and move left\n            else:\n                return 8  # Block and move right\n        elif distance < 0.4:\n            # Create distance for projectiles\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n        else:\n            # Safe projectile distance\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile\n            else:\n                return 6  # Block while waiting\n    \n    # Opponent is attacking - hit and run counter tactics\n    if opp_attack_status > 0.1:\n        if distance < 0.15:\n            # Very close to attacking opponent - immediate evasion\n            if random.random() < 0.3:\n                return 6  # Quick block\n            elif relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n        elif distance < 0.25:\n            # Medium close - prepare counter or retreat\n            if health_advantage > 0.2 and random.random() < 0.4:\n                # Counter attack opportunity\n                return 4 if random.random() < 0.7 else 5\n            else:\n                # Retreat and prepare projectile\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n        else:\n            # Safe distance - projectile harassment\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                return 0  # Wait for cooldown\n    \n    # Opponent is blocking - hit and run positioning\n    if opp_block_status > 0.1:\n        if distance < 0.2:\n            # Too close to blocker - create space\n            if relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        elif distance < 0.4:\n            # Good range for movement and positioning\n            if abs(my_velocity_x) < 0.1:\n                # Static - start movement\n                if random.random() < 0.5:\n                    return 1\n                else:\n                    return 2\n            else:\n                # Moving - prepare projectile\n                if my_projectile_cooldown < 0.1:\n                    return 9\n                else:\n                    return 0\n        else:\n            # Far range - projectile pressure\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                # Close distance while waiting\n                if relative_pos > 0:\n                    return 2  # Move right toward\n                else:\n                    return 1  # Move left toward\n    \n    # Core hit and run range-based tactics\n    if distance < close_range:\n        # Danger zone - immediate hit and run\n        strike_chance = current_aggression * 0.6\n        \n        if health_advantage > 0.3:\n            # Winning - more aggressive strikes\n            strike_chance += 0.2\n        elif health_advantage < -0.2:\n            # Losing - prioritize escape\n            strike_chance -= 0.3\n        \n        if random.random() < strike_chance:\n            # Quick strike decision\n            if opp_health < 0.3:\n                # Opponent low health - stronger attack\n                return 5  # Kick for finish\n            else:\n                # Standard quick punch\n                return 4\n        else:\n            # Retreat decision\n            retreat_urgency = 0.7 + max(0.0, -health_advantage * 0.3)\n            if random.random() < retreat_urgency:\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n            else:\n                return 6  # Block while planning\n    \n    elif distance < strike_range:\n        # Optimal hit and run engagement range\n        engage_chance = current_aggression * 0.8\n        \n        # Adjust for opponent movement\n        if abs(opp_velocity_x) > 0.1:\n            # Opponent moving - harder to hit\n            engage_chance -= 0.2\n        \n        # Height advantage consideration\n        if abs(height_diff) > 0.1:\n            if height_diff > 0:\n                # I'm higher - slight advantage\n                engage_chance += 0.1\n            else:\n                # I'm lower - slight disadvantage\n                engage_chance -= 0.1\n        \n        if random.random() < engage_chance:\n            # Engage with quick strike\n            if distance < 0.15:\n                # Close enough for melee\n                if random.random() < 0.75:\n                    return 4  # Quick punch\n                else:\n                    return 5  # Occasional kick\n            else:\n                # Move in for strike\n                if relative_pos > 0:\n                    return 2  # Move right toward\n                else:\n                    return 1  # Move left toward\n        else:\n            # Don't engage - maintain distance\n            if my_projectile_cooldown < 0.1 and distance > 0.2:\n                return 9  # Projectile\n            else:\n                # Lateral movement\n                if abs(my_velocity_x) < 0.05:\n                    if random.random() < 0.5:\n                        return 1\n                    else:\n                        return",
      "fighting_style": "hit_and_run",
      "creation_time": 1748763419.260824,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_023",
      "generation": 1,
      "fitness": 236.43999999999104,
      "win_rate": 0.5,
      "avg_reward": 236.43999999999104,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    \n    # Extract attack and movement status\n    my_attack_status = state[4] if len(state) > 4 else 0\n    opponent_attack_status = state[15] if len(state) > 15 else 0\n    my_block_status = state[5] if len(state) > 5 else 0\n    opponent_block_status = state[16] if len(state) > 16 else 0\n    \n    # Extract projectile cooldowns\n    my_projectile_cooldown = max(0.0, state[6] if len(state) > 6 else 0)\n    opponent_projectile_cooldown = max(0.0, state[17] if len(state) > 17 else 0)\n    \n    # Extract velocities for prediction\n    my_velocity_x = state[7] if len(state) > 7 else 0\n    opponent_velocity_x = state[18] if len(state) > 18 else 0\n    \n    # Height difference for anti-air\n    height_diff = state[24] if len(state) > 24 else 0\n    \n    # Define hybrid tactical ranges\n    danger_zone = 0.08\n    close_range = 0.15\n    medium_range = 0.30\n    projectile_range = 0.45\n    max_range = 0.65\n    \n    # Health-based thresholds\n    critical_health = 0.15\n    low_health = 0.35\n    good_health = 0.65\n    \n    # Cooldown and status checks\n    projectile_ready = my_projectile_cooldown < 0.08\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.08\n    \n    # Position analysis for corner awareness\n    stage_left = -0.8\n    stage_right = 0.8\n    near_left_wall = my_position < stage_left\n    near_right_wall = my_position > stage_right\n    opponent_cornered = opponent_position < stage_left or opponent_position > stage_right\n    \n    # Frame advantage calculation\n    frame_advantage = 0\n    if my_attack_status > 0 and opponent_attack_status == 0:\n        frame_advantage = 1\n    elif opponent_attack_status > 0 and my_attack_status == 0:\n        frame_advantage = -1\n    \n    # Movement prediction\n    opponent_approaching = False\n    if relative_pos > 0 and opponent_velocity_x > 0.1:\n        opponent_approaching = True\n    elif relative_pos < 0 and opponent_velocity_x < -0.1:\n        opponent_approaching = True\n    \n    # Critical health emergency protocol\n    if my_health <= critical_health:\n        if distance < danger_zone and opponent_attack_status > 0:\n            return 6  # Emergency block\n        \n        if distance < close_range:\n            # Escape with blocking movement\n            if relative_pos > 0 and not near_left_wall:\n                return 7  # Block left retreat\n            elif relative_pos < 0 and not near_right_wall:\n                return 8  # Block right retreat\n            else:\n                return 6  # Block in place if cornered\n        \n        # Desperate projectile zoning\n        if projectile_ready and distance > close_range:\n            return 9\n        \n        # Create distance when possible\n        if distance < medium_range:\n            if relative_pos > 0 and not near_left_wall:\n                return 1  # Move away left\n            elif not near_right_wall:\n                return 2  # Move away right\n        \n        return 6  # Default block when desperate\n    \n    # Opponent attack response system\n    if opponent_attack_status > 0:\n        if distance < medium_range:\n            # Incoming attack likely to connect\n            if frame_advantage >= 0 and distance < close_range:\n                # Counter-attack opportunity\n                counter_choice = random.random()\n                if counter_choice < 0.4:\n                    return 4  # Quick counter punch\n                elif counter_choice < 0.65:\n                    return 5  # Counter kick\n                else:\n                    return 6  # Safe block\n            else:\n                # Defensive response\n                if my_health <= low_health:\n                    return 6  # Block when low health\n                else:\n                    # Evasive blocking\n                    if relative_pos > 0 and not near_left_wall:\n                        return 7  # Block left\n                    elif not near_right_wall:\n                        return 8  # Block right\n                    else:\n                        return 6  # Block\n        else:\n            # Far enough to counter with projectile\n            if projectile_ready and random.random() < 0.6:\n                return 9\n    \n    # Anti-air system for jumping opponents\n    if height_diff < -0.2:\n        if distance < medium_range:\n            if projectile_ready:\n                return 9  # Projectile anti-air\n            elif distance < close_range:\n                return 4  # Quick anti-air punch\n            else:\n                # Reposition for better anti-air\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n    \n    # Hybrid combat strategy by range\n    if distance <= danger_zone:\n        # Extreme close range - high risk/reward\n        if opponent_block_status > 0:\n            # Opponent blocking, mix up or retreat\n            mix_choice = random.random()\n            if mix_choice < 0.3:\n                return 5  # Strong kick to break guard\n            elif mix_choice < 0.5:\n                # Quick retreat\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n            else:\n                return 4  # Quick punch\n        else:\n            # Opponent not blocking, aggressive options\n            if health_advantage > 0 or my_health > good_health:\n                aggro_choice = random.random()\n                if aggro_choice < 0.45:\n                    return 4  # Fast punch\n                elif aggro_choice < 0.75:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Block for safety\n            else:\n                # Health disadvantage, safer approach\n                safe_choice = random.random()\n                if safe_choice < 0.4:\n                    return 4  # Quick punch\n                else:\n                    return 6  # Block\n    \n    elif distance <= close_range:\n        # Close range - primary engagement zone\n        if opponent_approaching and frame_advantage >= 0:\n            # Counter approaching opponent\n            return 5 if random.random() < 0.6 else 4\n        \n        if health_advantage > 0.2:\n            # Winning, maintain pressure\n            if opponent_block_status > 0:\n                pressure_choice = random.random()\n                if pressure_choice < 0.4:\n                    return 5  # Strong attack vs block\n                elif pressure_choice < 0.6:\n                    return 4  # Quick attack\n                else:\n                    # Reposition for better angle\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n            else:\n                # Opponent not blocking, attack\n                attack_choice",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371414,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_elite_001",
      "generation": 3,
      "fitness": 236.19013333333683,
      "win_rate": 0.16666666666666666,
      "avg_reward": 307.31333333333737,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with defensive bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[0] if len(state) > 0 else 0.5\n    my_pos_y = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.5 if len(state) > 5 else False\n    my_blocking = state[6] > 0.5 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8] if len(state) > 8 else 0.0)\n    my_attack_cooldown = max(0.0, state[9] if len(state) > 9 else 0.0)\n    my_block_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    # Extract opponent status with defensive bounds checking  \n    opp_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opp_pos_x = state[11] if len(state) > 11 else 0.5\n    opp_pos_y = state[13] if len(state) > 13 else 0.5\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.5 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.5 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19] if len(state) > 19 else 0.0)\n    opp_attack_cooldown = max(0.0, state[20] if len(state) > 20 else 0.0)\n    opp_block_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Define hybrid fighter tactical ranges\n    point_blank_range = 0.06\n    very_close_range = 0.12\n    close_range = 0.18\n    medium_close_range = 0.25\n    medium_range = 0.35\n    medium_far_range = 0.45\n    far_range = 0.6\n    \n    # Hybrid fighting parameters - balanced approach\n    base_aggression = 0.75\n    defensive_threshold = 0.6\n    pressure_threshold = 0.8\n    zoning_threshold = 0.4\n    \n    # Calculate dynamic fighting style based on game state\n    health_ratio = my_health / max(opp_health, 0.1)\n    momentum_factor = health_advantage * 0.5\n    \n    # Determine current tactical mode\n    if health_advantage > 0.4:\n        tactical_mode = \"dominant\"\n        aggression_level = 0.9\n    elif health_advantage > 0.1:\n        tactical_mode = \"winning\"\n        aggression_level = 0.8\n    elif health_advantage > -0.1:\n        tactical_mode = \"even\"\n        aggression_level = 0.75\n    elif health_advantage > -0.4:\n        tactical_mode = \"losing\"\n        aggression_level = 0.6\n    else:\n        tactical_mode = \"desperate\"\n        aggression_level = 0.4\n    \n    # Emergency priority situations\n    if my_stunned and distance < close_range:\n        if opp_attacking:\n            return 6  # Block while stunned\n        elif my_block_cooldown < 0.1:\n            return 6  # Stay defensive\n        else:\n            # Try to create space while stunned\n            if distance < very_close_range:\n                return 1 if relative_pos > 0 else 2\n            else:\n                return 6\n    \n    # Critical health management\n    if my_health < 0.2:\n        if tactical_mode == \"desperate\":\n            if distance > medium_range:\n                # Desperate zoning\n                if my_projectile_cooldown < 0.2:\n                    return 9\n                else:\n                    return 6  # Block and wait\n            elif distance < very_close_range and not opp_attacking:\n                # All-in desperation attack\n                if my_attack_cooldown < 0.05:\n                    return 5 if random.random() < 0.7 else 4\n                else:\n                    return 6\n            else:\n                # Defensive positioning\n                return 6 if my_block_cooldown < 0.2 else 0\n    \n    # Capitalize on opponent vulnerabilities\n    if opp_stunned:\n        if distance < medium_range:\n            if distance > close_range:\n                # Rush in for punish\n                return 2 if relative_pos > 0 else 1\n            elif my_attack_cooldown < 0.1:\n                # Optimal punish combo\n                punish_choice = random.random()\n                if punish_choice < 0.6:\n                    return 5  # Heavy punish\n                elif punish_choice < 0.85:\n                    return 4  # Quick punish\n                else:\n                    return 9 if my_projectile_cooldown < 0.1 else 5\n            else:\n                # Position for punish\n                if distance > very_close_range:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Wait for attack cooldown\n        else:\n            # Close distance quickly\n            return 2 if relative_pos > 0 else 1\n    \n    # Opponent attack response - hybrid defensive tactics\n    if opp_attacking:\n        if distance < close_range:\n            # Close range defense with positioning\n            if my_block_cooldown < 0.1:\n                if tactical_mode in [\"losing\", \"desperate\"]:\n                    return 6  # Pure defense when behind\n                elif distance < very_close_range:\n                    return 6  # Block at point blank\n                else:\n                    # Block with positioning for counter\n                    return 8 if relative_pos > 0 else 7\n            else:\n                # Evasive movement when can't block\n                evasion_choice = random.random()\n                if evasion_choice < 0.4:\n                    return 1 if relative_pos > 0 else 2  # Lateral movement\n                elif evasion_choice < 0.7:\n                    return 3  # Jump evasion\n                else:\n                    return 0  # Stay and brace\n        elif distance < medium_range:\n            # Medium range - maintain spacing or advance with block\n            if tactical_mode in [\"winning\", \"dominant\"]:\n                return 8",
      "fighting_style": "evolved",
      "creation_time": 1748772554.503263,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_elite_002",
      "generation": 1,
      "fitness": 226.92479999999827,
      "win_rate": 0.5,
      "avg_reward": 281.45999999999634,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = state[8]\n    my_attack_cooldown = state[9]\n    my_block_cooldown = state[10]\n    \n    # Extract opponent information\n    opp_health = state[12] if state[12] >= 0 else 0.5\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = state[19]\n    opp_attack_cooldown = state[20]\n    opp_block_cooldown = state[21]\n    \n    # Define strategic constants for pressure fighter\n    close_range = 0.12\n    medium_range = 0.25\n    far_range = 0.4\n    corner_distance = 0.1\n    aggression_base = 0.8\n    retreat_threshold = -0.4\n    \n    # Calculate dynamic aggression based on health and position\n    aggression_modifier = 1.0\n    if health_advantage > 0.2:\n        aggression_modifier = 1.3  # More aggressive when winning\n    elif health_advantage < -0.2:\n        aggression_modifier = 0.6  # Less aggressive when losing\n    \n    current_aggression = aggression_base * aggression_modifier\n    \n    # Emergency defensive situations\n    if my_stunned:\n        return 6  # Block if stunned\n    \n    if my_health < 0.2 and health_advantage < -0.3:\n        # Desperate situation - try to survive\n        if distance > 0.3:\n            return 9 if my_projectile_cooldown < 0.1 else 6\n        else:\n            return 6  # Block and hope\n    \n    # Opponent is attacking - defensive response\n    if opp_attacking and distance < 0.2:\n        if my_block_cooldown < 0.1:\n            # Can block - decide based on position\n            if distance < 0.08:\n                return 6  # Pure block at very close range\n            else:\n                # Block while positioning\n                if relative_pos > 0:\n                    return 8  # Block and move right\n                else:\n                    return 7  # Block and move left\n        else:\n            # Can't block - try to escape\n            if relative_pos > 0:\n                return 2  # Move right away\n            else:\n                return 1  # Move left away\n    \n    # Opponent is stunned - capitalize immediately\n    if opp_stunned and distance < 0.3:\n        if distance < close_range:\n            # Close enough for melee\n            if my_attack_cooldown < 0.1:\n                return 5 if random.random() < 0.7 else 4  # Prefer kicks when stunned\n            else:\n                # Move closer while they're stunned\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        else:\n            # Move in for the kill\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n    \n    # Core pressure fighter strategy based on range\n    if distance < close_range:\n        # Very close range - maximum pressure\n        if my_attack_cooldown < 0.1:\n            # Can attack\n            if opp_blocking:\n                # Opponent blocking - mix up timing and try to break guard\n                if random.random() < 0.4:\n                    # Sometimes wait/reposition against blockers\n                    if relative_pos > 0:\n                        return 2  # Slight repositioning\n                    else:\n                        return 1\n                else:\n                    # Keep pressure with varied attacks\n                    return 5 if random.random() < 0.6 else 4\n            else:\n                # Opponent not blocking - attack aggressively\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Quick punch\n                elif attack_choice < 0.8:\n                    return 5  # Strong kick\n                else:\n                    # Occasional projectile at close range for surprise\n                    return 9 if my_projectile_cooldown < 0.1 else 4\n        else:\n            # Attack on cooldown - maintain pressure through positioning\n            if abs(relative_pos) > 0.5:\n                # Opponent trying to escape - chase\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n            else:\n                # Stay close and ready\n                if random.random() < 0.3:\n                    return 6  # Occasional block to mix up rhythm\n                else:\n                    return 0  # Stay ready for next attack\n    \n    elif distance < medium_range:\n        # Medium range - close the gap aggressively\n        approach_modifier = 1.0\n        \n        # More aggressive approach if opponent is weakened\n        if health_advantage > 0.1:\n            approach_modifier = 1.2\n        \n        # Consider opponent's movement\n        if abs(opp_x_velocity) > 0.1:\n            # Opponent is moving - predict and intercept\n            if opp_x_velocity > 0:\n                # Opponent moving right\n                if relative_pos > 0:\n                    return 2  # Chase\n                else:\n                    return 1  # Cut off\n            else:\n                # Opponent moving left\n                if relative_pos < 0:\n                    return 1  # Chase\n                else:\n                    return 2  # Cut off\n        \n        # Standard approach based on position\n        if random.random() < current_aggression:\n            # Aggressive approach\n            if relative_pos > 0.1:\n                return 2  # Move right toward opponent\n            elif relative_pos < -0.1:\n                return 1  # Move left toward opponent\n            else:\n                # Very close to optimal position - prepare for engagement\n                if my_projectile_cooldown < 0.1 and random.random() < 0.3:\n                    return 9  # Surprise projectile\n                else:\n                    return 0  # Wait for perfect moment\n        else:\n            # Cautious approach with blocking\n            if relative_pos > 0:\n                return 8  # Move right while blocking\n            else:\n                return 7  # Move left while blocking\n    \n    elif distance < far_range:\n        # Far range - decide between closing distance or projectile pressure\n        \n        # Check if opponent is also at range and likely to projectile\n        if opp_projectile_cooldown < 0.1 and distance > 0.3:\n            # Opponent might projectile - either rush or counter-projectile\n            if random.random() < 0.6:\n                # Rush approach - pressure fighter style\n                if relative_pos > 0:\n                    return 2",
      "fighting_style": "pressure_fighter",
      "creation_time": 1748766291.3714151,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_017",
      "generation": 2,
      "fitness": 226.3999999999907,
      "win_rate": 0.0,
      "avg_reward": 226.3999999999907,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    opponent_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Define enhanced tactical ranges\n    danger_range = 0.05\n    ultra_close_range = 0.10\n    close_range = 0.18\n    medium_range = 0.30\n    ideal_range = 0.42\n    far_range = 0.60\n    max_range = 0.85\n    \n    # Hybrid fighting parameters - evolved from parents\n    base_aggression = 0.68\n    zone_preference = 0.72\n    counter_timing = 0.20\n    defensive_threshold = 0.65\n    \n    # Advanced health-based adaptation\n    health_ratio = my_health / max(0.1, opponent_health)\n    critical_health = my_health < 0.12\n    low_health = my_health < 0.28\n    winning_health = health_advantage > 0.35\n    losing_health = health_advantage < -0.35\n    \n    # Dynamic aggression calculation\n    if winning_health:\n        current_aggression = min(0.9, base_aggression + 0.22)\n        zone_priority = 0.4\n    elif losing_health:\n        current_aggression = max(0.35, base_aggression - 0.33)\n        zone_priority = 0.85\n    else:\n        current_aggression = base_aggression\n        zone_priority = zone_preference\n    \n    # Projectile management\n    projectile_ready = my_projectile_cooldown < 0.05\n    projectile_soon = my_projectile_cooldown < 0.15\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.08\n    \n    # Enhanced opponent behavior analysis\n    opponent_approaching = (relative_pos > 0 and opponent_velocity_x < -0.15) or (relative_pos < 0 and opponent_velocity_x > 0.15)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.15) or (relative_pos < 0 and opponent_velocity_x < -0.15)\n    opponent_aggressive = opponent_attack_status > 0.4 or opponent_approaching\n    opponent_defensive = opponent_block_status > 0.5\n    opponent_jumping = height_diff < -0.2\n    \n    # Advanced wall awareness\n    near_left_wall = my_pos_x < -0.6\n    near_right_wall = my_pos_x > 0.6\n    opponent_cornered = opponent_pos_x < -0.65 or opponent_pos_x > 0.65\n    wall_behind_me = (relative_pos > 0 and near_left_wall) or (relative_pos < 0 and near_right_wall)\n    \n    # Critical survival mode\n    if critical_health:\n        if opponent_attack_status > 0.3 and distance < close_range:\n            return 6  # Emergency block\n        \n        if distance < ultra_close_range:\n            # Escape with blocking movement\n            if wall_behind_me:\n                if height_diff > -0.15:\n                    return 3  # Jump escape\n                else:\n                    return 6  # Block and hope\n            else:\n                if relative_pos > 0:\n                    return 7  # Block retreat left\n                else:\n                    return 8  # Block retreat right\n        \n        if projectile_ready and distance > medium_range:\n            return 9  # Desperate projectile\n        \n        # Create distance\n        if distance < medium_range and not wall_behind_me:\n            if relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        \n        return 6  # Default block in crisis\n    \n    # Anti-air response\n    if opponent_jumping and distance < medium_range:\n        if projectile_ready:\n            return 9  # Anti-air projectile\n        elif distance < close_range:\n            return 6  # Block potential dive\n        else:\n            # Create space for landing\n            if relative_pos > 0 and not near_left_wall:\n                return 1\n            elif not near_right_wall:\n                return 2\n            else:\n                return 6\n    \n    # Immediate threat response\n    if opponent_attack_status > 0.6:\n        if distance < close_range:\n            if low_health or random.random() < defensive_threshold:\n                return 6  # Block confirmed attacks\n            elif distance > ultra_close_range and projectile_ready:\n                return 9  # Counter with projectile\n            else:\n                return 6  # Safe block\n        elif distance < medium_range and projectile_ready:\n            return 9  # Punish whiffed attacks\n    \n    # Counter-attack window detection\n    if opponent_attack_status < 0.1 and my_attack_status < 0.1:\n        # Opponent just finished attacking\n        if distance <= close_range and random.random() < (current_aggression + 0.2):\n            if winning_health:\n                return 5  # Power counter when ahead\n            else:\n                return 4  # Safe counter\n    \n    # Range-based hybrid strategy\n    if distance <= danger_range:\n        # Extreme close - prioritize defense and spacing\n        if opponent_aggressive:\n            return 6  # Block imminent attacks\n        elif opponent_defensive:\n            # Mix up guard breaks\n            mixup = random.random()\n            if mixup < 0.25 and projectile_ready:\n                return 9  # Point-blank projectile\n            elif mixup < 0.55:\n                return 5  # Strong attack vs block\n            else:\n                return 4  # Quick attack\n        else:\n            # Neutral danger range\n            if current_aggression > 0.7:\n                return 4 if random.random() < 0.7 else 5\n            else:\n                return 6  # Defensive stance\n    \n    elif distance <= ultra_close_range:\n        # Ultra-close combat\n        if opponent_defensive:\n            # Patient pressure\n            action_roll = random.random()\n            if action_roll < 0.3:\n                return 5",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978355,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_003",
      "generation": 2,
      "fitness": 225.16200000000626,
      "win_rate": 0.0,
      "avg_reward": 321.66000000000895,
      "code": "def get_action(state):\n    import random\n    import math\n    import numpy as np\n    \n    # Extract and validate key state information with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information\n    my_x_pos = state[0]\n    my_y_pos = state[1] \n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_x_pos = state[11]\n    opp_y_pos = state[12]\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Enhanced strategic parameters - evolved balanced approach\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.55\n    \n    # Dynamic aggression system\n    base_aggression = 0.68\n    health_ratio = my_health / max(0.1, opp_health)\n    \n    # Calculate adaptive aggression\n    if health_advantage > 0.4:\n        aggression_level = min(0.85, base_aggression * 1.4)\n    elif health_advantage > 0.1:\n        aggression_level = base_aggression * 1.2\n    elif health_advantage < -0.4:\n        aggression_level = max(0.35, base_aggression * 0.6)\n    elif health_advantage < -0.1:\n        aggression_level = base_aggression * 0.8\n    else:\n        aggression_level = base_aggression\n    \n    # Position awareness - wall proximity\n    near_left_wall = my_x_pos < 0.25\n    near_right_wall = my_x_pos > 0.75\n    in_corner = near_left_wall or near_right_wall\n    \n    # Velocity-based predictions\n    opp_approaching = (relative_pos > 0 and opp_x_vel > 0.2) or (relative_pos < 0 and opp_x_vel < -0.2)\n    opp_retreating = (relative_pos > 0 and opp_x_vel < -0.2) or (relative_pos < 0 and opp_x_vel > 0.2)\n    \n    # Emergency overrides\n    if my_stunned > 0.5:\n        return 0  # Cannot act while stunned\n    \n    # Critical health management with improved logic\n    if my_health < 0.2:\n        if opp_attacking > 0.5 and distance < close_range:\n            return 6  # Emergency block\n        elif distance > medium_range and my_projectile_cd < 0.1:\n            return 9  # Desperate projectile\n        elif distance < far_range:\n            # Enhanced escape logic\n            if in_corner:\n                # Break out of corner\n                if near_left_wall and relative_pos < 0:\n                    return 8  # Move right with block\n                elif near_right_wall and relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 3  # Jump to escape\n            else:\n                # General retreat with defense\n                escape_action = 7 if relative_pos > 0 else 8\n                return escape_action\n    \n    # Opponent stunned - enhanced punishment\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            # Maximum damage combo\n            combo_selector = random.random()\n            if combo_selector < 0.45:\n                return 5  # Heavy kick for maximum damage\n            elif combo_selector < 0.7:\n                return 4  # Quick punch for consistent damage\n            else:\n                return 3  # Jump attack for positioning\n        elif distance < medium_range:\n            # Close distance quickly\n            if abs(height_diff) > 0.3:\n                return 3  # Jump to close height gap\n            elif relative_pos > 0.05:\n                return 2  # Move right\n            elif relative_pos < -0.05:\n                return 1  # Move left\n            else:\n                return 4  # Attack if close enough\n        else:\n            # Long range punishment\n            if my_projectile_cd < 0.3:\n                return 9  # Projectile\n            else:\n                return 2 if relative_pos > 0 else 1  # Close distance\n    \n    # Enhanced defensive responses to opponent attacks\n    if opp_attacking > 0.5:\n        if distance < close_range:\n            # Close range defense with counter-attack opportunities\n            if my_health > opp_health * 1.3:\n                # Counter-attack when healthy\n                counter_choice = random.random()\n                if counter_choice < 0.4:\n                    return 4  # Quick counter\n                elif counter_choice < 0.6:\n                    return 6  # Safe block\n                else:\n                    return 3  # Jump counter\n            else:\n                # Conservative defense\n                defense_choice = random.random()\n                if defense_choice < 0.7:\n                    return 6  # Block primary\n                else:\n                    return 7 if relative_pos > 0 else 8  # Evasive movement\n        elif distance < medium_range:\n            # Medium range threat assessment\n            if opp_approaching:\n                if my_projectile_cd < 0.2:\n                    return 9  # Interrupt approach\n                else:\n                    return 6  # Prepare defense\n            else:\n                # Maintain range and pressure\n                if my_projectile_cd < 0.4:\n                    return 9  # Ranged pressure\n                else:\n                    return 6  # Block preparation\n    \n    # CLOSE RANGE COMBAT - Enhanced hybrid approach\n    if distance <= close_range:\n        # Advanced guard break system\n        if opp_blocking > 0.6:\n            guard_break_choice = random.random()\n            if guard_break_choice < 0.3:\n                return 5  # Heavy kick\n            elif guard_break_choice < 0.5:\n                return 3  # Jump attack\n            elif guard_break_choice < 0.7:\n                # Reposition for better angle\n                if abs(my_x_vel) < 0.1:  # Not moving\n                    return 2 if my_x_pos < opp_x_pos else 1\n                else:\n                    return 4  # Quick jab\n            else:\n                # Feint with movement\n                return 7 if random.random() < 0.5 else 8\n        \n        # Enhanced attack selection against open opponent\n        elif my_attacking < 0.2:\n            # Height-based attack optimization\n            if abs(height_diff) > 0.25:\n                if my_y_pos < opp_y_pos - 0.2:\n                    return 3  # Jump up attack\n                elif my_y_pos > opp_y_pos + 0.2:\n                    return 5  # Downward kick\n            \n            #",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978356,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_018",
      "generation": 4,
      "fitness": 225.0799999999946,
      "win_rate": 0.0,
      "avg_reward": 225.0799999999946,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter state\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = state[0]\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[7]\n    my_blocking = state[8]\n    my_projectile_cooldown = max(0.0, state[9])\n    \n    # Extract opponent state\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_x_pos = state[11]\n    opponent_y_pos = state[12]\n    opponent_x_vel = state[14]\n    opponent_y_vel = state[15]\n    opponent_attacking = state[18]\n    opponent_blocking = state[19]\n    opponent_projectile_cooldown = max(0.0, state[20])\n    \n    # Advanced tactical parameters for evolved balanced fighter\n    close_range = 0.13\n    medium_range = 0.34\n    far_range = 0.52\n    critical_health = 0.15\n    dominance_threshold = 0.4\n    \n    # Multi-dimensional aggression calculation\n    base_aggression = 0.55\n    health_factor = 0.0\n    momentum_factor = 0.0\n    position_factor = 0.0\n    opportunity_factor = 0.0\n    \n    # Health-based adjustment with smoother transitions\n    if health_advantage > 0.2:\n        health_factor = min(0.3, health_advantage * 0.5 + 0.08)\n    elif health_advantage < -0.2:\n        health_factor = max(-0.4, health_advantage * 0.7 - 0.05)\n    else:\n        health_factor = health_advantage * 0.15\n    \n    # Momentum calculation based on velocity and positioning\n    my_speed = abs(my_x_vel) + abs(my_y_vel)\n    opponent_speed = abs(opponent_x_vel) + abs(opponent_y_vel)\n    \n    if my_speed > opponent_speed + 0.02:\n        momentum_factor += 0.12\n    elif opponent_speed > my_speed + 0.02:\n        momentum_factor -= 0.08\n    \n    # Stage position awareness\n    if abs(my_x_pos) > 0.75:  # Near edge danger\n        position_factor -= 0.2\n    elif abs(my_x_pos) < 0.25:  # Center control\n        position_factor += 0.15\n    \n    # Opportunity detection\n    if opponent_projectile_cooldown > 0.7 and my_projectile_cooldown < 0.3:\n        opportunity_factor += 0.18\n    if opponent_attacking > 0.6 and distance < 0.2:\n        opportunity_factor += 0.1  # Counter opportunity\n    \n    current_aggression = max(0.1, min(0.85, \n        base_aggression + health_factor + momentum_factor + position_factor + opportunity_factor))\n    \n    # Enhanced opponent analysis with pattern recognition\n    opponent_velocity_total = abs(opponent_x_vel) + abs(opponent_y_vel)\n    opponent_is_mobile = opponent_velocity_total > 0.05\n    \n    # Movement pattern detection\n    opponent_approaching = False\n    opponent_retreating = False\n    opponent_flanking = False\n    \n    if distance > 0.1:  # Only analyze at meaningful distances\n        if relative_pos > 0.05 and opponent_x_vel > 0.025:\n            opponent_approaching = True\n        elif relative_pos < -0.05 and opponent_x_vel < -0.025:\n            opponent_approaching = True\n        elif relative_pos > 0.05 and opponent_x_vel < -0.03:\n            opponent_retreating = True\n        elif relative_pos < -0.05 and opponent_x_vel > 0.03:\n            opponent_retreating = True\n        elif opponent_is_mobile and abs(opponent_y_vel) > 0.03:\n            opponent_flanking = True\n    \n    # Fighting style classification with improved detection\n    opponent_rushdown = opponent_approaching and opponent_attacking > 0.4\n    opponent_zoner = opponent_projectile_cooldown < 0.4 and distance > 0.3\n    opponent_turtle = opponent_blocking > 0.6 and opponent_velocity_total < 0.025\n    opponent_hit_and_run = opponent_is_mobile and opponent_attacking > 0.3 and opponent_blocking < 0.4\n    opponent_balanced = not (opponent_rushdown or opponent_zoner or opponent_turtle or opponent_hit_and_run)\n    \n    # Critical health emergency protocols\n    if my_health < critical_health or health_advantage < -0.6:\n        if distance < 0.18:\n            if opponent_attacking > 0.7:\n                return 6  # Emergency block\n            elif abs(my_x_pos) > 0.8:  # Cornered\n                if opponent_blocking > 0.5:\n                    return 3  # Jump escape\n                else:\n                    desperation_roll = random.random()\n                    if desperation_roll < 0.6:\n                        return 6  # Block\n                    else:\n                        return 5  # Desperation kick\n            else:\n                # Retreat with cover\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n        elif distance > 0.35 and my_projectile_cooldown < 0.35:\n            return 9  # Desperation projectile\n        else:\n            return 6  # Defensive block\n    \n    # Finishing combinations when opponent is low\n    if opponent_health < critical_health and health_advantage > 0.2:\n        if distance < close_range + 0.05:\n            finish_choice = random.random()\n            if opponent_blocking > 0.5:\n                if finish_choice < 0.35:\n                    return 5  # Guard break\n                elif finish_choice < 0.6:\n                    return 3  # Overhead jump\n                else:\n                    return 9 if my_projectile_cooldown < 0.5 else 4\n            else:\n                if finish_choice < 0.55:\n                    return 5  # Power finish\n                else:\n                    return 4  # Quick finish\n        elif distance < medium_range + 0.1:\n            # Approach for finish\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        elif my_projectile_cooldown < 0.4:\n            return 9  # Finish with projectile\n    \n    # Close range tactical combat (0-0.13)\n    if distance < close_range:\n        # Advanced counter-attack system\n        if opponent_attacking > 0.6:\n            counter_decision = random.random()\n            counter_confidence = current_aggression\n            \n            if counter_confidence > 0.65:\n                if counter_decision < 0.25:\n                    return 6  # Safe block\n                elif counter_decision < 0.55:\n                    return 4  # Counter punch\n                else:\n                    return 5  # Counter kick\n            else:\n                if counter_decision < 0.6:\n                    return 6  # Defensive block\n                elif counter_decision < 0.8:\n                    return",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904279,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_007",
      "generation": 3,
      "fitness": 220.51866666666882,
      "win_rate": 0.5,
      "avg_reward": 315.02666666666977,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[0] if len(state) > 0 else 0.5\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.3 if len(state) > 5 else False\n    my_blocking = state[6] > 0.3 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8] if len(state) > 8 else 0.0)\n    my_attack_cooldown = max(0.0, state[9] if len(state) > 9 else 0.0)\n    my_block_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    # Extract opponent status with bounds checking\n    opp_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opp_pos_x = state[11] if len(state) > 11 else 0.5\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.3 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.3 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19] if len(state) > 19 else 0.0)\n    opp_attack_cooldown = max(0.0, state[20] if len(state) > 20 else 0.0)\n    opp_block_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Hybrid tactical ranges - refined for balanced fighting\n    point_blank = 0.05\n    striking_range = 0.12\n    close_combat = 0.20\n    mid_close = 0.28\n    medium_range = 0.40\n    mid_far = 0.55\n    long_range = 0.75\n    \n    # Dynamic aggression calculation\n    base_aggression = 0.7\n    health_modifier = health_advantage * 0.3\n    distance_modifier = (1.0 - distance) * 0.2\n    current_aggression = max(0.2, min(0.95, base_aggression + health_modifier + distance_modifier))\n    \n    # Momentum and prediction variables\n    combined_momentum = abs(my_velocity_x) + abs(opp_velocity_x)\n    approach_rate = -my_velocity_x * relative_pos if relative_pos != 0 else 0\n    unpredictability = random.random()\n    \n    # Calculate tactical state\n    my_ready_to_attack = my_attack_cooldown < 0.15\n    my_can_block = my_block_cooldown < 0.10\n    my_can_projectile = my_projectile_cooldown < 0.20\n    opp_vulnerable = opp_stunned or (opp_attack_cooldown > 0.4 and not opp_blocking)\n    opp_dangerous = opp_attacking or (opp_projectile_cooldown < 0.15 and distance > medium_range)\n    \n    # Emergency situations - highest priority\n    if my_stunned:\n        if distance < close_combat and opp_attacking:\n            return 6 if my_can_block else 0\n        elif distance < striking_range:\n            # Try to escape stun situation\n            if my_can_block:\n                return 7 if relative_pos > 0 else 8\n            else:\n                return 1 if relative_pos > 0 else 2\n        else:\n            return 6 if my_can_block else 0\n    \n    # Critical health scenarios\n    if my_health < 0.15:\n        if health_advantage < -0.5:\n            # Desperate all-in or defensive play\n            if distance > medium_range:\n                if my_can_projectile:\n                    return 9  # Zone from safety\n                else:\n                    return 6  # Defensive\n            elif distance < striking_range and opp_vulnerable and my_ready_to_attack:\n                # All-in desperation\n                return 5 if unpredictability < 0.6 else 4\n            else:\n                # Ultra defensive\n                if my_can_block:\n                    return 6\n                else:\n                    return 1 if relative_pos > 0 else 2\n        else:\n            # Careful play when low health but not desperate\n            if distance < close_combat and opp_dangerous:\n                return 6 if my_can_block else (7 if relative_pos > 0 else 8)\n            elif distance > mid_far and my_can_projectile:\n                return 9\n    \n    # Exploit opponent vulnerabilities - high priority\n    if opp_stunned and distance < medium_range:\n        if distance > striking_range:\n            # Rush in for punish\n            return 2 if relative_pos > 0 else 1\n        elif my_ready_to_attack:\n            # Optimal punish combo\n            if health_advantage > 0.2:\n                return 5  # Go for damage when ahead\n            elif unpredictability < 0.7:\n                return 4  # Safe punish\n            else:\n                return 5  # Risk for reward\n        else:\n            # Position for punish\n            if distance > point_blank:\n                return 2 if relative_pos > 0 else 1\n            else:\n                return 0\n    \n    # Defensive responses to opponent attacks\n    if opp_attacking:\n        if distance < close_combat:\n            # Close range defense with hybrid approach\n            if my_can_block:\n                if current_aggression > 0.8 and distance > point_blank:\n                    # Aggressive blocking with positioning\n                    counter_choice = unpredictability\n                    if counter_choice < 0.4:\n                        return 8 if relative_pos > 0 else 7  # Block and position\n                    elif counter_choice < 0.7:\n                        return 6  # Pure block\n                    else:\n                        return 3  # Jump counter\n                else:\n                    return 6  # Standard block\n            else:\n                # Can't block - evasive maneuvers\n                if distance < point_blank:\n                    return 3  # Jump out\n                elif unpredictability < 0.5:\n                    return 1 if relative_pos > 0 else 2\n                else:\n                    return 3\n        elif distance < medium_range:\n            # Medium range response\n            if current_aggression > 0.75:\n                # Advance with protection\n                return",
      "fighting_style": "evolved",
      "creation_time": 1748772554.503264,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_elite_001",
      "generation": 2,
      "fitness": 218.7453333333388,
      "win_rate": 0.0,
      "avg_reward": 312.4933333333412,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 0.5\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_velocity = state[3] if len(state) > 3 else 0.0\n    my_y_velocity = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.5 if len(state) > 5 else False\n    my_blocking = state[6] > 0.5 if len(state) > 6 else False\n    my_stunned = state[7] > 0.5 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8]) if len(state) > 8 else 0.0\n    my_attack_cooldown = max(0.0, state[9]) if len(state) > 9 else 0.0\n    my_block_cooldown = max(0.0, state[10]) if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_velocity = state[14] if len(state) > 14 else 0.0\n    opp_y_velocity = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.5 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.5 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.5 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19]) if len(state) > 19 else 0.0\n    opp_attack_cooldown = max(0.0, state[20]) if len(state) > 20 else 0.0\n    opp_block_cooldown = max(0.0, state[21]) if len(state) > 21 else 0.0\n    \n    # Define hybrid fighter thresholds\n    close_range = 0.13\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.25\n    winning_margin = 0.15\n    losing_margin = -0.15\n    edge_threshold = 0.15\n    \n    # Calculate tactical variables\n    is_near_left_edge = my_x_pos < edge_threshold\n    is_near_right_edge = my_x_pos > (1.0 - edge_threshold)\n    is_cornered = is_near_left_edge or is_near_right_edge\n    opponent_closing_fast = abs(opp_x_velocity) > 0.3 and distance < 0.3\n    height_disadvantage = height_diff < -0.2\n    \n    # Emergency defensive responses\n    if my_stunned:\n        return 0  # Cannot act while stunned\n    \n    # Critical health survival mode\n    if my_health < critical_health and health_advantage < -0.3:\n        if opp_attacking and distance < close_range:\n            if my_block_cooldown < 0.2:\n                return 6  # Block immediate threat\n            else:\n                return 0  # Wait for block cooldown\n        elif distance > medium_range:\n            if my_projectile_cooldown < 0.3:\n                return 9  # Keep distance with projectiles\n            else:\n                # Maintain distance while waiting\n                if relative_pos > 0 and not is_near_right_edge:\n                    return 2  # Move away\n                elif relative_pos < 0 and not is_near_left_edge:\n                    return 1  # Move away\n                else:\n                    return 6  # Block if cornered\n        else:\n            # Medium range escape\n            if is_cornered:\n                return 6  # Block when cornered\n            else:\n                if relative_pos > 0:\n                    return 7  # Move left while blocking\n                else:\n                    return 8  # Move right while blocking\n    \n    # Opponent stunned - maximum punishment\n    if opp_stunned:\n        if distance < close_range:\n            if my_attack_cooldown < 0.1:\n                # Mix heavy and light attacks for optimal damage\n                if random.random() < 0.75:\n                    return 5  # Prefer kicks for damage\n                else:\n                    return 4  # Mix in punches for speed\n            else:\n                # Position for next attack\n                if abs(relative_pos) > 0.3:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Wait in optimal position\n        elif distance < medium_range:\n            # Close distance quickly\n            return 2 if relative_pos > 0 else 1\n        else:\n            # Too far for melee, use projectile\n            if my_projectile_cooldown < 0.2:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Counter opponent attacks\n    if opp_attacking:\n        if distance < close_range:\n            if my_block_cooldown < 0.2:\n                # Block and counter-move based on position\n                if is_cornered:\n                    return 6  # Pure block when cornered\n                elif random.random() < 0.6:\n                    return 6  # Standard block\n                else:\n                    # Mobile blocking\n                    return 7 if relative_pos > 0 else 8\n            else:\n                # Cannot block - evade\n                if not is_cornered:\n                    return 1 if relative_pos > 0 else 2\n                else:\n                    return 0  # Stay put if cornered\n        elif distance < medium_range and opponent_closing_fast:\n            # Prepare for incoming pressure\n            if my_block_cooldown < 0.3:\n                return 8 if relative_pos < 0 else 7  # Block while repositioning\n            else:\n                return 6  # Standard block\n    \n    # Winning strategy - controlled aggression\n    if health_advantage > winning_margin:\n        aggression_factor = min(1.2, 0.8 + (health_advantage * 0.8))\n        \n        if distance < close_range:\n            if my_attack_cooldown < 0.1:\n                if opp_blocking:\n                    # Break guard tactics\n                    action_roll = random.random()\n                    if action_roll < 0.4:\n                        return 5  # Heavy kick to break block\n                    elif action_roll < 0.7:\n                        return 4  # Quick punch\n                    else:\n                        # Reposition for angle attack\n                        if not is_cornered:\n                            return 2 if relative_pos < 0 else 1",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978358,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_021",
      "generation": 0,
      "fitness": 218.42949999999786,
      "win_rate": 0.5,
      "avg_reward": 236.8599999999923,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player state information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_vel = state[3] if len(state) > 3 else 0.0\n    my_y_vel = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] if len(state) > 5 else 0.0\n    my_blocking = state[6] if len(state) > 6 else 0.0\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent state information\n    opp_health = state[12] if len(state) > 12 else 1.0\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_vel = state[14] if len(state) > 14 else 0.0\n    opp_y_vel = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] if len(state) > 16 else 0.0\n    opp_blocking = state[17] if len(state) > 17 else 0.0\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Define defensive strategic thresholds\n    close_range = 0.12\n    medium_range = 0.25\n    far_range = 0.4\n    safe_range = 0.5\n    \n    # Defensive parameters\n    block_threshold = 0.15\n    retreat_health_threshold = -0.2\n    counter_attack_threshold = 0.3\n    projectile_safe_distance = 0.35\n    \n    # Emergency defensive situations\n    if my_stunned > 0.5:\n        return 6  # Block while stunned\n    \n    # Critical health - ultra defensive\n    if health_advantage < -0.6 or my_health < 0.3:\n        if distance < close_range:\n            if opp_attacking > 0.5:\n                return 6  # Block incoming attack\n            else:\n                # Try to create distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left while blocking\n                else:\n                    return 8  # Move right while blocking\n        elif distance < medium_range:\n            # Back away while ready to block\n            if relative_pos > 0:\n                return 7  # Retreat left with block\n            else:\n                return 8  # Retreat right with block\n        else:\n            # At safe distance, use projectiles carefully\n            if my_projectile_cooldown < 0.3:\n                return 9  # Safe projectile\n            else:\n                return 6  # Block and wait\n    \n    # Opponent is attacking - defensive response\n    if opp_attacking > 0.5:\n        if distance < block_threshold:\n            return 6  # Block close attacks\n        elif distance < medium_range:\n            # Maintain distance and prepare counter\n            if relative_pos > 0:\n                return 7  # Move away with block\n            else:\n                return 8  # Move away with block\n        else:\n            # Far enough to avoid, prepare counter\n            return 6  # Stay ready to block\n    \n    # Opponent is blocking - respect their defense\n    if opp_blocking > 0.5:\n        if distance < close_range:\n            # Don't attack into block, create space\n            if relative_pos > 0:\n                return 1  # Move left to reposition\n            else:\n                return 2  # Move right to reposition\n        elif distance < medium_range:\n            # Wait for opening or use projectile\n            if my_projectile_cooldown < 0.2:\n                return 9  # Projectile against block\n            else:\n                return 6  # Block and wait\n        else:\n            # Safe projectile harassment\n            return 9 if my_projectile_cooldown < 0.3 else 6\n    \n    # Opponent is stunned - careful counter attack\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            # Quick counter attack\n            if health_advantage > 0:\n                return 4  # Safe punch\n            else:\n                return 6  # Still be defensive\n        elif distance < medium_range:\n            # Move in for counter but carefully\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        else:\n            # Projectile on stunned opponent\n            return 9 if my_projectile_cooldown < 0.4 else 6\n    \n    # Range-based defensive tactics\n    if distance < close_range:\n        # Close range - high danger, prioritize defense\n        if health_advantage < retreat_health_threshold:\n            # Losing, need to escape\n            if abs(my_x_pos) > 0.7:  # Near corner\n                if my_x_pos > 0:  # Right corner\n                    return 7  # Move left with block\n                else:  # Left corner\n                    return 8  # Move right with block\n            else:\n                # Retreat to safer distance\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        elif health_advantage > counter_attack_threshold:\n            # Winning, can afford calculated risks\n            if random.random() < 0.3:  # Conservative attack frequency\n                return 4 if random.random() < 0.7 else 5  # Prefer quick punch\n            else:\n                return 6  # Block most of the time\n        \n        else:\n            # Even match, very defensive\n            if random.random() < 0.15:  # Very low attack frequency\n                return 4  # Quick punch only\n            else:\n                return 6  # Block primarily\n    \n    elif distance < medium_range:\n        # Medium range - positioning phase\n        if health_advantage < retreat_health_threshold:\n            # Losing, maintain distance\n            if relative_pos > 0:\n                return 7  # Retreat left with block\n            else:\n                return 8  # Retreat right with block\n        \n        elif abs(my_x_pos) > 0.8:  # Too close to corner\n            # Escape corner danger\n            if my_x_pos > 0:  # Right corner\n                return 7  # Move left with block\n            else:  # Left corner\n                return 8  # Move right with block\n        \n        elif opp_x_vel != 0 and abs(opp_x_vel) > 0.1:\n            # Opponent moving, stay defensive\n            return 6  # Block and observe\n        \n        else:\n            # Careful positioning\n            if health_advantage > 0.1:\n                # Slight advantage, can advance carefully\n                if relative_pos > 0:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block",
      "fighting_style": "defensive",
      "creation_time": 1748763419.2608252,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_elite_002",
      "generation": 3,
      "fitness": 218.2713333333319,
      "win_rate": 0.5,
      "avg_reward": 281.71333333333035,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with defensive bounds checking\n    my_health = max(0.0, min(1.0, state[1]))\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = max(0.0, state[8])\n    my_attack_cooldown = max(0.0, state[9])\n    my_block_cooldown = max(0.0, state[10])\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[12]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = max(0.0, state[19])\n    opp_attack_cooldown = max(0.0, state[20])\n    opp_block_cooldown = max(0.0, state[21])\n    \n    # Hybrid fighter tactical ranges - balanced approach\n    point_blank_range = 0.06\n    close_range = 0.15\n    medium_range = 0.28\n    far_range = 0.45\n    max_range = 0.7\n    \n    # Dynamic aggression system based on multiple factors\n    base_aggression = 0.7\n    health_aggression_modifier = health_advantage * 0.4\n    distance_aggression_modifier = max(0.0, (0.3 - distance) * 0.5)\n    current_aggression = max(0.2, min(0.95, base_aggression + health_aggression_modifier + distance_aggression_modifier))\n    \n    # Defensive priority calculation\n    defense_priority = 0.6 - (health_advantage * 0.3) + (0.4 if my_health < 0.3 else 0.0)\n    defense_priority = max(0.1, min(0.9, defense_priority))\n    \n    # Counter-attack window detection\n    counter_window = not opp_attacking and opp_attack_cooldown > 0.2 and my_attack_cooldown < 0.15\n    \n    # Positioning awareness\n    wall_distance_left = my_x_pos\n    wall_distance_right = 1.0 - my_x_pos\n    near_wall = wall_distance_left < 0.2 or wall_distance_right < 0.2\n    opp_cornered = (opp_x_pos < 0.15 or opp_x_pos > 0.85)\n    \n    # Movement prediction\n    opp_closing_in = (relative_pos > 0 and opp_x_velocity > 0.1) or (relative_pos < 0 and opp_x_velocity < -0.1)\n    opp_retreating = (relative_pos > 0 and opp_x_velocity < -0.1) or (relative_pos < 0 and opp_x_velocity > 0.1)\n    \n    # Critical situation handling - highest priority\n    if my_stunned:\n        if distance < close_range and opp_attacking:\n            return 6 if my_block_cooldown < 0.3 else 0\n        elif opp_closing_in:\n            return 6 if my_block_cooldown < 0.5 else 0\n        else:\n            # Try to create space while stunned\n            if distance < medium_range:\n                return 7 if relative_pos < 0 else 8\n            else:\n                return 9 if my_projectile_cooldown < 0.2 else 6\n    \n    # Emergency health situations\n    if my_health < 0.2:\n        if distance > far_range and my_projectile_cooldown < 0.1:\n            return 9  # Desperate projectile spam\n        elif distance < close_range and opp_attacking:\n            return 6  # Survival blocking\n        elif distance < close_range and not opp_blocking and my_attack_cooldown < 0.1:\n            # All-in desperation attack\n            return 5 if random.random() < 0.7 else 4\n        else:\n            # Evasive movement with blocking\n            if near_wall:\n                return 8 if wall_distance_left < wall_distance_right else 7\n            else:\n                return 7 if relative_pos > 0 else 8\n    \n    # Capitalize on stunned opponent\n    if opp_stunned:\n        if distance < close_range and my_attack_cooldown < 0.1:\n            # Maximize damage on stunned opponent\n            combo_choice = random.random()\n            if combo_choice < 0.6:\n                return 5  # Heavy damage\n            elif combo_choice < 0.85:\n                return 4  # Quick follow-up\n            else:\n                return 9 if my_projectile_cooldown < 0.1 else 5\n        elif distance >= close_range:\n            # Rush in for combo opportunity\n            return 2 if relative_pos > 0 else 1\n        else:\n            return 0  # Wait for attack cooldown\n    \n    # Defensive responses to opponent attacks\n    if opp_attacking:\n        if distance < point_blank_range:\n            return 6 if my_block_cooldown < 0.2 else 0\n        elif distance < close_range:\n            # Block with positioning for counter\n            if my_block_cooldown < 0.1:\n                spacing_direction = 2 if relative_pos > 0 else 1\n                return 8 if spacing_direction == 2 else 7\n            else:\n                # Evasive movement\n                if not near_wall:\n                    return 3 if random.random() < 0.4 else (1 if relative_pos > 0 else 2)\n                else:\n                    return 3\n        elif distance < medium_range:\n            # Medium range defense with gap closing\n            return 8 if relative_pos > 0 else 7\n        else:\n            # Long range - projectile counter or movement\n            if my_projectile_cooldown < 0.1 and random.random() < 0.6:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Range-specific hybrid tactics\n    if distance <= point_blank_range:\n        # Point blank - explosive mixups\n        if my_attack_cooldown < 0.05:\n            if opp_blocking:\n                # Guard break sequences\n                if my_projectile_cooldown < 0.1 and random.random() < 0.3:\n                    return 9  # Point blank projectile surprise\n                elif random.random() < 0.6:\n                    return 5  # Power through block\n                else:\n                    # Micro spacing for better angle\n                    if random.random() < 0.5:\n                        return 1 if relative_pos > 0.3 else 2",
      "fighting_style": "evolved",
      "creation_time": 1748772554.5032651,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_000",
      "generation": 0,
      "fitness": 216.57133333333016,
      "win_rate": 0.6666666666666666,
      "avg_reward": 263.1533333333271,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    opponent_health = state[12] if len(state) > 12 else 1.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    opponent_attack_status = state[16] if len(state) > 16 else 0.0\n    opponent_block_status = state[17] if len(state) > 17 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define aggressive strategic parameters\n    close_threshold = 0.18\n    medium_threshold = 0.35\n    far_threshold = 0.6\n    aggression_base = 0.8\n    rush_threshold = 0.25\n    desperate_threshold = -0.4\n    dominant_threshold = 0.3\n    \n    # Calculate dynamic aggression level based on health and situation\n    aggression_modifier = 1.0\n    if health_advantage > dominant_threshold:\n        aggression_modifier = 1.3  # Extra aggressive when winning\n    elif health_advantage < desperate_threshold:\n        aggression_modifier = 1.5  # All-out attack when desperate\n    else:\n        aggression_modifier = 1.1  # Always above baseline aggression\n    \n    final_aggression = min(1.0, aggression_base * aggression_modifier)\n    \n    # Emergency survival mode when critically low health\n    if my_health < 0.15 and health_advantage < -0.6:\n        if distance < close_threshold and opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        elif distance > medium_threshold:\n            return 9 if my_projectile_cooldown < 0.1 else 6\n        else:\n            # Desperate close-range all-out attack\n            return 5 if random.random() < 0.7 else 4\n    \n    # Opponent is attacking - aggressive counter or block\n    if opponent_attack_status > 0.5:\n        if distance < close_threshold:\n            if health_advantage > 0.2:\n                # Counter-attack when strong\n                return 4 if random.random() < 0.6 else 5\n            else:\n                # Block then counter\n                if my_block_status < 0.3:\n                    return 6\n                else:\n                    return 5  # Heavy counter after blocking\n        elif distance < medium_threshold:\n            # Rush in for counter attack\n            if relative_pos > 0:\n                return 2  # Move right to close distance\n            else:\n                return 1  # Move left to close distance\n    \n    # Opponent is blocking - aggressive pressure tactics\n    if opponent_block_status > 0.5:\n        if distance < close_threshold:\n            # Mix up attacks to break guard\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 5  # Heavy kick to break block\n            elif attack_choice < 0.7:\n                return 4  # Quick punch\n            else:\n                return 3  # Jump attack to confuse\n        elif distance < medium_threshold:\n            # Close distance while they're blocking\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        else:\n            # Projectile pressure from range\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                # Close distance for pressure\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Close range aggressive combat\n    if distance < close_threshold:\n        # Height advantage considerations\n        if abs(height_diff) > 0.3:\n            if height_diff < -0.3:  # Opponent is above\n                return 3  # Jump to match height\n            else:  # We are above\n                return 5  # Kick down at opponent\n        \n        # Aggressive close combat mixing\n        if health_advantage > 0.1:\n            # Winning - maintain pressure\n            combat_roll = random.random()\n            if combat_roll < 0.45:\n                return 4  # Quick punch\n            elif combat_roll < 0.75:\n                return 5  # Power kick\n            elif combat_roll < 0.9:\n                return 3  # Jump attack for mix-up\n            else:\n                return 6  # Brief defensive moment\n        else:\n            # Even or losing - more calculated aggression\n            combat_roll = random.random()\n            if combat_roll < 0.35:\n                return 4  # Punch\n            elif combat_roll < 0.6:\n                return 5  # Kick\n            elif combat_roll < 0.8:\n                return 6  # Block briefly\n            else:\n                return 3  # Jump mix-up\n    \n    # Medium range - aggressive positioning and setup\n    elif distance < medium_threshold:\n        # Check if we should rush in or use projectile\n        if my_projectile_cooldown < 0.1 and random.random() < 0.3:\n            return 9  # Occasional projectile to mix up approach\n        \n        # Aggressive approach with some tactical blocking\n        if opponent_attack_status > 0.3:\n            # Opponent might attack - approach with guard\n            if relative_pos > 0:\n                return 8  # Move right with block\n            else:\n                return 7  # Move left with block\n        else:\n            # Standard aggressive approach\n            approach_style = random.random()\n            if approach_style < 0.7:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n            elif approach_style < 0.85:\n                # Jump approach for unpredictability\n                return 3\n            else:\n                # Guarded approach\n                if relative_pos > 0:\n                    return 8\n                else:\n                    return 7\n    \n    # Far range - projectile pressure and aggressive closing\n    elif distance < far_threshold:\n        # Projectile available - use for pressure\n        if my_projectile_cooldown < 0.1:\n            projectile_chance = 0.6 if health_advantage > 0 else 0.4\n            if random.random() < projectile_chance:\n                return 9\n        \n        # Close distance aggressively\n        movement_choice = random.random()\n        if movement_choice < 0.6:\n            # Direct approach\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        elif movement_choice < 0.8:\n            # Jump approach\n            return 3\n        else:\n            # Cautious approach if opponent might have projectile ready\n            if opponent_projectile_cooldown < 0.2:\n                if relative_pos > 0:\n                    return 8  # Approach with block\n                else:\n                    return 7\n            else:\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1",
      "fighting_style": "aggressive",
      "creation_time": 1748763419.2608268,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_007",
      "generation": 1,
      "fitness": 214.7086666666676,
      "win_rate": 0.5,
      "avg_reward": 306.726666666668,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Validate input and extract core strategic information\n    if len(state) < 26:\n        return 0  # Safety fallback\n    \n    # Core strategic metrics with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # My fighter comprehensive status\n    my_health = max(0.0, min(1.0, state[1]))\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_velocity = state[3] if len(state) > 3 else 0.0\n    my_y_velocity = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.1 if len(state) > 5 else False\n    my_blocking = state[6] > 0.1 if len(state) > 6 else False\n    my_stunned = state[7] > 0.1 if len(state) > 7 else False\n    my_projectile_cooldown = state[8] if len(state) > 8 else 1.0\n    my_attack_cooldown = state[9] if len(state) > 9 else 1.0\n    my_block_cooldown = state[10] if len(state) > 10 else 1.0\n    \n    # Opponent comprehensive status\n    opp_health = max(0.0, min(1.0, state[12]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_velocity = state[14] if len(state) > 14 else 0.0\n    opp_y_velocity = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.1 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.1 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.1 if len(state) > 18 else False\n    opp_projectile_cooldown = state[19] if len(state) > 19 else 1.0\n    opp_attack_cooldown = state[20] if len(state) > 20 else 1.0\n    opp_block_cooldown = state[21] if len(state) > 21 else 1.0\n    \n    # Hybrid fighter tactical ranges\n    very_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.30\n    far_range = 0.45\n    max_range = 0.65\n    \n    # Dynamic aggression calculation for hybrid approach\n    base_aggression = 0.65  # Balanced baseline\n    health_modifier = health_advantage * 0.25\n    range_modifier = 0.0\n    \n    # Range-based aggression adjustments\n    if distance < close_range:\n        range_modifier = 0.15  # More aggressive up close\n    elif distance > far_range:\n        range_modifier = -0.1  # More cautious at range\n    \n    current_aggression = max(0.2, min(0.9, base_aggression + health_modifier + range_modifier))\n    \n    # Tactical state analysis\n    can_attack = my_attack_cooldown < 0.15\n    can_projectile = my_projectile_cooldown < 0.15\n    can_block = my_block_cooldown < 0.15\n    \n    # Opponent threat assessment\n    opp_can_attack = opp_attack_cooldown < 0.15\n    opp_can_projectile = opp_projectile_cooldown < 0.15\n    opp_threatening = opp_attacking or (opp_can_attack and distance < 0.2)\n    \n    # Critical health emergency protocols\n    if my_stunned and opp_threatening:\n        if can_block:\n            return 6  # Desperate block\n        else:\n            # Try to escape\n            if relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n    \n    # Extremely low health survival mode\n    if my_health < 0.15 and health_advantage < -0.5:\n        if distance > 0.4:\n            # Safe projectile range\n            if can_projectile:\n                return 9\n            else:\n                return 6  # Block and wait\n        elif distance > 0.2:\n            # Create more distance\n            if relative_pos > 0:\n                return 1  # Move away\n            else:\n                return 2  # Move away\n        else:\n            # Too close - block or escape\n            if can_block and random.random() < 0.7:\n                return 6\n            else:\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n    \n    # Opponent stunned - maximum opportunity exploitation\n    if opp_stunned:\n        if distance < close_range:\n            if can_attack:\n                # Choose attack based on opponent health\n                if opp_health < 0.3:\n                    return 5  # Kick for potential finish\n                else:\n                    return 4 if random.random() < 0.6 else 5  # Mix attacks\n            else:\n                # Position for next attack\n                if distance > very_close_range:\n                    if relative_pos > 0:\n                        return 2  # Move closer\n                    else:\n                        return 1  # Move closer\n                else:\n                    return 0  # Wait for attack cooldown\n        else:\n            # Move in to capitalize\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n    \n    # Opponent attacking - hybrid defensive response\n    if opp_attacking:\n        if distance < 0.12:\n            # Very close threat\n            if can_block and random.random() < 0.8:\n                return 6  # Block most of the time\n            else:\n                # Try to escape\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n        elif distance < 0.25:\n            # Medium threat range\n            defensive_choice = random.random()\n            if defensive_choice < 0.4 and can_block:\n                # Block with movement\n                if relative_pos > 0:\n                    return 7  # Block left\n                else:\n                    return 8  # Block right\n            elif defensive_choice < 0.7:\n                # Pure movement\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n            else:\n                # Counter-attack if winning\n                if health_advantage > 0.1 and can_attack:\n                    return 4  # Quick counter\n                else:\n                    return 6  # Block\n        else:\n            # Far enough to projectile\n            if can_projectile:\n                return 9\n            else:\n                return 0  # Wait\n    \n    # Core hybrid combat strategy by range\n    if distance < very_close_range:\n        # Extreme close quarters - high intensity\n        if health_advantage > 0.2:\n            # Winning - maintain pressure\n            if can_attack:\n                attack_roll = random.random()\n                if attack_roll < 0.5:\n                    return 4  # Quick punch\n                elif attack_roll < 0.85:\n                    return 5  # Strong kick",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371417,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_013",
      "generation": 0,
      "fitness": 213.9106666666674,
      "win_rate": 0.5,
      "avg_reward": 305.5866666666677,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_health = state[12] if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_attack_status = state[16] if len(state) > 16 else 0.0\n    opp_block_status = state[17] if len(state) > 17 else 0.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.15\n    medium_range = 0.35\n    critical_health = 0.25\n    winning_threshold = 0.2\n    losing_threshold = -0.2\n    \n    # Calculate dynamic factors\n    is_airborne = abs(my_y_pos) > 0.1 or abs(my_velocity_y) > 0.1\n    opponent_attacking = opp_attack_status > 0.5\n    opponent_blocking = opp_block_status > 0.5\n    opponent_airborne = abs(height_diff) > 0.2\n    \n    # Emergency defensive actions\n    if my_health < critical_health and health_advantage < -0.4:\n        if opponent_attacking and distance < 0.25:\n            return 6  # Block incoming attack\n        if distance > 0.6 and my_projectile_cooldown < 0.3:\n            return 9  # Keep distance with projectile\n        if relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Aggressive winning strategy\n    if health_advantage > winning_threshold and my_health > 0.4:\n        if distance < close_range:\n            if opponent_blocking:\n                # Mix up attacks to break guard\n                attack_choice = random.random()\n                if attack_choice < 0.4:\n                    return 5  # Strong kick\n                elif attack_choice < 0.7:\n                    return 4  # Fast punch\n                else:\n                    return 3  # Jump to mix timing\n            else:\n                # Go for damage\n                if random.random() < 0.65:\n                    return 4  # Fast punch combo\n                else:\n                    return 5  # Power kick\n        \n        elif distance < medium_range:\n            # Aggressive positioning\n            if opponent_airborne:\n                return 4  # Punish landing\n            if relative_pos > 0.1:\n                return 2  # Chase right\n            elif relative_pos < -0.1:\n                return 1  # Chase left\n            else:\n                return 4  # Quick attack\n        \n        else:\n            # Long range pressure\n            if my_projectile_cooldown < 0.2:\n                return 9  # Projectile pressure\n            else:\n                if relative_pos > 0:\n                    return 2  # Close distance\n                else:\n                    return 1  # Close distance\n    \n    # Defensive/cautious strategy when losing\n    elif health_advantage < losing_threshold:\n        if distance < close_range:\n            if opponent_attacking:\n                return 6  # Block attack\n            elif opponent_blocking:\n                # Try to reset neutral\n                if abs(my_x_pos) > 0.7:  # Near corner\n                    if my_x_pos > 0:\n                        return 7  # Move left blocking\n                    else:\n                        return 8  # Move right blocking\n                else:\n                    return 3  # Jump to reset\n            else:\n                # Quick counterattack\n                if random.random() < 0.4:\n                    return 4  # Safe punch\n                else:\n                    return 6  # Play defensive\n        \n        elif distance < medium_range:\n            # Careful spacing\n            if opponent_attacking or opp_velocity_x > 0.3:\n                return 6  # Block approaching attack\n            \n            # Zone control\n            if my_projectile_cooldown < 0.4:\n                return 9  # Projectile for space\n            \n            # Positioning\n            if abs(my_x_pos) > 0.6:  # Avoid corner\n                if my_x_pos > 0:\n                    return 1  # Move toward center\n                else:\n                    return 2  # Move toward center\n            else:\n                if distance > 0.25:\n                    return 6  # Patient blocking\n                else:\n                    return 4  # Quick poke\n        \n        else:\n            # Long range defensive\n            if my_projectile_cooldown < 0.3:\n                return 9  # Projectile to control space\n            else:\n                return 6  # Block and wait\n    \n    # Balanced neutral game strategy\n    else:\n        if distance < close_range:\n            # Close range mix-ups\n            if opponent_blocking:\n                action_roll = random.random()\n                if action_roll < 0.25:\n                    return 5  # Kick to break guard\n                elif action_roll < 0.45:\n                    return 3  # Jump for timing mix\n                elif action_roll < 0.7:\n                    return 4  # Fast punch\n                else:\n                    return 6  # Block and reset\n            \n            elif opponent_attacking:\n                counter_roll = random.random()\n                if counter_roll < 0.6:\n                    return 6  # Block then counter\n                elif counter_roll < 0.8:\n                    return 4  # Trade with punch\n                else:\n                    return 3  # Jump over attack\n            \n            else:\n                # Neutral close game\n                if random.random() < 0.5:\n                    return 4  # Punch pressure\n                else:\n                    return 5  # Kick threat\n        \n        elif distance < medium_range:\n            # Medium range footsies\n            if opponent_airborne:\n                return 4  # Anti-air punch\n            \n            if my_projectile_cooldown < 0.4 and random.random() < 0.3:\n                return 9  # Occasional projectile\n            \n            # Movement game\n            movement_decision = random.random()\n            if movement_decision < 0.3:\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            elif movement_decision < 0.5:\n                return 4  # Poke with punch\n            elif movement_decision < 0.7:\n                return 6  # Block and observe\n            else:\n                return 3",
      "fighting_style": "balanced",
      "creation_time": 1748763419.260828,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_elite_002",
      "generation": 2,
      "fitness": 211.00333333333333,
      "win_rate": 0.5,
      "avg_reward": 301.43333333333334,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity = state[3]\n    opponent_velocity = state[14]\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Enhanced tactical parameters for improved hit-and-run\n    strike_range = 0.14\n    danger_zone = 0.20\n    medium_range = 0.35\n    safe_projectile_range = 0.50\n    critical_health = 0.25\n    winning_margin = 0.25\n    retreat_health_threshold = -0.35\n    \n    # Track momentum and create unpredictability\n    momentum_factor = abs(my_velocity) + abs(opponent_velocity)\n    unpredictability = random.random()\n    \n    # Critical health emergency protocol\n    if my_health < critical_health or health_advantage < retreat_health_threshold:\n        if distance < danger_zone:\n            # Emergency retreat with maximum protection\n            if opponent_attack_status > 0.3:\n                # Opponent attacking - defensive retreat\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                # Quick escape\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n        elif distance < safe_projectile_range and projectile_cooldown < 0.15:\n            return 9  # Keep distance with projectile\n        else:\n            # Defensive positioning\n            if unpredictability < 0.4:\n                return 6  # Block\n            elif unpredictability < 0.7:\n                return 3  # Jump for evasion\n            else:\n                return 0  # Wait for opportunity\n    \n    # Aggressive finishing when opponent is vulnerable\n    if health_advantage > winning_margin and opponent_health < 0.35:\n        if distance < strike_range:\n            # Finishing combinations\n            if opponent_block_status < 0.2:\n                finish_choice = unpredictability\n                if finish_choice < 0.5:\n                    return 5  # Powerful kick\n                elif finish_choice < 0.8:\n                    return 4  # Quick punch\n                else:\n                    # Feint retreat then counter\n                    if relative_pos > 0:\n                        return 1  # Move away briefly\n                    else:\n                        return 2  # Move away briefly\n            else:\n                # Opponent blocking - reposition\n                if relative_pos > 0:\n                    return 2  # Circle right\n                else:\n                    return 1  # Circle left\n        elif distance < medium_range:\n            # Aggressive approach for finish\n            if opponent_projectile_cooldown > 0.4:\n                if relative_pos > 0:\n                    return 2  # Move in\n                else:\n                    return 1  # Move in\n            elif projectile_cooldown < 0.1:\n                return 9  # Projectile pressure\n    \n    # Core hit-and-run strategy - refined\n    if distance < strike_range:\n        # In striking range - hit or run decision\n        if my_attack_status > 0.3:\n            # Currently attacking - prepare immediate retreat\n            retreat_direction = random.random()\n            if retreat_direction < 0.6:\n                # Direct retreat\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n            else:\n                # Protected retreat\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        # Evaluate strike opportunity\n        if opponent_block_status > 0.4:\n            # Opponent blocking - avoid engagement\n            evasion_choice = unpredictability\n            if evasion_choice < 0.4:\n                # Quick retreat\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            elif evasion_choice < 0.7:\n                # Jump over/away\n                return 3  # Jump\n            else:\n                # Protected withdrawal\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        # Strike opportunity available\n        if opponent_attack_status > 0.5:\n            # Opponent attacking - counter or evade\n            if health_advantage > 0 and unpredictability < 0.4:\n                # Counter attack\n                return 4  # Quick punch counter\n            else:\n                # Evasive maneuver\n                if unpredictability < 0.5:\n                    return 3  # Jump\n                else:\n                    if relative_pos > 0:\n                        return 7  # Move left with block\n                    else:\n                        return 8  # Move right with block\n        \n        # Clean strike opportunity\n        strike_decision = unpredictability\n        if strike_decision < 0.45:\n            return 4  # Fast punch for hit-and-run\n        elif strike_decision < 0.7:\n            return 5  # Kick for damage\n        elif strike_decision < 0.85:\n            # Feint - no strike, immediate retreat\n            if relative_pos > 0:\n                return 1  # Move away\n            else:\n                return 2  # Move away\n        else:\n            # Mix up with jump\n            return 3  # Jump attack/evasion\n    \n    elif distance < danger_zone:\n        # Danger zone - prioritize repositioning\n        threat_assessment = opponent_attack_status + (1.0 - opponent_projectile_cooldown)\n        \n        if threat_assessment > 0.6:\n            # High threat - defensive movement\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n        \n        # Standard retreat from danger zone\n        retreat_style = unpredictability\n        if retreat_style < 0.5:\n            # Direct retreat\n            if relative_pos > 0:\n                return 1  # Move left\n            else:\n                return 2  # Move right\n        elif retreat_style < 0.75:\n            # Jump retreat\n            return 3  # Jump away\n        else:\n            # Protected retreat\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n    \n    elif distance < medium_range:\n        # Medium range - tactical positioning\n        # Assess opponent patterns and vulnerabilities\n        opponent_vulnerable = (opponent_attack_status > 0.4 or \n                             opponent_projectile_cooldown > 0.4 or\n                             momentum_factor > 0.5)\n        \n        if opponent_vulnerable and health_advantage > -0.15:\n            # Setup for hit-and-run approach\n            approach_style = unpredictability\n            if approach_style < 0.3:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2  # Move right",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978359,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_007",
      "generation": 2,
      "fitness": 209.09999999999476,
      "win_rate": 0.0,
      "avg_reward": 209.09999999999476,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information with defensive bounds\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = max(0.0, min(1.0, state[0]))\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = max(0.0, state[10]) if len(state) > 10 else 1.0\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_pos = max(0.0, min(1.0, state[11]))\n    opp_y_pos = state[12]\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    opp_projectile_cd = max(0.0, state[21]) if len(state) > 21 else 1.0\n    \n    # Enhanced tactical parameters for evolved hybrid style\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.2\n    winning_edge = 0.2\n    losing_edge = -0.2\n    wall_threshold = 0.12\n    \n    # Dynamic aggression calculation with momentum consideration\n    base_aggression = 0.55\n    health_ratio = my_health / max(0.1, opp_health)\n    momentum_factor = 0.0\n    \n    # Calculate momentum based on recent position changes\n    if abs(my_x_vel) > 0.3:\n        momentum_factor = 0.1 if my_x_vel * relative_pos > 0 else -0.1\n    \n    # Adaptive aggression based on multiple factors\n    if health_advantage > winning_edge:\n        dynamic_aggression = min(0.8, base_aggression + 0.2 + momentum_factor)\n    elif health_advantage < losing_edge:\n        dynamic_aggression = max(0.3, base_aggression - 0.2 + momentum_factor)\n    else:\n        dynamic_aggression = base_aggression + momentum_factor\n    \n    # Wall awareness for positioning\n    near_left_wall = my_x_pos < wall_threshold\n    near_right_wall = my_x_pos > (1.0 - wall_threshold)\n    opp_near_left_wall = opp_x_pos < wall_threshold\n    opp_near_right_wall = opp_x_pos > (1.0 - wall_threshold)\n    \n    # Movement prediction for better timing\n    predicted_distance = distance\n    if abs(opp_x_vel) > 0.2:\n        velocity_factor = opp_x_vel * 0.1\n        if opp_x_vel * relative_pos < 0:  # Opponent moving toward us\n            predicted_distance = max(0.0, distance - abs(velocity_factor))\n        else:  # Opponent moving away\n            predicted_distance = min(1.0, distance + abs(velocity_factor))\n    \n    # Cannot act while stunned\n    if my_stunned > 0.5:\n        return 0\n    \n    # Enhanced emergency defensive mode\n    if my_health < critical_health and health_advantage < -0.4:\n        if opp_attacking > 0.5 and distance < close_range:\n            return 6  # Emergency block\n        elif distance > medium_range and my_projectile_cd < 0.15:\n            return 9  # Desperation projectile\n        elif distance < medium_range:\n            # Intelligent escape considering walls and opponent position\n            if near_left_wall and relative_pos < 0:\n                return 8  # Must go right\n            elif near_right_wall and relative_pos > 0:\n                return 7  # Must go left\n            elif opp_x_vel > 0.3 and relative_pos > 0:  # Opponent chasing from left\n                return 8  # Move right with block\n            elif opp_x_vel < -0.3 and relative_pos < 0:  # Opponent chasing from right\n                return 7  # Move left with block\n            else:\n                return 6  # Block if unsure\n        else:\n            return 6  # Default defensive stance\n    \n    # Enhanced stunned opponent exploitation\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            # Optimized combo based on position and health\n            if health_advantage < 0:  # Need quick damage\n                return 5  # Kick for maximum damage\n            else:\n                combo_roll = random.random()\n                if combo_roll < 0.4:\n                    return 5  # Kick\n                elif combo_roll < 0.7:\n                    return 4  # Punch\n                else:\n                    return 3  # Jump attack for style points\n        elif distance < medium_range:\n            # Smart approach considering opponent recovery time\n            if abs(height_diff) > 0.3:\n                return 3  # Jump to match height\n            elif relative_pos > 0.15:\n                return 2  # Move right\n            elif relative_pos < -0.15:\n                return 1  # Move left\n            else:\n                return 4  # Attack if close enough\n        else:\n            if my_projectile_cd < 0.2:\n                return 9  # Free projectile\n            else:\n                return 1 if relative_pos < 0 else 2  # Approach quickly\n    \n    # Close range combat - evolved hybrid tactics\n    if distance < close_range:\n        # Enhanced guard break against blocking opponent\n        if opp_blocking > 0.5:\n            guard_break_roll = random.random()\n            if guard_break_roll < 0.2:\n                return 5  # Heavy kick to break guard\n            elif guard_break_roll < 0.35:\n                return 3  # Jump for angle change\n            elif guard_break_roll < 0.55:\n                # Positioning for better angle\n                if not near_right_wall and relative_pos < -0.1:\n                    return 2  # Flank right\n                elif not near_left_wall and relative_pos > 0.1:\n                    return 1  # Flank left\n                else:\n                    return 4  # Quick punch\n            elif guard_break_roll < 0.75:\n                return 4  # Quick punch to probe\n            else:\n                # Tactical retreat and re-engage\n                if my_x_pos > 0.5:\n                    return 7  # Retreat left with block\n                else:\n                    return 8  # Retreat right with block\n        \n        # Counter-attack optimization against attacking opponent\n        elif opp_attacking > 0.5:\n            if health_advantage < losing_edge:\n                return 6  # Prioritize defense when losing\n            else:\n                counter_roll = random.random()\n                if counter_roll < 0.45:\n                    return 6  # Block first\n                elif counter_roll < 0.7:\n                    return 4  # Quick counter",
      "fighting_style": "evolved",
      "creation_time": 1748769390.9783611,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_elite_001",
      "generation": 1,
      "fitness": 208.01319999999743,
      "win_rate": 0.5,
      "avg_reward": 267.03999999999536,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Define tactical parameters for hit-and-run style\n    close_range = 0.12\n    medium_range = 0.28\n    safe_range = 0.45\n    retreat_threshold = 0.18\n    health_panic_threshold = -0.4\n    winning_threshold = 0.3\n    \n    # Emergency defensive behavior when health is critical\n    if my_health < 0.2 or health_advantage < health_panic_threshold:\n        if distance < retreat_threshold:\n            # Immediate retreat with blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < safe_range and projectile_cooldown < 0.1:\n            return 9  # Projectile to keep opponent away\n        else:\n            return 6  # Block and wait for opportunity\n    \n    # Opportunistic behavior when winning significantly\n    if health_advantage > winning_threshold and opponent_health < 0.3:\n        if distance < close_range:\n            # Quick strike then prepare to retreat\n            if random.random() < 0.7:\n                return 4  # Fast punch\n            else:\n                return 5  # Stronger kick\n        elif distance < medium_range:\n            # Move in for finishing blow\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n    \n    # Hit-and-run core strategy implementation\n    if distance < close_range:\n        # In close range - strike or retreat decision\n        if opponent_block_status > 0.5:\n            # Opponent is blocking, retreat immediately\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n        \n        # Opponent not blocking - quick strike opportunity\n        if my_attack_status < 0.1:  # Not currently attacking\n            strike_choice = random.random()\n            if strike_choice < 0.6:\n                return 4  # Quick punch for hit-and-run\n            elif strike_choice < 0.85:\n                return 5  # Kick for more damage\n            else:\n                # Immediate retreat without striking\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n        else:\n            # Currently attacking, prepare retreat\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n    \n    elif distance < retreat_threshold:\n        # Just outside close range - critical retreat zone\n        retreat_urgency = random.random()\n        \n        if opponent_attack_status > 0.5:\n            # Opponent is attacking, defensive retreat\n            if relative_pos > 0:\n                return 7  # Move left with block\n            else:\n                return 8  # Move right with block\n        \n        if retreat_urgency < 0.7:\n            # Standard retreat\n            if relative_pos > 0:\n                return 1  # Move left away\n            else:\n                return 2  # Move right away\n        else:\n            # Retreat with protection\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    elif distance < medium_range:\n        # Medium range - positioning and opportunity assessment\n        opponent_vulnerable = opponent_attack_status > 0.5 or opponent_projectile_cooldown > 0.3\n        \n        if opponent_vulnerable and health_advantage > -0.2:\n            # Move in for hit-and-run attack\n            approach_method = random.random()\n            if approach_method < 0.6:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Cautious approach with blocking\n                if relative_pos > 0:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block\n        \n        # Maintain distance or use projectile\n        if projectile_cooldown < 0.1 and random.random() < 0.4:\n            return 9  # Projectile attack\n        \n        # Lateral movement for positioning\n        movement_pattern = random.random()\n        if movement_pattern < 0.3:\n            return 1  # Move left\n        elif movement_pattern < 0.6:\n            return 2  # Move right\n        else:\n            return 0  # Wait and observe\n    \n    elif distance < safe_range:\n        # Preferred hit-and-run range - projectile and positioning\n        if projectile_cooldown < 0.1:\n            projectile_decision = random.random()\n            \n            # More aggressive projectile use when winning\n            projectile_threshold = 0.7 if health_advantage > 0 else 0.5\n            \n            if projectile_decision < projectile_threshold:\n                return 9  # Projectile attack\n        \n        # Setup for approach or maintain position\n        if opponent_projectile_cooldown > 0.2 and health_advantage > -0.1:\n            # Opponent can't counter-projectile, consider approach\n            if random.random() < 0.3:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n        \n        # Default positioning behavior\n        positioning_choice = random.random()\n        if positioning_choice < 0.25:\n            return 1  # Move left\n        elif positioning_choice < 0.5:\n            return 2  # Move right\n        elif positioning_choice < 0.65:\n            return 3  # Jump for unpredictability\n        else:\n            return 0  # Idle observation\n    \n    else:\n        # Long range - projectile focused with setup\n        if projectile_cooldown < 0.1:\n            # High probability projectile use at long range\n            if random.random() < 0.8:\n                return 9  # Projectile attack\n        \n        # Close distance gradually for hit-and-run setup\n        if opponent_projectile_cooldown > 0.3:\n            # Safe to approach\n            approach_choice = random.random()\n            if approach_choice < 0.4:\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            elif approach_choice < 0.6:\n                return 3  # Jump approach\n        \n        # Long range positioning\n        long_range_action = random.random()\n        if long_range_action < 0.3:\n            return 1  # Move left\n        elif long_range_action < 0.6:\n            return 2  # Move right\n        elif long_range_action < 0.75:\n            return 3  # Jump\n        else:\n            return 0  # Wait\n    \n    # Fallback",
      "fighting_style": "hit_and_run",
      "creation_time": 1748766291.371422,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_020",
      "generation": 4,
      "fitness": 205.05999999999017,
      "win_rate": 0.0,
      "avg_reward": 205.05999999999017,
      "code": "def get_action(state):\n    import random\n    import math\n    import numpy as np\n    \n    # Extract and validate key state information with defensive bounds\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information with bounds checking\n    my_x_pos = max(-1.0, min(1.0, state[0]))\n    my_y_pos = state[1]\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = max(0.0, min(1.0, state[5]))\n    my_blocking = max(0.0, min(1.0, state[6]))\n    my_stunned = max(0.0, state[7]) if len(state) > 7 else 0.0\n    my_projectile_cd = max(0.0, state[10]) if len(state) > 10 else 0.0\n    \n    # Extract opponent information with bounds checking\n    opp_x_pos = max(-1.0, min(1.0, state[11]))\n    opp_y_pos = state[12]\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = max(0.0, min(1.0, state[16]))\n    opp_blocking = max(0.0, min(1.0, state[17]))\n    opp_stunned = max(0.0, state[18]) if len(state) > 18 else 0.0\n    \n    # Enhanced tactical range definitions for hybrid fighting\n    danger_zone = 0.06\n    point_blank = 0.10\n    ultra_close = 0.14\n    close_range = 0.20\n    medium_close = 0.30\n    medium_range = 0.42\n    medium_far = 0.58\n    far_range = 0.75\n    \n    # Positioning analysis for stage control\n    left_wall_proximity = my_x_pos < -0.65\n    right_wall_proximity = my_x_pos > 0.65\n    in_corner = left_wall_proximity or right_wall_proximity\n    center_control = abs(my_x_pos) < 0.3\n    \n    opp_left_corner = opp_x_pos < -0.65\n    opp_right_corner = opp_x_pos > 0.65\n    opp_cornered = opp_left_corner or opp_right_corner\n    \n    # Movement and velocity analysis\n    my_moving_fast = abs(my_x_vel) > 0.15\n    opp_moving_fast = abs(opp_x_vel) > 0.15\n    \n    # Opponent pattern recognition\n    opp_rushing = False\n    opp_retreating = False\n    opp_circling = False\n    \n    if opp_moving_fast:\n        if (relative_pos > 0 and opp_x_vel < -0.15) or (relative_pos < 0 and opp_x_vel > 0.15):\n            opp_rushing = True\n        elif (relative_pos > 0 and opp_x_vel > 0.15) or (relative_pos < 0 and opp_x_vel < -0.15):\n            opp_retreating = True\n        else:\n            opp_circling = True\n    \n    # Aerial combat assessment\n    opp_airborne = abs(opp_y_vel) > 0.1 or abs(height_diff) > 0.2\n    my_airborne = abs(my_y_vel) > 0.1\n    opp_landing_soon = opp_airborne and opp_y_vel > 0.08\n    \n    # Projectile status and timing\n    projectile_ready = my_projectile_cd < 0.08\n    projectile_charging = my_projectile_cd < 0.25\n    opp_projectile_threat = len(state) > 21 and state[21] < 0.12\n    \n    # Dynamic hybrid aggression system\n    base_aggression = 0.62  # Balanced baseline\n    aggression_modifier = 1.0\n    \n    # Health-based aggression adjustment\n    health_ratio = my_health / max(0.05, opp_health)\n    \n    if health_advantage > 0.6:\n        aggression_modifier = 1.55  # Press advantage hard\n    elif health_advantage > 0.3:\n        aggression_modifier = 1.25  # Solid pressure\n    elif health_advantage > 0.1:\n        aggression_modifier = 1.1   # Slight pressure\n    elif health_advantage > -0.1:\n        aggression_modifier = 0.95  # Neutral play\n    elif health_advantage > -0.3:\n        aggression_modifier = 0.75  # Cautious approach\n    elif health_advantage > -0.6:\n        aggression_modifier = 0.55  # Defensive focus\n    else:\n        aggression_modifier = 0.35  # Survival mode\n    \n    # Distance-based aggression scaling\n    if distance < close_range:\n        aggression_modifier *= 1.2  # Reward close combat\n    elif distance > medium_far:\n        aggression_modifier *= 0.85  # Cautious at long range\n    \n    # Opponent state modifiers\n    if opp_stunned > 0.3:\n        aggression_modifier *= 1.8  # Exploit vulnerability\n    elif opp_attacking > 0.7:\n        aggression_modifier *= 0.7  # Respect opponent offense\n    elif opp_blocking > 0.7:\n        aggression_modifier *= 1.15  # Pressure blocking opponent\n    \n    current_aggression = max(0.15, min(1.0, base_aggression * aggression_modifier))\n    \n    # Emergency state handling\n    if my_stunned > 0.5:\n        return 0  # Recover from stun\n    \n    # Critical health management (below 20%)\n    if my_health < 0.2:\n        # Emergency defense against incoming attacks\n        if opp_attacking > 0.6 and distance < medium_range:\n            if distance < close_range:\n                # Close range emergency escape\n                if in_corner:\n                    if left_wall_proximity and relative_pos >= 0:\n                        return 3 if random.random() < 0.4 else 8  # Jump or retreat right\n                    elif right_wall_proximity and relative_pos <= 0:\n                        return 3 if random.random() < 0.4 else 7  # Jump or retreat left\n                    else:\n                        return 6  # Block when truly cornered\n                else:\n                    # Open stage emergency retreat\n                    escape_roll = random.random()\n                    if escape_roll < 0.5:\n                        return 7 if relative_pos > 0 else 8  # Block retreat\n                    elif escape_roll < 0.75:\n                        return 3  # Jump escape\n                    else:\n                        return 6  # Stand and block\n            else:\n                return 6  # Block at medium range\n        \n        # Desperation offense when opponent also critical\n        if opp_health < 0.25 and distance < close_range:\n            if opp_attacking < 0.3 and opp_stunned < 0.2:\n                # Both critical - calculated aggression\n                if random.random() < 0.65:\n                    return 5  #",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904286,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_008",
      "generation": 0,
      "fitness": 204.93866666666378,
      "win_rate": 0.5,
      "avg_reward": 281.3266666666623,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_attack_status = state[6]\n    opponent_attack_status = state[17]\n    my_block_status = state[7]\n    opponent_block_status = state[18]\n    my_projectile_cooldown = max(0.0, state[10])\n    opponent_projectile_cooldown = max(0.0, state[21])\n    height_difference = state[24]\n    \n    # Define pressure fighter constants\n    close_range_threshold = 0.15\n    medium_range_threshold = 0.35\n    aggression_threshold = 0.8\n    corner_pressure_distance = 0.4\n    health_desperation_threshold = -0.4\n    winning_threshold = 0.3\n    \n    # Calculate aggression level based on health and style\n    base_aggression = 0.75  # High base aggression for pressure fighter\n    health_modifier = health_advantage * 0.2\n    aggression_level = min(1.0, max(0.3, base_aggression + health_modifier))\n    \n    # Emergency defensive behavior when critically low health\n    if health_advantage < health_desperation_threshold and my_health < 0.25:\n        if distance < close_range_threshold and opponent_attack_status > 0:\n            return 6  # Block incoming attacks\n        elif distance > medium_range_threshold and my_projectile_cooldown <= 0:\n            return 9  # Projectile to create space\n        elif relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Pressure fighter core strategy - maintain close range aggression\n    if distance > medium_range_threshold:\n        # Too far - need to close distance aggressively\n        if my_projectile_cooldown <= 0 and random.random() < 0.3:\n            return 9  # Occasional projectile while closing\n        elif relative_pos > 0.1:\n            # Opponent to the right\n            if opponent_projectile_cooldown <= 0 and random.random() < 0.4:\n                return 8  # Move right with block against projectile\n            else:\n                return 2  # Move right aggressively\n        elif relative_pos < -0.1:\n            # Opponent to the left\n            if opponent_projectile_cooldown <= 0 and random.random() < 0.4:\n                return 7  # Move left with block against projectile\n            else:\n                return 1  # Move left aggressively\n        else:\n            # Opponent centered, choose random approach\n            if random.random() < 0.5:\n                return 1\n            else:\n                return 2\n    \n    elif distance > close_range_threshold:\n        # Medium range - perfect for pressure fighter setup\n        if abs(height_difference) > 0.3:\n            return 3  # Jump to adjust height for better positioning\n        \n        # Check if opponent is blocking frequently\n        if opponent_block_status > 0:\n            if random.random() < 0.6:\n                # Try to grab or throw - use kick for more power\n                return 5  # Kick to break block\n            else:\n                # Position for better angle\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        # Approach with aggression\n        if aggression_level > aggression_threshold:\n            if relative_pos > 0.05:\n                return 2  # Close distance to right\n            elif relative_pos < -0.05:\n                return 1  # Close distance to left\n            else:\n                # Close enough to start pressure\n                if random.random() < 0.7:\n                    return 4  # Quick punch to start combo\n                else:\n                    return 5  # Power kick\n        else:\n            # More cautious approach when not fully aggressive\n            if opponent_attack_status > 0:\n                return 6  # Block incoming attack\n            elif relative_pos > 0:\n                return 8  # Cautious advance right\n            else:\n                return 7  # Cautious advance left\n    \n    else:\n        # Close range - pressure fighter's domain\n        \n        # Counter opponent's attacks\n        if opponent_attack_status > 0:\n            if health_advantage < -0.2:\n                return 6  # Block when behind in health\n            elif random.random() < 0.4:\n                return 6  # Sometimes block to mix up defense\n            else:\n                # Counter attack with speed\n                if random.random() < 0.8:\n                    return 4  # Fast punch counter\n                else:\n                    return 5  # Power kick counter\n        \n        # Pressure when opponent is blocking\n        if opponent_block_status > 0:\n            if random.random() < 0.3:\n                # Try to reposition for better angle\n                if relative_pos > 0:\n                    return 1  # Move to left side\n                else:\n                    return 2  # Move to right side\n            elif random.random() < 0.6:\n                return 5  # Power kick to break block\n            else:\n                return 4  # Quick punch to maintain pressure\n        \n        # Apply maximum pressure when opponent is vulnerable\n        if opponent_attack_status <= 0 and opponent_block_status <= 0:\n            # Opponent is open - full aggression\n            attack_choice = random.random()\n            \n            if attack_choice < 0.5:\n                return 4  # Fast punch for combo potential\n            elif attack_choice < 0.8:\n                return 5  # Power kick for damage\n            else:\n                # Mix in movement to avoid becoming predictable\n                if relative_pos > 0.1:\n                    return 1  # Adjust position left\n                elif relative_pos < -0.1:\n                    return 2  # Adjust position right\n                else:\n                    return 4  # Default to punch\n        \n        # When winning significantly, maintain pressure but be smarter\n        if health_advantage > winning_threshold:\n            if random.random() < 0.6:\n                return 4  # Continue pressure with punches\n            elif random.random() < 0.8:\n                return 5  # Power kick\n            else:\n                return 6  # Occasional block to stay safe\n        \n        # When losing, take more risks for damage\n        if health_advantage < -0.2:\n            if random.random() < 0.7:\n                return 5  # More power kicks when desperate\n            else:\n                return 4  # Quick punches\n        \n        # Default close range pressure\n        combo_choice = random.random()\n        if combo_choice < 0.6:\n            return 4  # Punch - fast and combo-friendly\n        elif combo_choice < 0.85:\n            return 5  # Kick - more damage\n        else:\n            # Occasional defensive move to reset\n            return 6  # Block to reset pressure\n    \n    # Fallback action - should rarely reach here\n    if distance > close_range_threshold:\n        if relative_pos > 0:\n            return 2  # Move toward opponent\n        else:\n            return 1  # Move toward opponent\n    else:\n        return 4  # Default attack",
      "fighting_style": "pressure_fighter",
      "creation_time": 1748763419.260829,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_020",
      "generation": 2,
      "fitness": 201.7893333333309,
      "win_rate": 0.5,
      "avg_reward": 241.51333333332573,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract comprehensive fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    my_velocity_x = state[7] if len(state) > 7 else 0\n    opponent_velocity_x = state[18] if len(state) > 18 else 0\n    \n    # Combat state analysis\n    my_attack_status = state[4] if len(state) > 4 else 0\n    opponent_attack_status = state[15] if len(state) > 15 else 0\n    my_block_status = state[5] if len(state) > 5 else 0\n    opponent_block_status = state[16] if len(state) > 16 else 0\n    \n    # Projectile and movement tracking\n    my_projectile_cooldown = max(0.0, state[6] if len(state) > 6 else 0)\n    opponent_projectile_cooldown = max(0.0, state[17] if len(state) > 17 else 0)\n    height_diff = state[24] if len(state) > 24 else 0\n    \n    # Advanced tactical ranges with overlap zones\n    immediate_danger = 0.06\n    close_combat = 0.14\n    transition_zone = 0.22\n    medium_range = 0.35\n    projectile_optimal = 0.50\n    max_effective = 0.70\n    \n    # Health state thresholds\n    critical_health = 0.12\n    low_health = 0.28\n    moderate_health = 0.55\n    high_health = 0.80\n    \n    # Stage position awareness\n    stage_left_edge = -0.85\n    stage_right_edge = 0.85\n    left_corner_zone = -0.65\n    right_corner_zone = 0.65\n    \n    my_near_left_wall = my_position < left_corner_zone\n    my_near_right_wall = my_position > right_corner_zone\n    opponent_cornered = opponent_position < left_corner_zone or opponent_position > right_corner_zone\n    \n    # Frame data and timing analysis\n    projectile_ready = my_projectile_cooldown < 0.05\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.15\n    \n    # Movement prediction system\n    opponent_advancing = False\n    if relative_pos > 0 and opponent_velocity_x > 0.08:\n        opponent_advancing = True\n    elif relative_pos < 0 and opponent_velocity_x < -0.08:\n        opponent_advancing = True\n    \n    # Combat tempo analysis\n    frame_advantage = 0\n    if my_attack_status > 0.3 and opponent_attack_status < 0.2:\n        frame_advantage = 1\n    elif opponent_attack_status > 0.3 and my_attack_status < 0.2:\n        frame_advantage = -1\n    \n    # Dynamic aggression calculation\n    base_aggression = 0.52\n    health_modifier = health_advantage * 0.25\n    distance_modifier = max(0, (medium_range - distance) * 0.3)\n    current_aggression = max(0.15, min(0.85, base_aggression + health_modifier + distance_modifier))\n    \n    # Emergency survival protocols\n    if my_health <= critical_health:\n        if distance < close_combat and opponent_attack_status > 0.2:\n            return 6  # Emergency defensive block\n        \n        if distance < transition_zone:\n            # Desperate escape with blocking movement\n            if opponent_advancing:\n                if relative_pos > 0 and not my_near_left_wall:\n                    return 7  # Block retreat left\n                elif not my_near_right_wall:\n                    return 8  # Block retreat right\n                else:\n                    return 6  # Block in place if trapped\n            else:\n                # Create separation distance\n                if relative_pos > 0 and not my_near_left_wall:\n                    return 1  # Move away left\n                elif not my_near_right_wall:\n                    return 2  # Move away right\n                else:\n                    return 6  # Block\n        \n        # Desperation projectile zoning\n        if projectile_ready and distance > close_combat:\n            return 9\n        \n        # Last resort blocking\n        return 6\n    \n    # Dominant finishing sequence\n    if health_advantage > 0.4 and opponent_health < 0.3:\n        if distance < close_combat:\n            if opponent_block_status > 0.3:\n                # Guard break tactics\n                break_choice = random.random()\n                if break_choice < 0.35:\n                    return 5  # Power kick to break guard\n                elif break_choice < 0.6:\n                    # Reset spacing for better angle\n                    if relative_pos > 0:\n                        return 1\n                    else:\n                        return 2\n                else:\n                    return 4  # Quick punch mix-up\n            else:\n                # Finishing combo opportunity\n                finish_choice = random.random()\n                if finish_choice < 0.45:\n                    return 4  # Fast punch\n                elif finish_choice < 0.75:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Stay ready for counter\n        \n        elif distance < medium_range:\n            # Aggressive closing for finish\n            if relative_pos > 0:\n                return 2  # Close distance right\n            else:\n                return 1  # Close distance left\n        \n        else:\n            # Long range pressure to force approach\n            if projectile_ready:\n                return 9\n            else:\n                # Advance while projectile recharges\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Anti-air response system\n    if height_diff < -0.25:\n        if distance < medium_range:\n            if projectile_ready and distance > close_combat:\n                return 9  # Projectile anti-air\n            elif distance < transition_zone:\n                return 4  # Quick anti-air punch\n            else:\n                # Reposition for better anti-air angle\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n    \n    # Opponent attack response matrix\n    if opponent_attack_status > 0.2:\n        if distance < medium_range:\n            if frame_advantage >= 0 and distance < close_combat:\n                # Counter-attack window\n                counter_aggression = current_aggression * 0.8\n                counter_choice = random.random()\n                if counter_choice < counter_aggression * 0.5:\n                    return 4  # Quick counter\n                elif counter_choice < counter_aggression * 0.75:\n                    return 5  # Power counter\n                else:\n                    return 6  # Safe block\n            else:\n                # Defensive response based on health\n                if my_health <= low_health:\n                    return 6  # Priority block when low\n                else:\n                    # Evasive blocking\n                    if opponent_advancing:\n                        if relative_pos > 0 and not my_near_left_wall:\n                            return 7  # Block left\n                        elif not my_near_right_wall:\n                            return 8  # Block right\n                        else:\n                            return 6  # Block\n                    else:\n                        return 6  #",
      "fighting_style": "evolved",
      "creation_time": 1748769390.9783628,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_024",
      "generation": 2,
      "fitness": 195.95999999999103,
      "win_rate": 0.0,
      "avg_reward": 195.95999999999103,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity_x = state[4]\n    opponent_velocity_x = state[15]\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Enhanced tactical parameters for evolved hit-and-run\n    ultra_close_range = 0.08\n    close_range = 0.14\n    medium_range = 0.32\n    safe_range = 0.50\n    long_range = 0.70\n    \n    # Dynamic thresholds based on health state\n    critical_health = 0.15\n    low_health = 0.30\n    retreat_urgency_distance = 0.20\n    winning_aggression_threshold = 0.25\n    desperation_threshold = -0.5\n    \n    # Adaptive behavior state tracking\n    opponent_blocking_frequently = opponent_block_status > 0.4\n    opponent_attacking = opponent_attack_status > 0.3\n    safe_to_projectile = projectile_cooldown < 0.05\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.1\n    \n    # Emergency survival mode - critical health\n    if my_health < critical_health or health_advantage < desperation_threshold:\n        if distance < retreat_urgency_distance:\n            # Panic retreat with maximum protection\n            if opponent_attacking:\n                # Opponent is attacking, block while retreating\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                # Fast retreat without blocking for speed\n                if relative_pos > 0:\n                    return 1  # Move left fast\n                else:\n                    return 2  # Move right fast\n        \n        elif distance < safe_range:\n            if safe_to_projectile and not opponent_projectile_ready:\n                return 9  # Desperate projectile\n            else:\n                return 6  # Full defensive block\n        \n        else:\n            # Long range survival - projectile spam\n            if safe_to_projectile:\n                return 9  # Projectile attack\n            else:\n                # Maintain maximum distance\n                if relative_pos > 0:\n                    return 1  # Move away left\n                else:\n                    return 2  # Move away right\n    \n    # Aggressive finishing mode - significant health advantage\n    if health_advantage > winning_aggression_threshold and opponent_health < low_health:\n        if distance < ultra_close_range:\n            # Ultra close finishing moves\n            if opponent_blocking_frequently:\n                # Try to break guard or reposition\n                if random.random() < 0.4:\n                    return 5  # Strong kick to break block\n                else:\n                    # Quick repositioning strike\n                    return 4  # Fast punch\n            else:\n                # Go for knockout\n                finish_choice = random.random()\n                if finish_choice < 0.6:\n                    return 5  # Power kick\n                else:\n                    return 4  # Quick punch combo\n        \n        elif distance < close_range:\n            # Close in for finish\n            if opponent_attacking:\n                # Counter-attack opportunity\n                return 4  # Fast counter punch\n            else:\n                # Aggressive approach\n                if relative_pos > 0:\n                    return 2  # Move right aggressively\n                else:\n                    return 1  # Move left aggressively\n    \n    # Core hit-and-run strategy - ultra close range\n    if distance < ultra_close_range:\n        # Maximum danger zone - immediate action required\n        if opponent_blocking_frequently:\n            # Opponent blocking - immediate retreat\n            retreat_method = random.random()\n            if retreat_method < 0.6:\n                # Fast retreat\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n            else:\n                # Protected retreat\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        elif opponent_attacking:\n            # Opponent attacking - defensive counter or retreat\n            if my_attack_status < 0.1 and random.random() < 0.4:\n                return 4  # Quick counter punch\n            else:\n                # Defensive retreat\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n        \n        else:\n            # Open opponent - hit and run opportunity\n            if my_attack_status < 0.1:\n                # Can attack\n                strike_decision = random.random()\n                if strike_decision < 0.5:\n                    return 4  # Quick punch - fastest option\n                elif strike_decision < 0.75:\n                    return 5  # Kick for damage\n                else:\n                    # Fake out - retreat instead\n                    if relative_pos > 0:\n                        return 1  # Move left away\n                    else:\n                        return 2  # Move right away\n            else:\n                # Already attacked - must retreat\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n    \n    # Close range hit-and-run tactics\n    elif distance < close_range:\n        if opponent_attacking:\n            # Opponent attacking - evasive maneuvers\n            evasion_choice = random.random()\n            if evasion_choice < 0.3:\n                return 3  # Jump over attack\n            elif evasion_choice < 0.6:\n                # Retreat with block\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                # Fast retreat\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        \n        elif opponent_blocking_frequently:\n            # Opponent defensive - maintain distance or reposition\n            if random.random() < 0.7:\n                # Retreat to better range\n                if relative_pos > 0:\n                    return 1  # Move left away\n                else:\n                    return 2  # Move right away\n            else:\n                # Try jump attack approach\n                return 3  # Jump\n        \n        else:\n            # Neutral close range - hit and run decision\n            if my_attack_status < 0.1 and health_advantage > -0.3:\n                # Safe to attack\n                attack_choice = random.random()\n                if attack_choice < 0.55:\n                    return 4  # Quick punch\n                elif attack_choice < 0.75:\n                    return 5  # Kick\n                else:\n                    # Retreat instead for unpredictability\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            else:\n                # Retreat to safer distance\n                retreat_choice = random.random()\n                if retreat_choice < 0.8:\n                    if relative_pos > 0:\n                        return 1",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978364,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_023",
      "generation": 3,
      "fitness": 195.17999999999103,
      "win_rate": 0.0,
      "avg_reward": 195.17999999999103,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with defensive bounds checking\n    my_health = max(0.0, min(1.0, state[2] if len(state) > 2 else 1.0))\n    my_pos_x = state[0] if len(state) > 0 else 0.0\n    my_velocity_x = state[7] if len(state) > 7 else 0.0\n    my_velocity_y = state[8] if len(state) > 8 else 0.0\n    my_attack_status = state[4] if len(state) > 4 else 0.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_projectile_cooldown = max(0.0, state[6] if len(state) > 6 else 0.0)\n    \n    opponent_health = max(0.0, min(1.0, state[13] if len(state) > 13 else 1.0))\n    opponent_pos_x = state[11] if len(state) > 11 else 0.0\n    opponent_velocity_x = state[18] if len(state) > 18 else 0.0\n    opponent_velocity_y = state[19] if len(state) > 19 else 0.0\n    opponent_attack_status = state[15] if len(state) > 15 else 0.0\n    opponent_block_status = state[16] if len(state) > 16 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[17] if len(state) > 17 else 0.0)\n    \n    # Enhanced tactical range definitions\n    danger_zone = 0.05\n    point_blank = 0.08\n    ultra_close = 0.12\n    close_range = 0.18\n    medium_close = 0.26\n    medium_range = 0.38\n    medium_far = 0.55\n    far_range = 0.75\n    \n    # Advanced positioning analysis\n    left_corner_trap = my_pos_x < -0.75\n    right_corner_trap = my_pos_x > 0.75\n    opponent_cornered_left = opponent_pos_x < -0.75\n    opponent_cornered_right = opponent_pos_x > 0.75\n    center_control = abs(my_pos_x) < 0.25\n    \n    # Movement pattern recognition\n    opponent_rushing = False\n    opponent_retreating = False\n    opponent_circling = False\n    \n    if abs(opponent_velocity_x) > 0.2:\n        if (relative_pos > 0 and opponent_velocity_x < -0.2) or (relative_pos < 0 and opponent_velocity_x > 0.2):\n            opponent_rushing = True\n        elif (relative_pos > 0 and opponent_velocity_x > 0.2) or (relative_pos < 0 and opponent_velocity_x < -0.2):\n            opponent_retreating = True\n        else:\n            opponent_circling = True\n    \n    # Aerial status assessment\n    opponent_airborne = abs(opponent_velocity_y) > 0.08 or height_diff < -0.15\n    my_airborne = abs(my_velocity_y) > 0.08\n    opponent_landing = opponent_airborne and opponent_velocity_y > 0.05\n    \n    # Projectile timing analysis\n    projectile_ready = my_projectile_cooldown < 0.05\n    projectile_charging = my_projectile_cooldown < 0.2\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.1\n    \n    # Dynamic aggression calculation\n    base_aggression = 0.68\n    situation_modifier = 1.0\n    \n    # Health-based modifier\n    if health_advantage > 0.5:\n        situation_modifier *= 1.4  # Dominating\n    elif health_advantage > 0.25:\n        situation_modifier *= 1.2  # Winning solidly\n    elif health_advantage > 0.0:\n        situation_modifier *= 1.05  # Slight advantage\n    elif health_advantage > -0.25:\n        situation_modifier *= 0.85  # Slight disadvantage\n    elif health_advantage > -0.5:\n        situation_modifier *= 0.65  # Losing\n    else:\n        situation_modifier *= 0.45  # Desperate\n    \n    # Distance modifier\n    if distance < close_range:\n        situation_modifier *= 1.15\n    elif distance > medium_far:\n        situation_modifier *= 0.9\n    \n    current_aggression = min(1.0, max(0.2, base_aggression * situation_modifier))\n    \n    # Critical health emergency protocols\n    if my_health < 0.15:\n        # Survival mode with calculated risks\n        if opponent_attack_status > 0.6 and distance < medium_range:\n            if distance < close_range:\n                # Escape with blocking movement\n                if left_corner_trap:\n                    if relative_pos < 0:\n                        return 3 if random.random() < 0.3 else 8\n                    else:\n                        return 6\n                elif right_corner_trap:\n                    if relative_pos > 0:\n                        return 3 if random.random() < 0.3 else 7\n                    else:\n                        return 6\n                else:\n                    # Standard defensive retreat\n                    return 7 if relative_pos > 0 else 8\n            else:\n                return 6  # Block at medium range\n        \n        # Desperate offense opportunity\n        if opponent_health < 0.2 and distance < close_range and opponent_attack_status < 0.3:\n            # Both critical - go for it\n            return 5 if random.random() < 0.7 else 4\n        \n        # Create space when possible\n        if distance < medium_range and not (left_corner_trap or right_corner_trap):\n            if projectile_ready and distance > ultra_close:\n                return 9\n            else:\n                return 7 if relative_pos > 0 else 8\n        \n        # Long range survival\n        if distance > medium_range:\n            if projectile_ready:\n                return 9\n            elif opponent_projectile_threat:\n                return 6\n            else:\n                return 0  # Stay at safe distance\n    \n    # Opponent vulnerability exploitation\n    if opponent_landing and distance < medium_close:\n        # Anti-air timing\n        if distance > ultra_close:\n            if projectile_ready:\n                return 9  # Projectile anti-air\n            else:\n                return 2 if relative_pos > 0 else 1  # Position for landing punish\n        else:\n            # Close range landing punish\n            return 5 if random.random() < 0.8 else 4\n    \n    # Enhanced opponent attack response system\n    if opponent_attack_status > 0.5:\n        threat_level = opponent_attack_status * (1.0 - distance)\n        \n        if threat_level > 0.4:  # High threat\n            if my_health < opponent_health * 0.75:\n                # Defensive priority when behind\n                if distance < ultra_close:\n                    return 6  # Pure block in danger zone\n                else:\n                    return 7 if relative_pos > 0 else 8  # Block retreat\n            else:\n                # Counter opportunities when ahead\n                counter_chance = random.random()",
      "fighting_style": "evolved",
      "creation_time": 1748772554.503267,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_021",
      "generation": 3,
      "fitness": 194.83999999999054,
      "win_rate": 0.0,
      "avg_reward": 194.83999999999054,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter state\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = state[0]\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[7]\n    my_blocking = state[8]\n    my_projectile_cooldown = max(0.0, state[9])\n    \n    # Extract opponent state\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_x_pos = state[11]\n    opponent_y_pos = state[12]\n    opponent_x_vel = state[14]\n    opponent_y_vel = state[15]\n    opponent_attacking = state[18]\n    opponent_blocking = state[19]\n    opponent_projectile_cooldown = max(0.0, state[20])\n    \n    # Advanced tactical parameters for evolved balanced fighter\n    close_range = 0.12\n    medium_range = 0.32\n    far_range = 0.48\n    critical_health_threshold = -0.45\n    dominance_threshold = 0.35\n    retreat_threshold = 0.16\n    \n    # Multi-layered aggression calculation\n    base_aggression = 0.52\n    health_momentum = 0.0\n    position_momentum = 0.0\n    tactical_momentum = 0.0\n    \n    # Health-based momentum with non-linear scaling\n    if health_advantage > 0.15:\n        health_momentum = min(0.35, health_advantage * 0.6 + 0.1)\n    elif health_advantage < -0.15:\n        health_momentum = max(-0.45, health_advantage * 0.8 - 0.05)\n    \n    # Position-based momentum considering stage control\n    stage_position = my_x_pos\n    if abs(stage_position) > 0.7:  # Near edge\n        position_momentum -= 0.15\n    elif abs(stage_position) < 0.3:  # Center control\n        position_momentum += 0.1\n    \n    # Tactical momentum based on projectile advantage\n    if my_projectile_cooldown < 0.25 and opponent_projectile_cooldown > 0.6:\n        tactical_momentum += 0.2\n    elif my_projectile_cooldown > 0.6 and opponent_projectile_cooldown < 0.25:\n        tactical_momentum -= 0.15\n    \n    current_aggression = max(0.05, min(0.9, \n        base_aggression + health_momentum + position_momentum + tactical_momentum))\n    \n    # Enhanced opponent behavior analysis with prediction\n    opponent_velocity_magnitude = abs(opponent_x_vel) + abs(opponent_y_vel)\n    opponent_moving_fast = opponent_velocity_magnitude > 0.06\n    \n    # Directional movement analysis\n    opponent_advancing = False\n    opponent_retreating = False\n    opponent_circling = False\n    \n    if relative_pos > 0 and opponent_x_vel > 0.03:\n        opponent_advancing = True\n    elif relative_pos < 0 and opponent_x_vel < -0.03:\n        opponent_advancing = True\n    elif relative_pos > 0 and opponent_x_vel < -0.03:\n        opponent_retreating = True\n    elif relative_pos < 0 and opponent_x_vel > 0.03:\n        opponent_retreating = True\n    elif opponent_moving_fast and not opponent_advancing and not opponent_retreating:\n        opponent_circling = True\n    \n    # Advanced opponent style classification\n    opponent_aggressive = opponent_attacking > 0.45 and distance < 0.3\n    opponent_defensive = opponent_blocking > 0.55 or (opponent_retreating and distance > 0.2)\n    opponent_zoner = opponent_projectile_cooldown < 0.3 and distance > 0.35\n    opponent_rusher = opponent_advancing and opponent_attacking > 0.3\n    opponent_turtle = opponent_blocking > 0.7 and opponent_velocity_magnitude < 0.02\n    \n    # Emergency survival mode\n    if my_health < 0.08 or health_advantage < -0.7:\n        if distance < retreat_threshold:\n            if opponent_attacking > 0.7:\n                return 6  # Emergency block\n            else:\n                # Panic retreat with defensive movement\n                if abs(my_x_pos) > 0.8:  # Near edge, need to fight\n                    return 6\n                else:\n                    if relative_pos > 0:\n                        return 7  # Retreat left with block\n                    else:\n                        return 8  # Retreat right with block\n        elif my_projectile_cooldown < 0.2 and distance > 0.3:\n            return 9  # Desperate projectile\n        else:\n            return 6  # Desperate blocking\n    \n    # Finishing sequence when opponent is critical\n    if opponent_health < 0.12 and health_advantage > 0.25:\n        if distance < close_range + 0.06:\n            # Execute finishing combo\n            finish_roll = random.random()\n            if opponent_blocking > 0.6:\n                if finish_roll < 0.4:\n                    return 5  # Guard break kick\n                elif finish_roll < 0.7:\n                    return 3  # Jump attack\n                else:\n                    return 9 if my_projectile_cooldown < 0.4 else 4\n            else:\n                if finish_roll < 0.5:\n                    return 5  # Power finish\n                else:\n                    return 4  # Speed finish\n        elif distance < medium_range:\n            # Close distance for kill\n            if relative_pos > 0:\n                return 2  # Approach right\n            else:\n                return 1  # Approach left\n        else:\n            # Projectile finish attempt\n            if my_projectile_cooldown < 0.3:\n                return 9\n    \n    # Close range combat with advanced tactics (0.0 - 0.12)\n    if distance < close_range:\n        # Counter-attack system with timing\n        if opponent_attacking > 0.65:\n            counter_timing = random.random()\n            if health_advantage > 0:\n                if counter_timing < 0.3:\n                    return 6  # Safe block\n                elif counter_timing < 0.6:\n                    return 4  # Counter punch\n                else:\n                    return 5  # Counter kick\n            else:\n                if counter_timing < 0.7:\n                    return 6  # Defensive block\n                else:\n                    return 4  # Desperate counter\n        \n        # Anti-turtle strategies\n        if opponent_turtle:\n            turtle_break = random.random()\n            if turtle_break < 0.25:\n                return 5  # Heavy kick\n            elif turtle_break < 0.4:\n                return 3  # Jump attack\n            elif turtle_break < 0.6:\n                # Create space then projectile\n                if relative_pos > 0:\n                    return 1  # Move away\n                else:\n                    return 2\n            elif turtle_break < 0.8:\n                return 9 if my_projectile_cooldown < 0.4 else 0\n            else:\n                return 6  # Reset with block\n        \n        # Pressure system against normal blocking\n        if opponent_blocking > 0.5 and not opponent_turtle:\n            pressure_",
      "fighting_style": "evolved",
      "creation_time": 1748772554.503268,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_025",
      "generation": 2,
      "fitness": 192.0199999999906,
      "win_rate": 0.0,
      "avg_reward": 192.0199999999906,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24]\n    \n    # Extract comprehensive fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity_x = state[3]\n    my_velocity_y = state[4]\n    my_attack_status = state[5]\n    my_block_status = state[6]\n    opponent_velocity_x = state[14]\n    opponent_velocity_y = state[15]\n    opponent_attack_status = state[16]\n    opponent_block_status = state[17]\n    projectile_cooldown = max(0.0, state[10])\n    opponent_projectile_cooldown = max(0.0, state[21])\n    \n    # Enhanced tactical ranges for hybrid fighting\n    very_close = 0.08\n    close_range = 0.16\n    medium_range = 0.32\n    long_range = 0.50\n    max_range = 0.75\n    \n    # Dynamic threshold system\n    critical_health = 0.18\n    low_health = 0.35\n    high_health = 0.75\n    decisive_advantage = 0.35\n    significant_disadvantage = -0.30\n    \n    # Adaptive parameters based on game state\n    base_aggression = 0.5\n    aggression_modifier = 0.0\n    defensive_modifier = 0.0\n    \n    # Calculate dynamic aggression\n    if health_advantage > decisive_advantage:\n        aggression_modifier += 0.4\n    elif health_advantage < significant_disadvantage:\n        aggression_modifier -= 0.5\n        defensive_modifier += 0.3\n    \n    if my_health < critical_health:\n        aggression_modifier -= 0.4\n        defensive_modifier += 0.5\n    elif my_health > high_health:\n        aggression_modifier += 0.2\n    \n    current_aggression = max(0.1, min(0.9, base_aggression + aggression_modifier))\n    defensive_priority = max(0.1, min(0.8, 0.3 + defensive_modifier))\n    \n    # Advanced opponent analysis\n    opponent_is_aggressive = opponent_attack_status > 0.2 or abs(opponent_velocity_x) > 0.1\n    opponent_is_defensive = opponent_block_status > 0.3\n    opponent_is_mobile = abs(opponent_velocity_x) > 0.08\n    opponent_can_projectile = opponent_projectile_cooldown < 0.2\n    i_can_projectile = projectile_cooldown < 0.1\n    opponent_momentum = abs(opponent_velocity_x) + abs(opponent_velocity_y)\n    my_momentum = abs(my_velocity_x) + abs(my_velocity_y)\n    \n    # Randomization for unpredictability\n    tactical_roll = random.random()\n    combat_roll = random.random()\n    movement_roll = random.random()\n    \n    # Emergency survival protocol\n    if my_health < critical_health and health_advantage < -0.4:\n        if distance < close_range:\n            if opponent_attack_status > 0.4:\n                # Immediate threat - block\n                return 6\n            else:\n                # Create distance urgently\n                if relative_pos > 0:\n                    return 7 if tactical_roll < 0.7 else 1\n                else:\n                    return 8 if tactical_roll < 0.7 else 2\n        elif distance < medium_range and i_can_projectile:\n            # Safe projectile harassment\n            return 9\n        elif distance < long_range:\n            # Maintain distance\n            if relative_pos > 0:\n                return 1\n            else:\n                return 2\n        else:\n            # Long range safety\n            if i_can_projectile and not opponent_is_defensive:\n                return 9\n            else:\n                return 0\n    \n    # Aggressive finishing mode\n    if health_advantage > decisive_advantage and opponent_health < 0.25:\n        if distance < very_close:\n            if opponent_is_defensive:\n                # Break guard with variety\n                break_guard_choice = combat_roll\n                if break_guard_choice < 0.3:\n                    return 5  # Heavy kick\n                elif break_guard_choice < 0.5:\n                    return 3  # Jump attack\n                elif break_guard_choice < 0.7:\n                    # Reposition to flank\n                    return 2 if relative_pos < 0 else 1\n                else:\n                    return 4  # Quick punch\n            else:\n                # Unleash finishing combo\n                finish_choice = combat_roll\n                if finish_choice < 0.6:\n                    return 5  # Power kick\n                else:\n                    return 4  # Fast punch\n        elif distance < close_range:\n            # Approach for finish\n            if opponent_can_projectile:\n                # Approach with protection\n                if relative_pos > 0:\n                    return 8\n                else:\n                    return 7\n            else:\n                # Direct approach\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        elif distance < medium_range and i_can_projectile:\n            # Projectile pressure\n            return 9\n    \n    # Very close range combat - hybrid intensity\n    if distance < very_close:\n        # Analyze immediate threats and opportunities\n        immediate_threat = opponent_attack_status > 0.3\n        counter_opportunity = opponent_attack_status > 0.5 and my_attack_status < 0.2\n        \n        if immediate_threat and defensive_priority > 0.5:\n            # Prioritize defense in close quarters\n            if tactical_roll < 0.6:\n                return 6  # Block\n            elif tactical_roll < 0.8:\n                # Defensive movement\n                if relative_pos > 0:\n                    return 7\n                else:\n                    return 8\n            else:\n                # Quick counter\n                return 4\n        \n        if counter_opportunity and current_aggression > 0.6:\n            # Counter-attack opportunity\n            if combat_roll < 0.7:\n                return 5  # Strong counter kick\n            else:\n                return 4  # Fast counter punch\n        \n        if opponent_is_defensive:\n            # Opponent blocking - tactical response\n            guard_break_strategy = tactical_roll\n            if guard_break_strategy < 0.25:\n                return 5  # Heavy attack\n            elif guard_break_strategy < 0.45:\n                return 3  # Jump over guard\n            elif guard_break_strategy < 0.65:\n                # Positional advantage\n                return 2 if relative_pos < 0 else 1\n            elif guard_break_strategy < 0.8:\n                return 4  # Quick jab\n            else:\n                # Create space and reset\n                if relative_pos > 0:\n                    return 1\n                else:\n                    return 2\n        \n        # Standard very close combat\n        if current_aggression > 0.65:\n            # Aggressive close combat\n            attack_pattern = combat_roll\n            if attack_pattern < 0.4:\n                return 4  # Fast punch\n            elif attack_pattern < 0.7:\n                return 5  # Power kick\n            elif attack_pattern < 0.85:\n                return 3  # Jump attack\n            else:\n                return 6  # Defensive block\n        else:\n            # Balanced close combat\n            balanced_choice = combat_roll\n            if balanced_choice < 0.35:\n                return 6",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978365,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_029",
      "generation": 3,
      "fitness": 191.42399999999535,
      "win_rate": 0.5,
      "avg_reward": 243.35999999999237,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 1.0\n    my_pos_x = max(0.0, min(1.0, state[2])) if len(state) > 2 else 0.5\n    my_velocity_x = max(-1.0, min(1.0, state[4])) if len(state) > 4 else 0.0\n    my_velocity_y = max(-1.0, min(1.0, state[5])) if len(state) > 5 else 0.0\n    my_attack_status = max(0.0, min(1.0, state[7])) if len(state) > 7 else 0.0\n    my_block_status = max(0.0, min(1.0, state[8])) if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, min(1.0, state[10])) if len(state) > 10 else 0.0\n    \n    opponent_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 1.0\n    opponent_pos_x = max(0.0, min(1.0, state[13])) if len(state) > 13 else 0.5\n    opponent_velocity_x = max(-1.0, min(1.0, state[15])) if len(state) > 15 else 0.0\n    opponent_velocity_y = max(-1.0, min(1.0, state[16])) if len(state) > 16 else 0.0\n    opponent_attack_status = max(0.0, min(1.0, state[18])) if len(state) > 18 else 0.0\n    opponent_block_status = max(0.0, min(1.0, state[19])) if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, min(1.0, state[21])) if len(state) > 21 else 0.0\n    \n    # Define hybrid tactical ranges with improved precision\n    optimal_range = 0.06\n    ultra_close_range = 0.1\n    very_close_range = 0.16\n    close_range = 0.22\n    medium_range = 0.32\n    far_range = 0.48\n    max_range = 0.65\n    \n    # Calculate positional awareness\n    wall_proximity = min(my_pos_x, 1.0 - my_pos_x)\n    opponent_wall_proximity = min(opponent_pos_x, 1.0 - opponent_pos_x)\n    corner_pressure = wall_proximity < 0.18\n    opponent_cornered = opponent_wall_proximity < 0.18\n    near_corner = wall_proximity < 0.3\n    \n    # Enhanced opponent analysis\n    opponent_aggressive = opponent_attack_status > 0.4 or abs(opponent_velocity_x) > 0.25\n    opponent_defensive = opponent_block_status > 0.5\n    opponent_mobile = abs(opponent_velocity_x) > 0.12\n    opponent_airborne = height_diff < -0.15\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.2) or (relative_pos < 0 and opponent_velocity_x < -0.2)\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x < -0.2) or (relative_pos < 0 and opponent_velocity_x > 0.2)\n    \n    # Projectile readiness analysis\n    my_projectile_ready = my_projectile_cooldown < 0.15\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.15\n    my_projectile_optimal = my_projectile_cooldown < 0.05\n    \n    # Dynamic aggression calculation\n    base_aggression = 0.6\n    aggression_modifier = 0.0\n    \n    # Health-based aggression with nuanced scaling\n    if health_advantage > 0.5:\n        aggression_modifier += 0.3\n    elif health_advantage > 0.2:\n        aggression_modifier += 0.15\n    elif health_advantage < -0.5:\n        aggression_modifier -= 0.35\n    elif health_advantage < -0.2:\n        aggression_modifier -= 0.15\n    \n    # Position-based adjustment with corner control\n    if opponent_cornered and not corner_pressure:\n        aggression_modifier += 0.25\n    elif corner_pressure and not opponent_cornered:\n        aggression_modifier -= 0.2\n    \n    # Opponent behavior adjustment\n    if opponent_defensive and not opponent_mobile:\n        aggression_modifier += 0.2\n    elif opponent_aggressive and my_health < opponent_health * 1.1:\n        aggression_modifier -= 0.25\n    \n    current_aggression = max(0.15, min(0.85, base_aggression + aggression_modifier))\n    \n    # Critical health emergency protocols\n    if my_health < 0.12:\n        if opponent_attack_status > 0.6 and distance < close_range:\n            return 6\n        elif distance > medium_range and my_projectile_ready:\n            return 9\n        elif distance < very_close_range and not corner_pressure:\n            escape_direction = 7 if relative_pos > 0 else 8\n            return escape_direction\n        elif corner_pressure and distance < very_close_range:\n            if my_projectile_optimal:\n                return 9\n            elif random.random() < 0.4:\n                return 3\n            else:\n                return 6\n        else:\n            return 6\n    \n    # Low health survival tactics\n    if my_health < 0.25 and health_advantage < -0.3:\n        if opponent_attack_status > 0.5:\n            return 6\n        elif distance > far_range and my_projectile_ready:\n            return 9\n        elif distance < close_range and not corner_pressure:\n            retreat_direction = 1 if relative_pos > 0 else 2\n            if opponent_projectile_ready:\n                return 7 if retreat_direction == 1 else 8\n            else:\n                return retreat_direction\n        elif distance >= close_range and distance < medium_range:\n            if my_projectile_ready:\n                return 9\n            else:\n                return 6\n    \n    # Corner escape with improved decision making\n    if corner_pressure:\n        if opponent_attack_status > 0.5 and distance < close_range:\n            return 6\n        elif distance < ultra_close_range:\n            if opponent_airborne:\n                return 4\n            elif my_projectile_optimal and random.random() < 0.6:\n                return 9\n            elif abs(height_diff) < 0.3 and random.random() < 0.5:\n                return 3\n            else:\n                counter_choice = random.random()\n                if counter_choice < 0.6:\n                    return 4\n                else:\n                    return 5\n        elif distance < close_range:\n            center_direction = 2 if my_pos_x < 0.5 else 1\n            if opponent_projectile_ready and distance > ultra_close_range:\n                return 7",
      "fighting_style": "evolved",
      "creation_time": 1748772554.5032692,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_022",
      "generation": 3,
      "fitness": 190.01999999999174,
      "win_rate": 0.0,
      "avg_reward": 190.01999999999174,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information with enhanced bounds checking\n    distance = max(0.0, min(1.0, state[22] if len(state) > 22 else 0.5))\n    relative_pos = max(-1.0, min(1.0, state[23] if len(state) > 23 else 0.0))\n    health_advantage = max(-1.0, min(1.0, state[25] if len(state) > 25 else 0.0))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract comprehensive fighter status\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 0.5))\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_x_velocity = state[3] if len(state) > 3 else 0.0\n    my_y_velocity = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.4 if len(state) > 5 else False\n    my_blocking = state[6] > 0.4 if len(state) > 6 else False\n    my_stunned = state[7] > 0.4 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8] if len(state) > 8 else 0.0)\n    my_attack_cooldown = max(0.0, state[9] if len(state) > 9 else 0.0)\n    my_block_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    # Opponent comprehensive status\n    opp_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 0.5))\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[13] if len(state) > 13 else 0.0\n    opp_x_velocity = state[14] if len(state) > 14 else 0.0\n    opp_y_velocity = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.4 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.4 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.4 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19] if len(state) > 19 else 0.0)\n    opp_attack_cooldown = max(0.0, state[20] if len(state) > 20 else 0.0)\n    opp_block_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Enhanced hybrid strategy parameters\n    strike_range = 0.10\n    close_range = 0.16\n    medium_range = 0.32\n    far_range = 0.48\n    optimal_range = 0.24\n    critical_health = 0.18\n    low_health = 0.35\n    winning_threshold = 0.15\n    losing_threshold = -0.20\n    \n    # Advanced stage positioning analysis\n    stage_center = 0.5\n    left_wall = 0.12\n    right_wall = 0.88\n    corner_zone = 0.18\n    my_near_left_wall = my_x_pos < corner_zone\n    my_near_right_wall = my_x_pos > (1.0 - corner_zone)\n    my_cornered = my_near_left_wall or my_near_right_wall\n    opp_near_left_wall = opp_x_pos < corner_zone\n    opp_near_right_wall = opp_x_pos > (1.0 - corner_zone)\n    opp_cornered = opp_near_left_wall or opp_near_right_wall\n    \n    # Enhanced movement and timing analysis\n    opponent_approaching = (relative_pos > 0 and opp_x_velocity < -0.15) or (relative_pos < 0 and opp_x_velocity > 0.15)\n    opponent_retreating = (relative_pos > 0 and opp_x_velocity > 0.15) or (relative_pos < 0 and opp_x_velocity < -0.15)\n    opponent_jumping = abs(opp_y_velocity) > 0.2\n    my_momentum = abs(my_x_velocity)\n    opp_momentum = abs(opp_x_velocity)\n    combined_momentum = my_momentum + opp_momentum\n    \n    # Cooldown and readiness assessment\n    projectile_ready = my_projectile_cooldown < 0.08\n    attack_ready = my_attack_cooldown < 0.12\n    block_ready = my_block_cooldown < 0.1\n    opp_projectile_threat = opp_projectile_cooldown < 0.1\n    opp_attack_threat = opp_attack_cooldown < 0.15\n    \n    # Threat and opportunity assessment\n    immediate_danger = opp_attacking and distance < close_range\n    projectile_danger = opp_projectile_threat and distance > medium_range\n    counter_opportunity = opp_attacking or opp_stunned\n    finishing_opportunity = opp_health < critical_health and health_advantage > 0\n    \n    # Randomization for unpredictability\n    randomness = random.random()\n    tactical_choice = random.random()\n    \n    # Emergency defensive state - cannot act while stunned\n    if my_stunned:\n        return 0\n    \n    # Ultra-critical health survival protocol\n    if my_health <= critical_health or health_advantage < -0.45:\n        if immediate_danger:\n            if block_ready:\n                return 6  # Emergency block\n            elif distance > 0.05:\n                return 3  # Desperate jump\n            else:\n                return 0  # Cannot avoid\n        \n        if distance < close_range:\n            # Emergency escape tactics\n            if my_cornered:\n                if abs(height_diff) < 0.2 and randomness < 0.6:\n                    return 3  # Jump escape from corner\n                elif block_ready:\n                    return 6  # Corner defense\n                else:\n                    return 0  # Wait for opportunity\n            else:\n                # Mobile escape with protection\n                escape_direction = randomness\n                if escape_direction < 0.4:\n                    return 7 if relative_pos > 0 else 8  # Protected retreat\n                elif escape_direction < 0.7:\n                    return 1 if relative_pos > 0 else 2  # Quick retreat\n                else:\n                    return 3  # Jump retreat\n        \n        elif distance < medium_range:\n            # Create safe distance while threatening\n            if projectile_ready and randomness < 0.7:\n                return 9  # Desperate projectile\n            elif not my_cornered:\n                return 1 if relative_pos > 0 else 2  # Continue retreat\n            else:\n                return 6 if block_ready else 0  # Defensive waiting\n        \n        else:\n            # Safe distance - projectile harassment\n            if projectile_ready:\n                return 9\n            elif opponent_approaching and block_ready:\n                return 6  # Prepare for incoming\n            else:\n                return 0",
      "fighting_style": "evolved",
      "creation_time": 1748772554.5032709,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_005",
      "generation": 2,
      "fitness": 189.81666666666305,
      "win_rate": 0.6666666666666666,
      "avg_reward": 271.1666666666615,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[1]))\n    my_x_pos = state[0]\n    my_y_pos = state[2]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attacking = state[5] > 0.5\n    my_blocking = state[6] > 0.5\n    my_stunned = state[7] > 0.5\n    my_projectile_cooldown = max(0.0, state[8])\n    my_attack_cooldown = max(0.0, state[9])\n    my_block_cooldown = max(0.0, state[10])\n    \n    # Extract opponent status with bounds checking\n    opp_health = max(0.0, min(1.0, state[12]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[13]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attacking = state[16] > 0.5\n    opp_blocking = state[17] > 0.5\n    opp_stunned = state[18] > 0.5\n    opp_projectile_cooldown = max(0.0, state[19])\n    opp_attack_cooldown = max(0.0, state[20])\n    opp_block_cooldown = max(0.0, state[21])\n    \n    # Define tactical ranges optimized for hybrid fighting\n    very_close_range = 0.09\n    close_range = 0.16\n    medium_range = 0.30\n    far_range = 0.48\n    \n    # Calculate dynamic aggression based on multiple factors\n    base_aggression = 0.70\n    health_multiplier = 1.0\n    momentum_factor = 1.0\n    positioning_factor = 1.0\n    \n    # Health-based strategy adjustments\n    if health_advantage > 0.4:\n        health_multiplier = 1.3  # Press advantage hard\n    elif health_advantage > 0.1:\n        health_multiplier = 1.1  # Slight aggression boost\n    elif health_advantage < -0.4:\n        health_multiplier = 0.6  # Focus on survival\n    elif health_advantage < -0.1:\n        health_multiplier = 0.8  # Cautious approach\n    \n    # Momentum calculation based on recent actions\n    if my_attacking and not opp_blocking:\n        momentum_factor = 1.2  # Continue pressure\n    elif opp_attacking and my_blocking:\n        momentum_factor = 0.9  # Stay defensive momentarily\n    \n    # Positioning advantage factor\n    wall_distance_left = my_x_pos\n    wall_distance_right = 1.0 - my_x_pos\n    if wall_distance_left < 0.15 or wall_distance_right < 0.15:\n        positioning_factor = 0.8  # More cautious near walls\n    elif 0.3 < my_x_pos < 0.7:\n        positioning_factor = 1.1  # Center stage advantage\n    \n    # Calculate final tactical intensity\n    tactical_intensity = base_aggression * health_multiplier * momentum_factor * positioning_factor\n    tactical_intensity = max(0.3, min(1.0, tactical_intensity))\n    \n    # Emergency override conditions\n    if my_stunned:\n        return 0  # Cannot act while stunned\n    \n    # Critical health emergency protocols\n    if my_health < 0.12:\n        if opp_attacking and distance < close_range:\n            return 6 if my_block_cooldown < 0.2 else 0\n        elif distance > medium_range and my_projectile_cooldown < 0.15:\n            return 9  # Desperate projectile\n        elif distance < very_close_range and not opp_blocking:\n            # Last chance all-in\n            return 5 if my_attack_cooldown < 0.1 else 4\n        else:\n            # Survival mode - escape with blocking\n            if wall_distance_left < wall_distance_right:\n                return 8  # Move right with block\n            else:\n                return 7  # Move left with block\n    \n    # Capitalize on stunned opponent with improved timing\n    if opp_stunned:\n        if distance < close_range:\n            if my_attack_cooldown < 0.08:\n                # Optimal punishment combo\n                punishment_choice = random.random()\n                if distance < very_close_range:\n                    return 5 if punishment_choice < 0.75 else 4  # Heavy emphasis on kicks\n                else:\n                    return 4 if punishment_choice < 0.6 else 5  # Mix based on range\n            else:\n                # Position for guaranteed follow-up\n                if distance > very_close_range:\n                    return 2 if relative_pos > 0 else 1\n                else:\n                    return 0  # Wait for attack window\n        else:\n            # Rush in efficiently\n            if distance > medium_range and my_projectile_cooldown < 0.1:\n                return 9  # Quick projectile before closing\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Advanced counter-attack system\n    if opp_attacking:\n        if distance < very_close_range:\n            # Point blank defense\n            if my_block_cooldown < 0.1:\n                return 6  # Pure block at closest range\n            else:\n                # Cannot block - emergency evasion\n                if abs(my_y_velocity) < 0.2:\n                    return 3  # Jump away\n                else:\n                    return 2 if relative_pos < 0 else 1  # Lateral escape\n        elif distance < close_range:\n            # Close range counter opportunities\n            if my_block_cooldown < 0.15:\n                counter_strategy = random.random()\n                if counter_strategy < 0.5:\n                    return 6  # Standard block\n                elif counter_strategy < 0.8:\n                    # Counter with movement\n                    return 8 if relative_pos > 0 else 7\n                else:\n                    # Risky counter-attack\n                    return 4 if my_attack_cooldown < 0.1 else 6\n            else:\n                # No block available - evasive action\n                return 1 if relative_pos > 0 else 2\n        elif distance < medium_range:\n            # Medium range preparation\n            if my_projectile_cooldown < 0.2 and random.random() < 0.4:\n                return 9  # Interrupt with projectile\n            else:\n                return 8 if relative_pos > 0 else 7  # Advance with block\n    \n    # VERY CLOSE RANGE - Point blank combat\n    if distance < very_close_range:\n        if my_attack_cooldown < 0.06:\n            if opp_blocking:\n                # Guard breaking at point blank\n                guard_break_intensity = 0.7 + (health_advantage * 0.15)\n                if random.random() < guard_break_intensity:\n                    # Varied guard break attempts\n                    break_method = random.random()\n                    if break_method < 0.4:\n                        return 5  # Heavy kick\n                    elif break_method < 0.7:\n                        return 4  # Quick punch\n                    else:\n                        return",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978366,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_009",
      "generation": 2,
      "fitness": 189.37999999999099,
      "win_rate": 0.0,
      "avg_reward": 189.37999999999099,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information with defensive bounds\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = max(0.0, min(1.0, state[0]))\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7]\n    my_projectile_cd = max(0.0, state[10])\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_pos = max(0.0, min(1.0, state[11]))\n    opp_y_pos = state[12]\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18]\n    opp_projectile_cd = max(0.0, state[21]) if len(state) > 21 else 1.0\n    \n    # Define evolved tactical parameters\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.22\n    winning_threshold = 0.2\n    losing_threshold = -0.2\n    wall_threshold = 0.12\n    \n    # Advanced position analysis\n    near_left_wall = my_x_pos < wall_threshold\n    near_right_wall = my_x_pos > (1.0 - wall_threshold)\n    opp_near_left_wall = opp_x_pos < wall_threshold\n    opp_near_right_wall = opp_x_pos > (1.0 - wall_threshold)\n    \n    # Calculate momentum and velocity factors\n    velocity_factor = abs(my_x_vel) + abs(opp_x_vel)\n    approaching = (relative_pos > 0 and my_x_vel > 0) or (relative_pos < 0 and my_x_vel < 0)\n    retreating = (relative_pos > 0 and my_x_vel < 0) or (relative_pos < 0 and my_x_vel > 0)\n    \n    # Evolved aggression calculation\n    base_aggression = 0.52\n    health_factor = health_advantage * 0.3\n    distance_factor = (1.0 - distance) * 0.15\n    position_factor = 0.0\n    \n    # Position advantage calculation\n    if (opp_near_left_wall or opp_near_right_wall) and not (near_left_wall or near_right_wall):\n        position_factor = 0.15\n    elif (near_left_wall or near_right_wall) and not (opp_near_left_wall or opp_near_right_wall):\n        position_factor = -0.15\n    \n    dynamic_aggression = base_aggression + health_factor + distance_factor + position_factor\n    dynamic_aggression = max(0.1, min(0.9, dynamic_aggression))\n    \n    # Cannot act while stunned\n    if my_stunned > 0.5:\n        return 0\n    \n    # Exploit stunned opponent with enhanced tactics\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            # Maximize damage on stunned opponent\n            damage_roll = random.random()\n            if damage_roll < 0.7:\n                return 5  # Kick for maximum damage\n            else:\n                return 4  # Mix in punches for combo potential\n        elif distance < medium_range:\n            # Rush to close distance\n            if abs(relative_pos) > 0.05:\n                return 2 if relative_pos > 0 else 1\n            else:\n                return 5  # Kick when in range\n        else:\n            # Use projectile if available, otherwise close distance\n            if my_projectile_cd < 0.25:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Emergency survival tactics\n    if my_health < critical_health and health_advantage < -0.35:\n        # Desperate defensive mode\n        if opp_attacking > 0.5 and distance < close_range:\n            return 6  # Block immediate threat\n        elif distance > medium_range and my_projectile_cd < 0.15:\n            return 9  # Keep distance with projectile\n        elif distance < medium_range:\n            # Escape with blocking movement\n            if near_left_wall:\n                return 8\n            elif near_right_wall:\n                return 7\n            else:\n                escape_dir = 7 if relative_pos > 0 else 8\n                return escape_dir\n        else:\n            # Default defensive stance\n            return 6\n    \n    # Finishing mode when opponent is low\n    if opp_health < critical_health and health_advantage > 0.25:\n        if distance < close_range:\n            # Aggressive finishing\n            finish_roll = random.random()\n            if finish_roll < 0.6:\n                return 5  # Power attacks\n            elif finish_roll < 0.85:\n                return 4  # Quick attacks\n            else:\n                return 3  # Jump attacks for mixup\n        elif distance < medium_range:\n            # Close for the kill\n            return 2 if relative_pos > 0 else 1\n        else:\n            # Projectile pressure\n            if my_projectile_cd < 0.3:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Close range combat system\n    if distance < close_range:\n        # Handle blocking opponent\n        if opp_blocking > 0.5:\n            guard_break_roll = random.random()\n            if guard_break_roll < 0.2:\n                return 5  # Heavy attack to break guard\n            elif guard_break_roll < 0.35:\n                return 3  # Jump to change attack angle\n            elif guard_break_roll < 0.6:\n                # Attempt flanking maneuver\n                if not near_right_wall and relative_pos < -0.1:\n                    return 2\n                elif not near_left_wall and relative_pos > 0.1:\n                    return 1\n                else:\n                    return 5  # Power attack if can't flank\n            elif guard_break_roll < 0.8:\n                return 4  # Quick jab\n            else:\n                # Create space and reset\n                if not near_left_wall and relative_pos > 0:\n                    return 1\n                elif not near_right_wall and relative_pos < 0:\n                    return 2\n                else:\n                    return 3  # Jump if trapped\n        \n        # Counter attacking opponent\n        elif opp_attacking > 0.5:\n            counter_strategy = random.random()\n            if health_advantage < losing_threshold:\n                # Defensive counter when losing\n                if counter_strategy < 0.55:\n                    return 6  # Block first\n                elif counter_strategy < 0.75:\n                    return 4  # Quick counter\n                else:\n                    return 3  # Jump away\n            else:\n                # Aggressive counter when even or winning\n                if counter_strategy < 0.25:\n                    return 6",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978368,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_005",
      "generation": 1,
      "fitness": 189.07933333332963,
      "win_rate": 0.5,
      "avg_reward": 270.11333333332806,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter state\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = state[0]\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[7]\n    my_blocking = state[8]\n    my_projectile_cooldown = max(0.0, state[9])\n    \n    # Extract opponent state\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_x_pos = state[11]\n    opponent_y_pos = state[12]\n    opponent_x_vel = state[14]\n    opponent_y_vel = state[15]\n    opponent_attacking = state[18]\n    opponent_blocking = state[19]\n    opponent_projectile_cooldown = max(0.0, state[20])\n    \n    # Define hybrid fighter tactical parameters\n    close_range = 0.14\n    medium_range = 0.32\n    far_range = 0.5\n    critical_health = -0.35\n    winning_health = 0.25\n    retreat_distance = 0.2\n    \n    # Adaptive aggression based on health and distance\n    base_aggression = 0.6  # Hybrid balance\n    if health_advantage < critical_health:\n        aggression_modifier = -0.4\n    elif health_advantage > winning_health:\n        aggression_modifier = 0.3\n    else:\n        aggression_modifier = 0.0\n    \n    current_aggression = max(0.1, min(0.9, base_aggression + aggression_modifier))\n    \n    # Analyze opponent movement patterns\n    opponent_advancing = False\n    opponent_retreating = False\n    if relative_pos > 0 and opponent_x_vel > 0.05:\n        opponent_advancing = True\n    elif relative_pos < 0 and opponent_x_vel < -0.05:\n        opponent_advancing = True\n    elif relative_pos > 0 and opponent_x_vel < -0.05:\n        opponent_retreating = True\n    elif relative_pos < 0 and opponent_x_vel > 0.05:\n        opponent_retreating = True\n    \n    # Emergency health management\n    if my_health < 0.15 or health_advantage < -0.5:\n        if distance < retreat_distance:\n            # Defensive retreat with blocking\n            if opponent_attacking > 0.5:\n                return 6  # Pure block\n            else:\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n        elif my_projectile_cooldown < 0.2:\n            return 9  # Keep distance with projectiles\n        else:\n            return 6  # Block and recover\n    \n    # Opportunity recognition when opponent is vulnerable\n    opponent_vulnerable = opponent_attacking > 0.5 or opponent_projectile_cooldown > 0.4\n    \n    # Close range combat (0.0 - 0.14)\n    if distance < close_range:\n        # Immediate threat assessment\n        if opponent_attacking > 0.5:\n            if random.random() < 0.7:\n                return 6  # Block incoming attack\n            else:\n                # Counter-attack through opponent's attack\n                return 4  # Fast punch counter\n        \n        # Anti-blocking tactics\n        if opponent_blocking > 0.6:\n            block_break_choice = random.random()\n            if block_break_choice < 0.4:\n                return 5  # Kick to break block\n            elif block_break_choice < 0.6:\n                return 3  # Jump attack\n            else:\n                # Create space and reset\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        \n        # Aggressive close combat when opponent is open\n        if health_advantage > 0 or current_aggression > 0.6:\n            attack_pattern = random.random()\n            if attack_pattern < 0.45:\n                return 4  # Fast punch\n            elif attack_pattern < 0.75:\n                return 5  # Strong kick\n            elif attack_pattern < 0.85:\n                return 3  # Jumping attack\n            else:\n                return 6  # Block for safety\n        \n        # Defensive close combat when disadvantaged\n        else:\n            defensive_choice = random.random()\n            if defensive_choice < 0.3:\n                return 4  # Quick punch\n            elif defensive_choice < 0.5:\n                return 5  # Kick\n            else:\n                return 6  # Block\n    \n    # Medium range positioning (0.14 - 0.32)\n    elif distance < medium_range:\n        # Capitalize on opponent vulnerability\n        if opponent_vulnerable and health_advantage > -0.2:\n            if current_aggression > 0.5:\n                # Aggressive approach\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Cautious approach\n                if relative_pos > 0:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block\n        \n        # Respond to opponent advancing\n        if opponent_advancing:\n            if health_advantage < 0:\n                # Defensive response\n                if my_projectile_cooldown < 0.2:\n                    return 9  # Projectile to slow advance\n                else:\n                    return 6  # Block and prepare\n            else:\n                # Meet the advance\n                medium_counter = random.random()\n                if medium_counter < 0.5:\n                    if relative_pos > 0:\n                        return 2  # Move toward\n                    else:\n                        return 1  # Move toward\n                else:\n                    return 6  # Block and counter\n        \n        # Respond to opponent retreating\n        if opponent_retreating and health_advantage > -0.1:\n            chase_decision = random.random()\n            if chase_decision < current_aggression:\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            elif my_projectile_cooldown < 0.3:\n                return 9  # Projectile chase\n        \n        # Standard medium range tactics\n        medium_action = random.random()\n        if medium_action < 0.25:\n            if my_projectile_cooldown < 0.2:\n                return 9  # Projectile\n            else:\n                return 0  # Wait for cooldown\n        elif medium_action < 0.4:\n            return 3  # Jump for positioning\n        elif medium_action < 0.6:\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n        elif medium_action < 0.8:\n            return 6  # Block\n        else:\n            return 0  # Observe\n    \n    # Far range combat (0.32 - 0.5)\n    elif distance < far_range:\n        # Projectile warfare priority\n        if my_projectile_cooldown < 0.1:\n            projectile_chance = 0.6 + (health_advantage * 0.2)\n            if random.random() < projectile_chance:\n                return 9  # Projectile",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371424,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_016",
      "generation": 2,
      "fitness": 188.2199999999915,
      "win_rate": 0.0,
      "avg_reward": 188.2199999999915,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    my_pos_x = state[0] if len(state) > 0 else 0.5\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, state[9] if len(state) > 9 else 0.0)\n    \n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_pos_x = state[11] if len(state) > 11 else 0.5\n    opponent_velocity_x = state[14] if len(state) > 14 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[20] if len(state) > 20 else 0.0)\n    \n    # Hybrid tactical parameters - refined ranges\n    ultra_close = 0.08\n    close_range = 0.15\n    medium_range = 0.32\n    far_range = 0.50\n    max_range = 0.70\n    \n    # Dynamic thresholds based on state\n    critical_health = 0.20\n    winning_threshold = 0.30\n    projectile_ready = my_projectile_cooldown < 0.25\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.25\n    \n    # Stage positioning analysis\n    stage_center = 0.5\n    my_corner_distance = min(my_pos_x, 1.0 - my_pos_x)\n    opponent_corner_distance = min(opponent_pos_x, 1.0 - opponent_pos_x)\n    i_am_cornered = my_corner_distance < 0.15\n    opponent_cornered = opponent_corner_distance < 0.15\n    \n    # Behavioral analysis\n    opponent_aggressive = opponent_attack_status > 0.5\n    opponent_defensive = opponent_block_status > 0.6\n    opponent_moving_toward = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_moving_away = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    \n    # Momentum and unpredictability\n    momentum = abs(my_velocity_x) + abs(opponent_velocity_x)\n    unpredictability = random.random()\n    health_ratio = my_health / max(opponent_health, 0.1)\n    combat_intensity = my_attack_status + opponent_attack_status\n    \n    # Strategic mode determination\n    survival_mode = my_health < critical_health or health_advantage < -0.6\n    finishing_mode = opponent_health < 0.25 and health_advantage > 0.2\n    control_mode = abs(health_advantage) < 0.3 and my_health > 0.4\n    comeback_mode = health_advantage < -0.2 and my_health > 0.3\n    \n    # Emergency survival protocol\n    if survival_mode:\n        if distance < ultra_close:\n            if opponent_aggressive:\n                return 6  # Block incoming attack\n            elif i_am_cornered:\n                # Escape corner desperately\n                if my_pos_x < stage_center:\n                    return 8  # Move right blocking\n                else:\n                    return 7  # Move left blocking\n            else:\n                # Create immediate space\n                if unpredictability < 0.6:\n                    if relative_pos > 0:\n                        return 7  # Move left blocking\n                    else:\n                        return 8  # Move right blocking\n                else:\n                    return 3  # Jump away\n        \n        elif distance < close_range:\n            if opponent_moving_toward and opponent_aggressive:\n                return 6  # Block approach\n            elif i_am_cornered:\n                # Escape corner with protection\n                if my_pos_x < stage_center:\n                    return 8 if unpredictability < 0.7 else 3  # Move right or jump\n                else:\n                    return 7 if unpredictability < 0.7 else 3  # Move left or jump\n            else:\n                # Controlled retreat\n                if projectile_ready and unpredictability < 0.4:\n                    return 9  # Projectile while retreating\n                else:\n                    if relative_pos > 0:\n                        return 1  # Move away\n                    else:\n                        return 2  # Move away\n        \n        elif distance < medium_range:\n            if projectile_ready:\n                return 9  # Zone with projectile\n            elif opponent_projectile_ready:\n                # Avoid projectile\n                if unpredictability < 0.5:\n                    return 3  # Jump\n                else:\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            else:\n                # Maintain distance\n                if relative_pos > 0:\n                    return 1  # Move away\n                else:\n                    return 2  # Move away\n        \n        else:\n            # At safe distance\n            if projectile_ready:\n                return 9  # Projectile zoning\n            else:\n                return 0  # Wait for cooldown\n    \n    # Finishing mode - close out the match\n    elif finishing_mode:\n        if opponent_cornered:\n            if distance < close_range:\n                if opponent_defensive:\n                    # Mix up against blocking\n                    mixup = unpredictability\n                    if mixup < 0.3:\n                        return 9 if projectile_ready else 5  # Throw or kick\n                    elif mixup < 0.6:\n                        return 3  # Jump attack\n                    else:\n                        return 4  # Quick punch\n                else:\n                    # Go for kill\n                    if unpredictability < 0.6:\n                        return 5  # Strong kick\n                    else:\n                        return 4  # Fast punch\n            else:\n                # Approach for finish\n                if relative_pos > 0:\n                    return 2  # Move in\n                else:\n                    return 1  # Move in\n        \n        elif distance < ultra_close:\n            # Point blank finish\n            if opponent_block_status < 0.3:\n                return 5 if unpredictability < 0.7 else 4  # Strong or fast\n            else:\n                # Opponent blocking - reposition\n                if unpredictability < 0.4:\n                    return 3  # Jump\n                elif relative_pos > 0:\n                    return 2  # Circle right\n                else:\n                    return 1  # Circle left\n        \n        elif distance < close_range:\n            if opponent_aggressive:\n                # Counter their desperation\n                return 4 if unpredictability < 0.6 else 6  # Punch or block",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978369,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_016",
      "generation": 0,
      "fitness": 186.439999999991,
      "win_rate": 0.0,
      "avg_reward": 186.439999999991,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player and opponent states with bounds checking\n    my_health = max(0.0, min(1.0, state[2])) if len(state) > 2 else 0.5\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[1] if len(state) > 1 else 0.0\n    my_x_vel = state[3] if len(state) > 3 else 0.0\n    my_y_vel = state[4] if len(state) > 4 else 0.0\n    my_is_attacking = state[5] if len(state) > 5 else 0.0\n    my_is_blocking = state[6] if len(state) > 6 else 0.0\n    my_attack_cooldown = state[7] if len(state) > 7 else 0.0\n    my_block_cooldown = state[8] if len(state) > 8 else 0.0\n    my_stun_duration = state[9] if len(state) > 9 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opp_health = max(0.0, min(1.0, state[13])) if len(state) > 13 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_y_pos = state[12] if len(state) > 12 else 0.0\n    opp_x_vel = state[14] if len(state) > 14 else 0.0\n    opp_y_vel = state[15] if len(state) > 15 else 0.0\n    opp_is_attacking = state[16] if len(state) > 16 else 0.0\n    opp_is_blocking = state[17] if len(state) > 17 else 0.0\n    opp_attack_cooldown = state[18] if len(state) > 18 else 0.0\n    opp_block_cooldown = state[19] if len(state) > 19 else 0.0\n    opp_stun_duration = state[20] if len(state) > 20 else 0.0\n    opp_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define strategic thresholds for counter-puncher style\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    critical_health = 0.25\n    low_health = 0.4\n    winning_threshold = 0.2\n    losing_threshold = -0.2\n    \n    # Counter-puncher patience factor - wait for opportunities\n    patience_factor = 0.3 + (health_advantage * 0.2)\n    aggression_modifier = max(0.1, min(0.8, patience_factor))\n    \n    # Emergency survival mode when critically low health\n    if my_health < critical_health and health_advantage < -0.4:\n        if distance < close_range and opp_is_attacking > 0.5:\n            # Emergency block against incoming attack\n            return 6\n        elif distance > medium_range:\n            # Keep distance and use projectiles\n            if my_projectile_cooldown < 0.1:\n                return 9\n            else:\n                # Move away while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n        else:\n            # Medium range, create distance\n            if relative_pos > 0:\n                return 7  # Move left block\n            else:\n                return 8  # Move right block\n    \n    # Counter-puncher core: Detect opponent vulnerability windows\n    opponent_vulnerable = False\n    if opp_attack_cooldown > 0.3 or opp_stun_duration > 0.1:\n        opponent_vulnerable = True\n    elif opp_is_attacking > 0.5 and distance < close_range:\n        # Opponent is attacking at close range - prepare counter\n        opponent_vulnerable = True\n    elif abs(opp_x_vel) > 0.8:\n        # Opponent moving fast, likely vulnerable after movement\n        opponent_vulnerable = True\n    \n    # Stunned state - can't act effectively\n    if my_stun_duration > 0.2:\n        return 6  # Block while stunned\n    \n    # Close range tactics (0.0 - 0.12)\n    if distance < close_range:\n        # Opponent is attacking - counter opportunity\n        if opp_is_attacking > 0.5 and opponent_vulnerable:\n            if my_attack_cooldown < 0.1:\n                # Quick counter punch\n                return 4\n            else:\n                # Block the attack first\n                return 6\n        \n        # Opponent just finished attacking (cooldown active)\n        elif opp_attack_cooldown > 0.2 and my_attack_cooldown < 0.1:\n            # Perfect counter window\n            if random.random() < 0.7:\n                return 5  # Strong kick counter\n            else:\n                return 4  # Quick punch\n        \n        # Opponent is blocking - mix up or create space\n        elif opp_is_blocking > 0.5:\n            if random.random() < 0.4:\n                # Try to break guard with kick\n                return 5\n            else:\n                # Create space and reset\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        \n        # Health disadvantage - play defensive\n        elif health_advantage < losing_threshold:\n            if random.random() < 0.6:\n                return 6  # Block\n            else:\n                # Create distance while blocking\n                if relative_pos > 0:\n                    return 7\n                else:\n                    return 8\n        \n        # Health advantage - controlled aggression\n        elif health_advantage > winning_threshold and opponent_vulnerable:\n            if my_attack_cooldown < 0.1:\n                return 4 if random.random() < 0.6 else 5\n            else:\n                return 6  # Block until ready\n        \n        # Default close range - cautious blocking\n        else:\n            return 6\n    \n    # Medium range tactics (0.12 - 0.35)\n    elif distance < medium_range:\n        # Opponent approaching with attack\n        if opp_is_attacking > 0.5 and abs(opp_x_vel) > 0.3:\n            # Prepare counter - move back and block\n            if relative_pos > 0:\n                return 7  # Block while moving left\n            else:\n                return 8  # Block while moving right\n        \n        # Opponent vulnerable and we have health advantage\n        elif opponent_vulnerable and health_advantage > 0 and my_attack_cooldown < 0.1:\n            # Close distance for counter attack\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        \n        # Opponent moving away - projectile opportunity\n        elif abs(opp_x_vel) > 0.5 and my_projectile_cooldown < 0.1:\n            # Sign they're creating distance - intercept with projectile\n            return 9",
      "fighting_style": "counter_puncher",
      "creation_time": 1748763419.2608309,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_025",
      "generation": 4,
      "fitness": 185.31999999999113,
      "win_rate": 0.0,
      "avg_reward": 185.31999999999113,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter state with bounds checking\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = state[0]\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = max(0.0, state[5])\n    my_blocking = max(0.0, state[6])\n    my_stunned = max(0.0, state[7]) if len(state) > 7 else 0.0\n    my_projectile_cooldown = max(0.0, state[9]) if len(state) > 9 else 0.0\n    \n    # Extract opponent state with bounds checking\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_x_pos = state[11]\n    opponent_y_pos = state[12]\n    opponent_x_vel = state[14]\n    opponent_y_vel = state[15]\n    opponent_attacking = max(0.0, state[16])\n    opponent_blocking = max(0.0, state[17])\n    opponent_stunned = max(0.0, state[18]) if len(state) > 18 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[20]) if len(state) > 20 else 0.0\n    \n    # Enhanced tactical parameters for hybrid evolution\n    close_range = 0.13\n    medium_range = 0.31\n    far_range = 0.47\n    critical_health = 0.20\n    dominance_health = 0.65\n    \n    # Advanced multi-dimensional aggression calculation\n    base_aggression = 0.58\n    health_factor = 0.0\n    position_factor = 0.0\n    momentum_factor = 0.0\n    tactical_factor = 0.0\n    \n    # Health-based aggression with exponential scaling\n    health_ratio = my_health / max(0.05, opponent_health)\n    if health_advantage > 0.3:\n        health_factor = min(0.4, health_advantage * 0.75 + 0.15)\n    elif health_advantage > 0.1:\n        health_factor = health_advantage * 0.5\n    elif health_advantage < -0.3:\n        health_factor = max(-0.5, health_advantage * 0.9 - 0.1)\n    elif health_advantage < -0.1:\n        health_factor = health_advantage * 0.6\n    \n    # Position-based tactical awareness\n    stage_center = abs(my_x_pos) < 0.35\n    stage_edge = abs(my_x_pos) > 0.75\n    opponent_cornered = abs(opponent_x_pos) > 0.8\n    i_am_cornered = abs(my_x_pos) > 0.8\n    \n    if stage_center:\n        position_factor += 0.12\n    elif stage_edge:\n        position_factor -= 0.18\n    \n    if opponent_cornered:\n        position_factor += 0.15\n    elif i_am_cornered:\n        position_factor -= 0.2\n    \n    # Momentum calculation based on velocities and recent actions\n    velocity_advantage = (abs(my_x_vel) + abs(my_y_vel)) - (abs(opponent_x_vel) + abs(opponent_y_vel))\n    momentum_factor = velocity_advantage * 0.2\n    \n    # Tactical advantage from cooldowns and states\n    if my_projectile_cooldown < 0.2 and opponent_projectile_cooldown > 0.5:\n        tactical_factor += 0.18\n    elif my_projectile_cooldown > 0.5 and opponent_projectile_cooldown < 0.2:\n        tactical_factor -= 0.15\n    \n    if my_stunned > 0.3:\n        tactical_factor -= 0.4\n    elif opponent_stunned > 0.3:\n        tactical_factor += 0.35\n    \n    # Calculate final aggression level\n    current_aggression = max(0.1, min(0.95, \n        base_aggression + health_factor + position_factor + momentum_factor + tactical_factor))\n    \n    # Enhanced opponent behavior analysis and prediction\n    opponent_velocity_total = abs(opponent_x_vel) + abs(opponent_y_vel)\n    opponent_mobile = opponent_velocity_total > 0.08\n    opponent_stationary = opponent_velocity_total < 0.03\n    \n    # Directional movement prediction with timing\n    opponent_advancing = False\n    opponent_retreating = False\n    opponent_flanking = False\n    \n    if distance > 0.05:  # Only analyze if not touching\n        if relative_pos > 0.1 and opponent_x_vel > 0.04:\n            opponent_advancing = True\n        elif relative_pos < -0.1 and opponent_x_vel < -0.04:\n            opponent_advancing = True\n        elif relative_pos > 0.1 and opponent_x_vel < -0.04:\n            opponent_retreating = True\n        elif relative_pos < -0.1 and opponent_x_vel > 0.04:\n            opponent_retreating = True\n        elif opponent_mobile and abs(opponent_y_vel) > 0.05:\n            opponent_flanking = True\n    \n    # Advanced fighting style recognition\n    opponent_rusher = opponent_advancing and opponent_attacking > 0.4 and distance < 0.25\n    opponent_zoner = opponent_projectile_cooldown < 0.3 and distance > 0.35 and opponent_retreating\n    opponent_turtle = opponent_blocking > 0.6 and opponent_stationary\n    opponent_jumper = abs(opponent_y_vel) > 0.15 or abs(height_diff) > 0.25\n    opponent_counter_fighter = opponent_blocking > 0.4 and opponent_attacking > 0.3\n    \n    # Emergency survival protocols\n    if my_stunned > 0.4:\n        return 0  # Can't act while stunned\n    \n    if my_health < critical_health or health_advantage < -0.6:\n        # Critical health survival mode\n        if distance < close_range and opponent_attacking > 0.7:\n            return 6  # Emergency block\n        elif distance < medium_range:\n            if i_am_cornered:\n                # Corner escape sequences\n                if opponent_advancing:\n                    escape_roll = random.random()\n                    if escape_roll < 0.4:\n                        return 3  # Jump escape\n                    elif escape_roll < 0.7:\n                        return 6  # Block and wait\n                    else:\n                        return 4 if random.random() < 0.6 else 5  # Desperate attack\n                else:\n                    # Safe corner play\n                    if my_projectile_cooldown < 0.25:\n                        return 9\n                    else:\n                        return 6\n            else:\n                # Mid-stage retreat\n                retreat_choice = random.random()\n                if retreat_choice < 0.5:\n                    return 7 if relative_pos > 0 else 8  # Defensive movement\n                elif retreat_choice < 0.75:\n                    return 6  # Block\n                else:\n                    return 3  # Jump retreat\n        else:\n            # Long range survival\n            if my_projectile_cooldown < 0.3:\n                return 9",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904292,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_023",
      "generation": 0,
      "fitness": 181.4695999999951,
      "win_rate": 0.5,
      "avg_reward": 256.3399999999931,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player and opponent information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opp_health = state[12] if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_attack_status = state[16] if len(state) > 16 else 0.0\n    opp_block_status = state[17] if len(state) > 17 else 0.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    critical_health = 0.25\n    winning_threshold = 0.15\n    losing_threshold = -0.2\n    \n    # Calculate situational awareness\n    am_winning = health_advantage > winning_threshold\n    am_losing = health_advantage < losing_threshold\n    critical_situation = my_health < critical_health\n    opponent_attacking = opp_attack_status > 0.5\n    opponent_blocking = opp_block_status > 0.5\n    can_use_projectile = my_projectile_cooldown < 0.1\n    \n    # Emergency defensive situations\n    if critical_situation and opponent_attacking:\n        if distance < close_range:\n            return 6  # Block incoming attack\n        elif relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Adapt strategy based on health advantage\n    aggression_level = 0.5\n    if am_winning:\n        aggression_level = 0.75\n    elif am_losing:\n        aggression_level = 0.3\n    elif critical_situation:\n        aggression_level = 0.15\n    \n    # Range-based tactical decisions\n    if distance < close_range:\n        # Close combat tactics\n        if opponent_blocking:\n            # Mix up against blocking opponent\n            if random.random() < 0.4:\n                return 5  # Heavy kick to break guard\n            elif relative_pos > 0:\n                return 1  # Move left to reposition\n            else:\n                return 2  # Move right to reposition\n        \n        elif opponent_attacking:\n            # Counter-attack or defend\n            if am_losing or my_health < 0.4:\n                return 6  # Block the attack\n            else:\n                # Counter with quick attack\n                return 4 if random.random() < 0.7 else 5\n        \n        else:\n            # Opponent is neutral, decide based on health\n            if am_winning and random.random() < aggression_level:\n                # Aggressive close combat when winning\n                attack_choice = random.random()\n                if attack_choice < 0.6:\n                    return 4  # Quick punch\n                else:\n                    return 5  # Power kick\n            elif am_losing:\n                # More cautious when losing\n                if random.random() < 0.6:\n                    return 6  # Block\n                else:\n                    return 4  # Safe quick attack\n            else:\n                # Balanced approach\n                choice = random.random()\n                if choice < 0.4:\n                    return 4  # Punch\n                elif choice < 0.6:\n                    return 5  # Kick\n                else:\n                    return 6  # Block\n    \n    elif distance < medium_range:\n        # Medium range positioning and tactics\n        if opponent_attacking and distance < 0.25:\n            # Opponent might reach us, be defensive\n            if random.random() < 0.5:\n                return 6  # Block\n            elif relative_pos > 0:\n                return 7  # Move left blocking\n            else:\n                return 8  # Move right blocking\n        \n        elif can_use_projectile and distance > 0.2:\n            # Good projectile range\n            if am_winning or random.random() < 0.4:\n                return 9  # Projectile attack\n        \n        # Positioning for advantage\n        if am_winning:\n            # Advance when winning\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        elif am_losing and critical_situation:\n            # Create distance when in trouble\n            if can_use_projectile:\n                return 9  # Projectile\n            elif relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        else:\n            # Neutral positioning\n            positioning_choice = random.random()\n            if positioning_choice < 0.3:\n                return 1 if relative_pos > 0 else 2  # Move toward opponent\n            elif positioning_choice < 0.5 and can_use_projectile:\n                return 9  # Projectile\n            elif positioning_choice < 0.7:\n                return 3  # Jump for positioning\n            else:\n                return 0  # Wait and observe\n    \n    else:\n        # Long range tactics\n        if can_use_projectile:\n            # Primary long-range option\n            projectile_chance = 0.7\n            if am_losing:\n                projectile_chance = 0.8  # More projectiles when losing\n            elif am_winning:\n                projectile_chance = 0.6  # Slightly fewer when winning\n            \n            if random.random() < projectile_chance:\n                return 9  # Projectile attack\n        \n        # Movement and positioning at long range\n        if am_winning:\n            # Advance to pressure opponent\n            advance_choice = random.random()\n            if advance_choice < 0.4:\n                return 2 if relative_pos > 0 else 1  # Move toward opponent\n            elif advance_choice < 0.6:\n                return 3  # Jump advance\n            else:\n                return 0  # Patient approach\n        \n        elif am_losing and not critical_situation:\n            # Careful advance when behind\n            if random.random() < 0.5:\n                return 2 if relative_pos > 0 else 1  # Cautious advance\n            else:\n                return 0  # Wait for opportunity\n        \n        else:\n            # Neutral or critical situation\n            if critical_situation:\n                # Very defensive\n                if can_use_projectile:\n                    return 9  # Keep distance with projectiles\n                else:\n                    return 0  # Wait for projectile cooldown\n            else:\n                # Balanced long-range approach\n                choice = random.random()\n                if choice < 0.3:\n                    return 2 if relative_pos > 0 else 1  # Advance\n                elif choice < 0.5:\n                    return 3  # Jump",
      "fighting_style": "balanced",
      "creation_time": 1748763419.260832,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_006",
      "generation": 1,
      "fitness": 180.74933333332945,
      "win_rate": 0.3333333333333333,
      "avg_reward": 258.2133333333278,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0\n    \n    # Extract player and opponent info\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position_x = state[0]\n    opponent_position_x = state[11]\n    my_velocity = state[3] if len(state) > 3 else 0\n    opponent_velocity = state[14] if len(state) > 14 else 0\n    \n    # Extract combat status information\n    my_block_status = state[5] if len(state) > 5 else 0\n    opponent_attack_status = state[16] if len(state) > 16 else 0\n    my_projectile_cooldown = state[7] if len(state) > 7 else 0\n    opponent_projectile_cooldown = state[18] if len(state) > 18 else 0\n    my_attack_status = state[4] if len(state) > 4 else 0\n    opponent_block_status = state[17] if len(state) > 17 else 0\n    \n    # Advanced zoner strategy constants\n    perfect_zone = 0.45      # Ideal projectile distance\n    comfort_zone = 0.35      # Good projectile range\n    danger_zone = 0.15       # Too close, need escape\n    panic_zone = 0.08        # Emergency escape needed\n    max_range = 0.6          # Maximum effective range\n    \n    # Health and aggression thresholds\n    critical_health = 0.25\n    low_health = 0.4\n    dominating_threshold = 0.5\n    losing_threshold = -0.3\n    \n    # Stage positioning awareness\n    stage_center = 0.5\n    corner_proximity = 0.75\n    my_corner_distance = abs(my_position_x - stage_center)\n    opponent_corner_distance = abs(opponent_position_x - stage_center)\n    \n    # Calculate tactical situation\n    im_cornered = my_corner_distance > corner_proximity\n    opponent_cornered = opponent_corner_distance > corner_proximity\n    projectile_available = my_projectile_cooldown < 0.15\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.15\n    \n    # Movement prediction based on velocity\n    opponent_approaching = (relative_pos > 0 and opponent_velocity < -0.1) or (relative_pos < 0 and opponent_velocity > 0.1)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity > 0.1) or (relative_pos < 0 and opponent_velocity < -0.1)\n    \n    # Combat state analysis\n    under_pressure = opponent_attack_status > 0.3 or opponent_approaching\n    safe_to_attack = opponent_block_status < 0.2 and not opponent_approaching\n    opponent_vulnerable = opponent_attack_status > 0.5 or opponent_cornered\n    \n    # Health-based strategy modifiers\n    desperate_mode = my_health < critical_health\n    conservative_mode = my_health < low_health and health_advantage < 0\n    aggressive_mode = health_advantage > dominating_threshold\n    patience_mode = health_advantage > 0.2 and my_health > 0.6\n    \n    # Emergency panic situations\n    if desperate_mode and distance < panic_zone:\n        if under_pressure:\n            # Block and try to escape\n            if im_cornered:\n                return 6  # Block in place\n            elif relative_pos > 0:\n                return 7  # Move left blocking\n            else:\n                return 8  # Move right blocking\n        else:\n            # Quick escape without blocking\n            if im_cornered:\n                if my_position_x < stage_center:\n                    return 2  # Move toward center\n                else:\n                    return 1  # Move toward center\n            elif relative_pos > 0:\n                return 1  # Move left\n            else:\n                return 2  # Move right\n    \n    # Ultra close range - immediate escape protocol\n    if distance < panic_zone:\n        escape_direction = 1 if relative_pos > 0 else 2\n        \n        # If cornered, move toward center\n        if im_cornered:\n            center_direction = 2 if my_position_x < stage_center else 1\n            if under_pressure:\n                return 7 if center_direction == 1 else 8  # Block while escaping\n            else:\n                return center_direction\n        \n        # Normal escape\n        if under_pressure or conservative_mode:\n            return 7 if escape_direction == 1 else 8  # Block while escaping\n        else:\n            return escape_direction\n    \n    # Danger zone - careful retreat\n    elif distance < danger_zone:\n        # If opponent is attacking, prioritize defense\n        if under_pressure:\n            if desperate_mode:\n                return 6  # Pure block\n            elif random.random() < 0.7:\n                return 6  # Block most of the time\n            else:\n                # Try to escape with block\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n        \n        # Aggressive counter if dominating and opponent vulnerable\n        elif aggressive_mode and opponent_vulnerable and random.random() < 0.4:\n            if random.random() < 0.7:\n                return 4  # Quick punch\n            else:\n                return 5  # Kick for more damage\n        \n        # Standard retreat\n        else:\n            retreat_direction = 1 if relative_pos > 0 else 2\n            \n            # Handle corner situations\n            if im_cornered:\n                center_direction = 2 if my_position_x < stage_center else 1\n                if conservative_mode:\n                    return 7 if center_direction == 1 else 8  # Block while moving\n                else:\n                    return center_direction\n            \n            # Normal retreat\n            if conservative_mode or random.random() < 0.5:\n                return 7 if retreat_direction == 1 else 8  # Block while retreating\n            else:\n                return retreat_direction\n    \n    # Medium range - transition zone\n    elif distance < comfort_zone:\n        # If losing badly, prioritize getting to projectile range\n        if health_advantage < losing_threshold:\n            retreat_direction = 1 if relative_pos > 0 else 2\n            \n            if im_cornered:\n                center_direction = 2 if my_position_x < stage_center else 1\n                return center_direction\n            else:\n                return retreat_direction\n        \n        # If projectile ready and good position\n        elif projectile_available and safe_to_attack:\n            if random.random() < 0.8:\n                return 9  # Fire projectile\n            else:\n                # Reposition for better angle\n                if random.random() < 0.5:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        \n        # Projectile on cooldown - maintain distance and wait\n        else:\n            target_distance = comfort_zone + 0.1\n            \n            if distance < target_distance - 0.05:\n                # Too close, back up\n                retreat_direction = 1 if relative_pos > 0 else 2\n                return retreat_direction\n            elif distance > target_distance + 0.05:\n                # Too far, move closer\n                approach_direction = 2 if relative_pos > 0 else 1\n                return approach",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371425,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_017",
      "generation": 0,
      "fitness": 180.41999999999135,
      "win_rate": 0.0,
      "avg_reward": 180.41999999999135,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_velocity_x = state[3]\n    my_velocity_y = state[4]\n    my_attack_cooldown = state[7]\n    my_block_status = state[8]\n    my_projectile_cooldown = state[9]\n    \n    # Extract opponent information\n    opp_health = state[12] if state[12] >= 0 else 0.5\n    opp_velocity_x = state[14]\n    opp_velocity_y = state[15]\n    opp_attack_status = state[16]\n    opp_block_status = state[19]\n    opp_projectile_cooldown = state[20]\n    \n    # Define tactical parameters for hit-and-run style\n    close_range = 0.12\n    strike_range = 0.18\n    medium_range = 0.35\n    safe_range = 0.45\n    \n    # Hit-and-run aggression factors\n    retreat_threshold = 0.2\n    strike_confidence = 0.3\n    health_panic_level = -0.4\n    \n    # Emergency defensive behavior when health is critical\n    if health_advantage < health_panic_level or my_health < 0.2:\n        if distance < retreat_threshold:\n            # Immediate retreat with blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < medium_range:\n            # Keep retreating to safe distance\n            if relative_pos > 0:\n                return 1  # Move left\n            else:\n                return 2  # Move right\n        else:\n            # Use projectiles from safe distance\n            if my_projectile_cooldown <= 0:\n                return 9  # Projectile\n            else:\n                return 6  # Block while waiting\n    \n    # Detect if opponent is attacking or about to attack\n    opponent_threatening = (opp_attack_status > 0.5 or \n                          (distance < strike_range and opp_velocity_x != 0))\n    \n    # Hit-and-run strike opportunities\n    if distance <= strike_range and not opponent_threatening:\n        # Perfect striking distance and opponent seems vulnerable\n        if my_attack_cooldown <= 0:\n            # Quick strike decision based on positioning\n            if distance <= close_range:\n                # Very close - mix up attacks\n                if random.random() < 0.4:\n                    return 4  # Quick punch\n                elif random.random() < 0.7:\n                    return 5  # Stronger kick\n                else:\n                    # Immediate retreat after considering attack\n                    if relative_pos > 0:\n                        return 1  # Move left to retreat\n                    else:\n                        return 2  # Move right to retreat\n            else:\n                # At strike range - favor quick attacks\n                if random.random() < 0.6:\n                    return 4  # Quick punch for hit-and-run\n                else:\n                    return 5  # Kick when confident\n        else:\n            # Attack on cooldown - retreat immediately\n            if relative_pos > 0:\n                return 1  # Move left\n            else:\n                return 2  # Move right\n    \n    # Immediate threat response - opponent is attacking\n    if opponent_threatening and distance < medium_range:\n        if distance < close_range:\n            # Very close threat - block or retreat with block\n            if random.random() < 0.6:\n                return 6  # Pure block\n            else:\n                # Retreat while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n        else:\n            # Medium threat - evasive movement\n            if relative_pos > 0:\n                return 1  # Move left to evade\n            else:\n                return 2  # Move right to evade\n    \n    # Hit-and-run positioning logic\n    if distance > safe_range:\n        # Too far - need to close in for strike opportunity\n        if my_projectile_cooldown <= 0 and random.random() < 0.4:\n            return 9  # Projectile while closing\n        else:\n            # Move toward opponent\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n    \n    elif distance > medium_range:\n        # Good medium range for projectiles and positioning\n        if my_projectile_cooldown <= 0 and random.random() < 0.6:\n            return 9  # Projectile attack\n        elif health_advantage > strike_confidence:\n            # Winning - can afford to be more aggressive\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        else:\n            # Maintain distance while looking for opportunities\n            if random.random() < 0.3:\n                if relative_pos > 0:\n                    return 2  # Slight advance\n                else:\n                    return 1  # Slight advance\n            else:\n                return 0  # Wait for better opportunity\n    \n    elif distance > strike_range:\n        # Approaching strike range - prepare for hit-and-run\n        if opp_block_status > 0.5:\n            # Opponent is blocking - wait or reposition\n            if random.random() < 0.4:\n                return 0  # Wait for opening\n            else:\n                # Try to get better angle\n                if relative_pos > 0:\n                    return 1  # Move left for angle\n                else:\n                    return 2  # Move right for angle\n        elif health_advantage > 0:\n            # Winning and in good position - advance for strike\n            if relative_pos > 0:\n                return 2  # Move right for attack\n            else:\n                return 1  # Move left for attack\n        else:\n            # Even or losing - be more cautious\n            if my_projectile_cooldown <= 0:\n                return 9  # Projectile\n            else:\n                return 0  # Wait\n    \n    else:\n        # Within strike range - hit-and-run execution\n        if my_attack_cooldown <= 0 and not opp_block_status > 0.5:\n            # Can attack and opponent not blocking\n            if random.random() < 0.7:\n                return 4  # Quick punch for hit-and-run\n            else:\n                return 5  # Kick when feeling confident\n        else:\n            # Can't attack effectively - retreat\n            if distance < close_range:\n                # Too close - retreat with urgency\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            else:\n                # Maintain distance\n                if random.random() < 0.5:\n                    return 6  # Block while repositioning\n                else:\n                    return 0  # Wait for cooldown\n    \n    # Adaptive behavior based on opponent patterns\n    if opp_velocity_x == 0 and distance < medium_range:\n        # Opponent is stationary - good strike opportunity\n        if my_attack_cooldown <= 0 and distance <= strike_range:\n            return 4  # Quick strike\n        elif distance > strike_range:\n            # Close in for strike\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n    \n    # Height advantage",
      "fighting_style": "hit_and_run",
      "creation_time": 1748763419.260834,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_elite_002",
      "generation": 4,
      "fitness": 177.5619999999956,
      "win_rate": 0.5,
      "avg_reward": 253.65999999999374,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[2]))\n    my_position = state[0]\n    my_velocity_x = state[7]\n    my_velocity_y = state[8]\n    my_attack_status = max(0.0, state[4])\n    my_block_status = max(0.0, state[5])\n    my_projectile_cooldown = max(0.0, state[6])\n    \n    # Extract opponent status\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_position = state[11]\n    opponent_velocity_x = state[18]\n    opponent_velocity_y = state[19]\n    opponent_attack_status = max(0.0, state[15])\n    opponent_block_status = max(0.0, state[16])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Strategic range definitions for hybrid approach\n    ultra_close_range = 0.05\n    close_range = 0.12\n    mid_range = 0.25\n    far_range = 0.4\n    ultra_far_range = 0.6\n    \n    # Health thresholds\n    critical_health = 0.15\n    low_health = 0.35\n    good_health = 0.65\n    \n    # Positioning thresholds\n    corner_threshold = 0.8\n    near_corner_threshold = 0.65\n    center_zone = 0.3\n    \n    # Status checks\n    projectile_ready = my_projectile_cooldown < 0.08\n    projectile_charging = my_projectile_cooldown < 0.15\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.1\n    \n    # Movement analysis\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x > -0.2) or (relative_pos < 0 and opponent_velocity_x < 0.2)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.3) or (relative_pos < 0 and opponent_velocity_x > 0.3)\n    opponent_airborne = abs(height_diff) > 0.25\n    \n    # Positioning awareness\n    am_cornered = abs(my_position) > corner_threshold\n    am_near_corner = abs(my_position) > near_corner_threshold\n    opponent_cornered = abs(opponent_position) > corner_threshold\n    in_center = abs(my_position) < center_zone\n    \n    # Adaptive aggression calculation\n    base_aggression = 0.65\n    health_modifier = health_advantage * 0.35\n    distance_modifier = (mid_range - distance) * 0.4\n    position_modifier = 0.15 if opponent_cornered else (-0.1 if am_cornered else 0)\n    current_aggression = max(0.25, min(0.9, base_aggression + health_modifier + distance_modifier + position_modifier))\n    \n    # Defense priority system\n    defense_urgency = 0.4\n    if my_health < critical_health:\n        defense_urgency = 0.85\n    elif my_health < low_health:\n        defense_urgency = 0.65\n    elif health_advantage < -0.4:\n        defense_urgency = 0.7\n    \n    # Emergency survival mode - critical health\n    if my_health <= critical_health:\n        if opponent_attack_status > 0 and distance < mid_range:\n            return 6  # Priority block\n        \n        if distance < close_range:\n            if am_cornered:\n                # Cornered and desperate\n                if projectile_ready and random.random() < 0.4:\n                    return 9  # Point blank projectile gamble\n                elif opponent_airborne:\n                    return 4  # Anti-air attempt\n                else:\n                    return 6  # Block and hope\n            else:\n                # Escape with blocking movement\n                escape_direction = 7 if relative_pos > 0 else 8\n                return escape_direction\n        \n        # Create space when possible\n        if distance < mid_range and not am_cornered:\n            retreat_direction = 1 if relative_pos > 0 else 2\n            return retreat_direction\n        \n        # Long range chip damage attempt\n        if projectile_ready and distance > mid_range:\n            return 9\n        \n        return 6  # Default to blocking\n    \n    # Opponent attack response system\n    if opponent_attack_status > 0:\n        threat_level = 1.0 - distance\n        \n        if distance < ultra_close_range:\n            return 6  # Must block at point blank\n        elif distance < close_range:\n            if my_health > low_health and not am_near_corner:\n                # Mobile defense\n                defensive_move = 7 if relative_pos > 0 else 8\n                return defensive_move if random.random() < 0.7 else 6\n            else:\n                return 6  # Safe block\n        elif distance < mid_range:\n            # Medium range threat\n            if projectile_ready and random.random() < 0.5:\n                return 9  # Counter projectile\n            else:\n                return 6  # Block incoming\n        else:\n            # Long range attack - advance or counter\n            if projectile_ready:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Anti-air system\n    if opponent_airborne:\n        if distance < mid_range:\n            if projectile_ready:\n                return 9  # Projectile anti-air\n            elif distance < close_range:\n                return 4  # Quick anti-air punch\n            else:\n                # Position for landing punish\n                return 2 if relative_pos > 0 else 1\n        elif distance < far_range and projectile_ready:\n            return 9  # Long range anti-air\n    \n    # Projectile warfare management\n    if opponent_projectile_ready and distance > mid_range:\n        if projectile_ready:\n            if random.random() < 0.6:\n                return 9  # Projectile duel\n            else:\n                # Evasive approach\n                return 2 if relative_pos > 0 else 1\n        else:\n            # Dodge or advance\n            if distance > far_range:\n                return 2 if relative_pos > 0 else 1\n            else:\n                return 3 if random.random() < 0.3 else 6\n    \n    # Range-based hybrid combat system\n    \n    # Ultra close range - explosive mixups\n    if distance <= ultra_close_range:\n        if current_aggression > 0.6:\n            if opponent_block_status > 0:\n                # Guard pressure sequence\n                choice = random.random()\n                if choice < 0.35 and projectile_ready:\n                    return 9  # Point blank projectile mixup\n                elif choice < 0.7:\n                    return 5  # Power kick guard break\n                else:\n                    # Micro spacing\n                    return 1 if relative_pos > 0.2 else 2\n            else:\n                # Open opponent - damage maximize\n                return 5 if random.random() < 0.65 else 4\n        else:\n            # Defensive reset\n            if random.random() < defense_urgency:\n                return 6\n            else:\n                return 4  # Quick",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904298,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_010",
      "generation": 4,
      "fitness": 174.41666666666202,
      "win_rate": 0.3333333333333333,
      "avg_reward": 249.16666666666003,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[2]))\n    my_position = state[0]\n    my_velocity_x = state[7]\n    my_velocity_y = state[8]\n    my_attack_status = max(0.0, state[4])\n    my_block_status = max(0.0, state[5])\n    my_projectile_cooldown = max(0.0, state[6])\n    \n    # Extract opponent status\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_position = state[11]\n    opponent_velocity_x = state[18]\n    opponent_velocity_y = state[19]\n    opponent_attack_status = max(0.0, state[15])\n    opponent_block_status = max(0.0, state[16])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Hybrid tactical range definitions\n    point_blank_range = 0.03\n    ultra_close_range = 0.08\n    close_range = 0.15\n    mid_close_range = 0.22\n    mid_range = 0.35\n    far_range = 0.5\n    ultra_far_range = 0.7\n    \n    # Health and positioning thresholds\n    critical_health = 0.12\n    low_health = 0.3\n    good_health = 0.7\n    corner_threshold = 0.75\n    center_zone = 0.4\n    \n    # Status analysis\n    projectile_ready = my_projectile_cooldown < 0.1\n    projectile_available = my_projectile_cooldown < 0.2\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.15\n    opponent_airborne = abs(height_diff) > 0.2\n    \n    # Movement and positioning analysis\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x > -0.1) or (relative_pos < 0 and opponent_velocity_x < 0.1)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.25) or (relative_pos < 0 and opponent_velocity_x > 0.25)\n    am_cornered = abs(my_position) > corner_threshold\n    opponent_cornered = abs(opponent_position) > corner_threshold\n    in_center = abs(my_position) < center_zone\n    \n    # Dynamic aggression calculation for hybrid approach\n    base_aggression = 0.6\n    health_modifier = health_advantage * 0.3\n    distance_modifier = max(-0.2, min(0.2, (mid_range - distance) * 0.5))\n    position_modifier = 0.2 if opponent_cornered else (-0.15 if am_cornered else 0.05)\n    momentum_modifier = 0.1 if opponent_retreating else (-0.05 if opponent_advancing else 0)\n    \n    current_aggression = max(0.2, min(0.95, base_aggression + health_modifier + distance_modifier + position_modifier + momentum_modifier))\n    \n    # Adaptive defense priority\n    defense_priority = 0.35\n    if my_health < critical_health:\n        defense_priority = 0.8\n    elif my_health < low_health:\n        defense_priority = 0.55\n    elif health_advantage < -0.35:\n        defense_priority = 0.65\n    elif opponent_attack_status > 0.6:\n        defense_priority = 0.7\n    \n    # Critical survival mode\n    if my_health <= critical_health:\n        if opponent_attack_status > 0.4 and distance < mid_range:\n            return 6  # Emergency block\n        \n        if distance <= ultra_close_range:\n            if projectile_ready and random.random() < 0.35:\n                return 9  # Desperate point-blank projectile\n            elif opponent_airborne:\n                return 4  # Anti-air attempt\n            else:\n                return 6  # Block and pray\n        \n        if distance < close_range and not am_cornered:\n            # Escape with defensive movement\n            escape_dir = 7 if relative_pos > 0 else 8\n            return escape_dir\n        \n        if distance > mid_range and projectile_ready:\n            return 9  # Long range chip damage\n        \n        if distance < mid_range:\n            retreat_dir = 1 if relative_pos > 0 else 2\n            return retreat_dir\n        \n        return 6  # Default defensive\n    \n    # Enhanced opponent attack response\n    if opponent_attack_status > 0.3:\n        threat_proximity = 1.0 - distance\n        \n        if distance <= point_blank_range:\n            return 6  # Must block at point blank\n        \n        elif distance <= ultra_close_range:\n            if my_health > low_health and current_aggression > 0.7:\n                # Risky counter-attack\n                return 4 if random.random() < 0.4 else 6\n            else:\n                return 6  # Safe block\n        \n        elif distance <= close_range:\n            defense_chance = defense_priority + (threat_proximity * 0.3)\n            if random.random() < defense_chance:\n                if am_cornered:\n                    return 6  # Static block when cornered\n                else:\n                    # Mobile defense\n                    return 7 if relative_pos > 0 else 8\n            else:\n                # Counter with projectile if available\n                if projectile_ready:\n                    return 9\n                else:\n                    return 6\n        \n        elif distance <= mid_range:\n            if projectile_ready and random.random() < 0.6:\n                return 9  # Counter-projectile\n            elif random.random() < 0.4:\n                return 6  # Block\n            else:\n                # Advance during opponent's attack\n                return 2 if relative_pos > 0 else 1\n        \n        else:\n            # Long range opponent attack - advance or counter\n            if projectile_ready:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Advanced anti-air system\n    if opponent_airborne:\n        if distance <= mid_range:\n            if projectile_ready and distance > ultra_close_range:\n                return 9  # Projectile anti-air\n            elif distance <= close_range:\n                return 4  # Quick anti-air punch\n            else:\n                # Position for landing punish\n                return 2 if relative_pos > 0 else 1\n        elif distance <= far_range and projectile_ready:\n            return 9  # Long range anti-air\n        else:\n            # Close distance while opponent is airborne\n            return 2 if relative_pos > 0 else 1\n    \n    # Projectile warfare and spacing\n    if opponent_projectile_threat and distance > mid_close_range:\n        if projectile_ready:\n            projectile_duel_chance = 0.7 if distance > mid_range else 0.4\n            if random.random() < projectile_duel_chance:\n                return 9  # Projectile trade\n            else:\n                # Evasive advance\n                if random.random() < 0.3:\n                    return 3  # Jump approach\n                else:\n                    return 2 if relative_pos > 0 else 1",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904304,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_027",
      "generation": 2,
      "fitness": 173.54399999999399,
      "win_rate": 0.5,
      "avg_reward": 247.9199999999914,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent status\n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define tactical ranges\n    touching_range = 0.06\n    ultra_close_range = 0.12\n    close_range = 0.2\n    medium_range = 0.35\n    far_range = 0.55\n    \n    # Balanced aggression calculation with adaptive elements\n    base_aggression = 0.65\n    health_factor = 0.3 * health_advantage\n    position_factor = 0.1 if 0.25 < my_pos_x < 0.75 else -0.1\n    distance_factor = 0.2 if distance < close_range else -0.1\n    current_aggression = max(0.2, min(0.9, base_aggression + health_factor + position_factor + distance_factor))\n    \n    # Opponent behavioral analysis\n    opponent_retreating = False\n    opponent_aggressive = False\n    opponent_defensive = False\n    \n    if distance > ultra_close_range:\n        if relative_pos > 0 and opponent_velocity_x < -0.15:\n            opponent_retreating = True\n        elif relative_pos < 0 and opponent_velocity_x > 0.15:\n            opponent_retreating = True\n    \n    if opponent_attack_status > 0.4 or (distance < close_range and abs(opponent_velocity_x) > 0.1):\n        opponent_aggressive = True\n    \n    if opponent_block_status > 0.5 or (opponent_attack_status < 0.2 and distance < medium_range):\n        opponent_defensive = True\n    \n    # Critical health management\n    if my_health < 0.2:\n        if health_advantage < -0.4:\n            # Defensive survival mode\n            if opponent_attack_status > 0.6:\n                return 6  # Block incoming attack\n            if distance > medium_range and my_projectile_cooldown < 0.3:\n                return 9  # Keep distance with projectiles\n            # Retreat while blocking\n            if my_pos_x < 0.3:\n                return 8  # Move right while blocking\n            elif my_pos_x > 0.7:\n                return 7  # Move left while blocking\n            else:\n                return 6  # Block in center\n        else:\n            # Calculated risk taking\n            if distance < close_range and opponent_health < 0.3:\n                # Go for risky finisher\n                attack_choice = random.random()\n                if attack_choice < 0.6:\n                    return 5  # Kick for higher damage\n                else:\n                    return 4  # Punch for speed\n    \n    # Corner management system\n    opponent_cornered = opponent_pos_x < 0.18 or opponent_pos_x > 0.82\n    i_am_cornered = my_pos_x < 0.18 or my_pos_x > 0.82\n    \n    # Escape corner tactics\n    if i_am_cornered:\n        if distance < close_range and opponent_aggressive:\n            # Block and escape\n            escape_direction = 8 if my_pos_x < 0.5 else 7\n            if opponent_attack_status > 0.5:\n                return escape_direction\n            else:\n                # Quick escape without blocking\n                return 2 if my_pos_x < 0.5 else 1\n        elif distance < medium_range:\n            # Jump over opponent or dash out\n            if random.random() < 0.35:\n                return 3  # Jump escape\n            else:\n                return 2 if my_pos_x < 0.5 else 1\n    \n    # Corner pressure tactics\n    if opponent_cornered and distance < medium_range:\n        current_aggression = min(0.85, current_aggression + 0.15)\n        # Mix up attacks to prevent easy escapes\n        if distance < close_range:\n            if opponent_block_status > 0.6:\n                # Break guard with varied attacks\n                guard_break = random.random()\n                if guard_break < 0.25:\n                    return 3  # Jump for overhead\n                elif guard_break < 0.4 and my_projectile_cooldown < 0.4:\n                    return 9  # Projectile pressure\n                else:\n                    return 5  # Strong kick\n            else:\n                # Standard corner pressure\n                return 4 if random.random() < 0.7 else 5\n    \n    # Range-based tactical decisions\n    if distance <= touching_range:\n        # Point blank range\n        if opponent_attack_status > 0.7:\n            # Opponent attacking, need to block or counter\n            if random.random() < 0.3:\n                return 6  # Block\n            else:\n                # Counter attack\n                return 4  # Quick punch counter\n        else:\n            # Free to attack\n            if health_advantage > 0.2:\n                # Winning, be aggressive\n                return 5 if random.random() < 0.6 else 4\n            else:\n                # Even or losing, be careful\n                if opponent_block_status > 0.5:\n                    return 6  # Respect their block\n                else:\n                    return 4  # Quick safe attack\n    \n    elif distance <= ultra_close_range:\n        # Ultra close combat\n        if opponent_aggressive and my_health > 0.4:\n            # Trade hits when healthy\n            attack_type = random.random()\n            if attack_type < 0.5:\n                return 4  # Punch\n            elif attack_type < 0.8:\n                return 5  # Kick\n            else:\n                return 6  # Block and counter\n        elif opponent_defensive:\n            # Break defensive play\n            if opponent_block_status > 0.6:\n                pressure_option = random.random()\n                if pressure_option < 0.3:\n                    return 3  # Jump overhead\n                elif pressure_option < 0.5 and my_projectile_cooldown < 0.5:\n                    return 9  # Projectile pressure\n                else:\n                    return 5  # Strong attack\n            else:\n                return 4 if random.random() < 0.7 else 5\n        else:\n            # Standard close combat\n            if random.random() < current_aggression:\n                return",
      "fighting_style": "evolved",
      "creation_time": 1748769390.97837,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_023",
      "generation": 4,
      "fitness": 169.039999999993,
      "win_rate": 0.0,
      "avg_reward": 169.039999999993,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter state with bounds checking\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 1.0\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_y_pos = state[2] if len(state) > 2 else 0.5\n    my_x_vel = state[3] if len(state) > 3 else 0.0\n    my_y_vel = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[7] if len(state) > 7 else 0.0\n    my_blocking = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = max(0.0, state[10]) if len(state) > 10 else 0.0\n    \n    # Extract opponent state with bounds checking\n    opponent_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 1.0\n    opponent_x_pos = state[11] if len(state) > 11 else 0.5\n    opponent_y_pos = state[13] if len(state) > 13 else 0.5\n    opponent_x_vel = state[14] if len(state) > 14 else 0.0\n    opponent_y_vel = state[15] if len(state) > 15 else 0.0\n    opponent_attacking = state[18] if len(state) > 18 else 0.0\n    opponent_blocking = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = max(0.0, state[21]) if len(state) > 21 else 0.0\n    \n    # Hybrid tactical ranges with refined thresholds\n    ultra_close = 0.08\n    close_range = 0.16\n    medium_range = 0.35\n    far_range = 0.55\n    \n    # Dynamic strategy parameters\n    base_aggression = 0.58\n    adaptation_factor = 0.0\n    positioning_bonus = 0.0\n    tempo_control = 0.0\n    \n    # Advanced health momentum calculation\n    if health_advantage > 0.2:\n        adaptation_factor = min(0.25, health_advantage * 0.4)\n    elif health_advantage < -0.2:\n        adaptation_factor = max(-0.35, health_advantage * 0.6)\n    \n    # Stage control assessment\n    center_control = 1.0 - abs(my_x_pos * 2)  # Higher when closer to center\n    edge_danger = max(0, abs(my_x_pos) - 0.75) * 4  # Penalty near edges\n    positioning_bonus = (center_control * 0.08) - (edge_danger * 0.12)\n    \n    # Tempo control based on projectile management\n    projectile_advantage = 0.0\n    if my_projectile_cooldown < 0.2 and opponent_projectile_cooldown > 0.5:\n        projectile_advantage = 0.15\n    elif my_projectile_cooldown > 0.5 and opponent_projectile_cooldown < 0.2:\n        projectile_advantage = -0.12\n    tempo_control = projectile_advantage\n    \n    # Calculate dynamic aggression level\n    current_aggression = max(0.1, min(0.85, \n        base_aggression + adaptation_factor + positioning_bonus + tempo_control))\n    \n    # Enhanced opponent pattern recognition\n    opponent_velocity_total = abs(opponent_x_vel) + abs(opponent_y_vel)\n    opponent_mobile = opponent_velocity_total > 0.05\n    \n    # Movement pattern analysis\n    opponent_advancing = False\n    opponent_retreating = False\n    opponent_flanking = False\n    \n    movement_threshold = 0.025\n    if relative_pos > 0 and opponent_x_vel > movement_threshold:\n        opponent_advancing = True\n    elif relative_pos < 0 and opponent_x_vel < -movement_threshold:\n        opponent_advancing = True\n    elif relative_pos > 0 and opponent_x_vel < -movement_threshold:\n        opponent_retreating = True\n    elif relative_pos < 0 and opponent_x_vel > movement_threshold:\n        opponent_retreating = True\n    elif opponent_mobile and not opponent_advancing and not opponent_retreating:\n        opponent_flanking = True\n    \n    # Opponent archetype detection\n    opponent_rusher = opponent_advancing and opponent_attacking > 0.4 and distance < 0.25\n    opponent_zoner = opponent_projectile_cooldown < 0.25 and distance > 0.4\n    opponent_turtle = opponent_blocking > 0.65 and opponent_velocity_total < 0.02\n    opponent_technical = opponent_blocking > 0.3 and opponent_attacking > 0.3\n    opponent_aggressive = opponent_attacking > 0.5 and distance < 0.3\n    \n    # Crisis management system\n    if my_health < 0.15 or health_advantage < -0.6:\n        crisis_distance_threshold = 0.2\n        \n        if distance < crisis_distance_threshold:\n            if opponent_attacking > 0.6:\n                return 6  # Emergency block\n            elif opponent_blocking > 0.7:\n                # Try to create space from turtle\n                if abs(my_x_pos) > 0.8:\n                    return 3  # Jump when cornered\n                else:\n                    if relative_pos > 0:\n                        return 7  # Retreat with block\n                    else:\n                        return 8\n            else:\n                # Desperate counter-attack\n                if random.random() < 0.4:\n                    return 4  # Quick punch\n                else:\n                    return 6  # Play safe\n        else:\n            # Long range crisis management\n            if my_projectile_cooldown < 0.3 and distance > 0.3:\n                return 9  # Zoning attempt\n            elif opponent_advancing:\n                return 6  # Block incoming rush\n            else:\n                # Try to maintain distance\n                if relative_pos > 0:\n                    return 1  # Move away\n                else:\n                    return 2\n    \n    # Victory condition exploitation\n    if opponent_health < 0.18 and health_advantage > 0.2:\n        if distance < medium_range:\n            # Finishing pressure\n            if opponent_blocking > 0.6:\n                finish_option = random.random()\n                if finish_option < 0.35:\n                    return 5  # Heavy kick to break guard\n                elif finish_option < 0.6:\n                    return 3  # Jump attack\n                elif finish_option < 0.8:\n                    return 9 if my_projectile_cooldown < 0.4 else 4\n                else:\n                    return 4  # Safe pressure\n            else:\n                # Direct finishing attempts\n                if random.random() < 0.6:\n                    return 5  # Power finish\n                else:\n                    return 4  # Speed finish\n        else:\n            # Close distance for finish\n            if distance > far_range and my_projectile_cooldown < 0.25:\n                return 9  # Projectile finish attempt\n            else:\n                if relative_pos > 0:\n                    return 2  # Advance for finish",
      "fighting_style": "evolved",
      "creation_time": 1748775503.90431,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_014",
      "generation": 0,
      "fitness": 168.76999999999498,
      "win_rate": 0.5,
      "avg_reward": 241.09999999999283,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[2]\n    my_y_pos = state[3]\n    my_x_vel = state[4]\n    my_y_vel = state[5]\n    my_attacking = state[6]\n    my_blocking = state[7]\n    my_stunned = state[8]\n    my_projectile_cooldown = state[10]\n    \n    opponent_health = state[12] if state[12] >= 0 else 0.5\n    opponent_x_pos = state[13]\n    opponent_y_pos = state[14]\n    opponent_x_vel = state[15]\n    opponent_y_vel = state[16]\n    opponent_attacking = state[17]\n    opponent_blocking = state[18]\n    opponent_stunned = state[19]\n    \n    # Define tactical ranges and thresholds\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.5\n    critical_health = -0.4\n    winning_health = 0.3\n    \n    # Adaptive strategy parameters based on health advantage\n    if health_advantage < critical_health:\n        # Defensive survival mode\n        aggression_level = 0.2\n        block_tendency = 0.8\n        projectile_preference = 0.7\n    elif health_advantage < -0.1:\n        # Cautious disadvantage mode\n        aggression_level = 0.4\n        block_tendency = 0.6\n        projectile_preference = 0.5\n    elif health_advantage > winning_health:\n        # Aggressive winning mode\n        aggression_level = 0.8\n        block_tendency = 0.2\n        projectile_preference = 0.3\n    else:\n        # Balanced neutral mode\n        aggression_level = 0.6\n        block_tendency = 0.4\n        projectile_preference = 0.4\n    \n    # Emergency defensive responses\n    if my_stunned > 0.5:\n        return 6  # Block while stunned\n    \n    if opponent_attacking > 0.5 and distance < close_range:\n        if random.random() < block_tendency:\n            return 6  # Block incoming attack\n    \n    # Opponent behavior analysis for adaptation\n    opponent_moving_toward = False\n    if relative_pos > 0 and opponent_x_vel > 0.1:\n        opponent_moving_toward = True\n    elif relative_pos < 0 and opponent_x_vel < -0.1:\n        opponent_moving_toward = True\n    \n    opponent_retreating = False\n    if relative_pos > 0 and opponent_x_vel < -0.1:\n        opponent_retreating = True\n    elif relative_pos < 0 and opponent_x_vel > 0.1:\n        opponent_retreating = True\n    \n    # Range-based tactical decisions\n    if distance < close_range:\n        # Close combat zone\n        if health_advantage < critical_health:\n            # Survival mode in close range\n            if opponent_attacking > 0.5:\n                return 6  # Block\n            elif opponent_blocking > 0.5:\n                # Try to create distance\n                if relative_pos > 0:\n                    return 7  # Move left while blocking\n                else:\n                    return 8  # Move right while blocking\n            else:\n                # Quick escape attempt\n                if abs(relative_pos) > 0.5:\n                    return 3  # Jump to create distance\n                else:\n                    return 6  # Block\n        \n        elif health_advantage > winning_health:\n            # Aggressive close combat when winning\n            if opponent_blocking > 0.5:\n                # Mix up attacks against blocking opponent\n                attack_choice = random.random()\n                if attack_choice < 0.4:\n                    return 5  # Kick to break block\n                elif attack_choice < 0.7:\n                    return 4  # Fast punch\n                else:\n                    return 3  # Jump attack\n            else:\n                # Normal aggressive attacks\n                if random.random() < 0.6:\n                    return 4  # Fast punch\n                else:\n                    return 5  # Strong kick\n        \n        else:\n            # Balanced close combat\n            if opponent_blocking > 0.5:\n                # Counter blocking opponent\n                if random.random() < 0.5:\n                    return 5  # Kick\n                else:\n                    return 3  # Jump\n            elif opponent_attacking > 0.5:\n                if random.random() < block_tendency:\n                    return 6  # Block\n                else:\n                    return 4  # Counter attack\n            else:\n                # Normal close combat\n                combat_choice = random.random()\n                if combat_choice < 0.5:\n                    return 4  # Punch\n                elif combat_choice < 0.8:\n                    return 5  # Kick\n                else:\n                    return 6  # Block\n    \n    elif distance < medium_range:\n        # Medium range positioning zone\n        if health_advantage < critical_health:\n            # Maintain distance when losing\n            if opponent_moving_toward:\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n            else:\n                # Use projectiles if available\n                if my_projectile_cooldown < 0.3:\n                    return 9  # Projectile\n                else:\n                    return 6  # Block\n        \n        elif health_advantage > winning_health:\n            # Aggressive positioning when winning\n            if opponent_retreating:\n                # Chase retreating opponent\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Close distance for attack\n                positioning_choice = random.random()\n                if positioning_choice < 0.6:\n                    if relative_pos > 0:\n                        return 2  # Move right toward opponent\n                    else:\n                        return 1  # Move left toward opponent\n                elif positioning_choice < 0.8:\n                    return 3  # Jump approach\n                else:\n                    return 9  # Projectile\n        \n        else:\n            # Balanced medium range tactics\n            if opponent_attacking > 0.5:\n                # Defensive positioning\n                if random.random() < 0.6:\n                    return 6  # Block\n                else:\n                    if relative_pos > 0:\n                        return 7  # Move left blocking\n                    else:\n                        return 8  # Move right blocking\n            \n            elif opponent_blocking > 0.5:\n                # Attack blocking opponent\n                if my_projectile_cooldown < 0.3:\n                    return 9  # Projectile\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move right to close\n                    else:\n                        return 1  # Move left to close\n            \n            else:\n                # Normal medium range tactics\n                medium_choice = random.random()\n                if medium_choice < 0.3:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                elif medium_choice < 0.6:\n                    return 9  # Projectile\n                elif medium_choice < 0.8:\n                    return 3  # Jump\n                else:\n                    return 6  # Block",
      "fighting_style": "adaptive",
      "creation_time": 1748763419.2608352,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_006",
      "generation": 2,
      "fitness": 168.6533333333277,
      "win_rate": 0.5,
      "avg_reward": 240.9333333333253,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity = state[3]\n    opponent_velocity = state[14]\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Enhanced balanced fighter parameters\n    strike_range = 0.12\n    close_range = 0.18\n    medium_range = 0.35\n    long_range = 0.55\n    critical_health = 0.20\n    dominant_health = 0.30\n    winning_threshold = 0.20\n    losing_threshold = -0.25\n    \n    # Dynamic adaptation factors\n    momentum = abs(my_velocity) + abs(opponent_velocity)\n    randomness = random.random()\n    aggression_level = min(1.0, max(0.2, 0.6 + health_advantage * 0.4))\n    \n    # Emergency survival mode\n    if my_health < critical_health or health_advantage < -0.4:\n        if distance < close_range:\n            if opponent_attack_status > 0.4:\n                # Defensive evasion under pressure\n                if randomness < 0.3:\n                    return 6  # Block\n                elif randomness < 0.6:\n                    return 3  # Jump away\n                else:\n                    if relative_pos > 0:\n                        return 7  # Move left with block\n                    else:\n                        return 8  # Move right with block\n            else:\n                # Quick escape\n                if randomness < 0.7:\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                else:\n                    return 3  # Jump retreat\n        elif distance < medium_range and projectile_cooldown < 0.2:\n            return 9  # Maintain distance with projectile\n        else:\n            # Defensive positioning\n            if randomness < 0.5:\n                return 6  # Block and wait\n            else:\n                return 0  # Stay ready\n    \n    # Finishing aggression when dominant\n    if health_advantage > winning_threshold and opponent_health < dominant_health:\n        if distance < strike_range:\n            if opponent_block_status < 0.3:\n                # Execute finishing combination\n                if randomness < 0.4:\n                    return 5  # Power kick\n                elif randomness < 0.7:\n                    return 4  # Quick punch\n                else:\n                    # Setup for next strike\n                    if relative_pos > 0:\n                        return 2  # Position right\n                    else:\n                        return 1  # Position left\n            else:\n                # Break guard\n                if randomness < 0.4:\n                    return 3  # Jump attack\n                elif randomness < 0.7:\n                    if relative_pos > 0:\n                        return 2  # Circle right\n                    else:\n                        return 1  # Circle left\n                else:\n                    return 4  # Pressure with punch\n        elif distance < medium_range:\n            # Aggressive approach\n            if opponent_projectile_cooldown > 0.3:\n                if relative_pos > 0:\n                    return 2  # Close in\n                else:\n                    return 1  # Close in\n            elif projectile_cooldown < 0.15:\n                return 9  # Projectile pressure\n    \n    # Balanced close combat strategy\n    if distance < strike_range:\n        # Immediate post-attack retreat for hit-and-run\n        if my_attack_status > 0.4:\n            retreat_method = randomness\n            if retreat_method < 0.4:\n                if relative_pos > 0:\n                    return 1  # Quick left retreat\n                else:\n                    return 2  # Quick right retreat\n            elif retreat_method < 0.7:\n                return 3  # Jump retreat\n            else:\n                if relative_pos > 0:\n                    return 7  # Protected left retreat\n                else:\n                    return 8  # Protected right retreat\n        \n        # Counter opponent blocking\n        if opponent_block_status > 0.5:\n            counter_block = randomness\n            if counter_block < 0.3:\n                return 3  # Jump over guard\n            elif counter_block < 0.6:\n                if relative_pos > 0:\n                    return 2  # Reposition right\n                else:\n                    return 1  # Reposition left\n            elif counter_block < 0.8:\n                return 5  # Power kick to break\n            else:\n                return 6  # Wait for opening\n        \n        # Respond to opponent attacks\n        if opponent_attack_status > 0.5:\n            counter_response = randomness\n            if health_advantage > 0 and counter_response < 0.3:\n                return 4  # Counter punch\n            elif counter_response < 0.5:\n                return 6  # Block counter\n            elif counter_response < 0.7:\n                return 3  # Jump counter\n            else:\n                if relative_pos > 0:\n                    return 7  # Retreat with block\n                else:\n                    return 8  # Retreat with block\n        \n        # Clean striking opportunity\n        strike_choice = randomness * aggression_level\n        if strike_choice < 0.25:\n            return 4  # Fast punch\n        elif strike_choice < 0.45:\n            return 5  # Power kick\n        elif strike_choice < 0.65:\n            # Feint and reposition\n            if relative_pos > 0:\n                return 1  # Move left\n            else:\n                return 2  # Move right\n        elif strike_choice < 0.8:\n            return 3  # Jump attack\n        else:\n            return 6  # Block and counter setup\n    \n    elif distance < close_range:\n        # Close range tactical zone\n        threat_level = opponent_attack_status + max(0, 1.0 - opponent_projectile_cooldown)\n        \n        # High threat response\n        if threat_level > 0.7:\n            defensive_action = randomness\n            if defensive_action < 0.4:\n                return 6  # Block threat\n            elif defensive_action < 0.7:\n                if relative_pos > 0:\n                    return 7  # Move left with block\n                else:\n                    return 8  # Move right with block\n            else:\n                return 3  # Jump over threat\n        \n        # Balanced positioning based on health\n        if health_advantage > 0:\n            # Winning - controlled aggression\n            if randomness < aggression_level * 0.6:\n                if relative_pos > 0:\n                    return 2  # Move in right\n                else:\n                    return 1  # Move in left\n            elif randomness < 0.8:\n                if projectile_cooldown < 0.2:\n                    return 9  # Projectile pressure\n                else:\n                    return 0  # Wait for opportunity\n            else:\n                return 3  # Jump approach\n        else:\n            # Losing - cautious positioning\n            if randomness < 0.4:\n                if relative_pos > 0:\n                    return 1  # Move left away",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978372,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_008",
      "generation": 4,
      "fitness": 167.8973333333282,
      "win_rate": 0.5,
      "avg_reward": 239.85333333332602,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[2]))\n    my_position = state[0]\n    my_velocity_x = state[7]\n    my_velocity_y = state[8]\n    my_attack_status = max(0.0, state[4])\n    my_block_status = max(0.0, state[5])\n    my_projectile_cooldown = max(0.0, state[6])\n    \n    # Extract opponent status\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_position = state[11]\n    opponent_velocity_x = state[18]\n    opponent_velocity_y = state[19]\n    opponent_attack_status = max(0.0, state[15])\n    opponent_block_status = max(0.0, state[16])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Enhanced tactical range definitions\n    point_blank = 0.04\n    ultra_close = 0.08\n    close_range = 0.15\n    mid_close = 0.24\n    medium_range = 0.38\n    mid_far = 0.52\n    far_range = 0.68\n    max_range = 0.85\n    \n    # Refined health thresholds\n    critical_hp = 0.12\n    low_hp = 0.28\n    mid_hp = 0.5\n    good_hp = 0.72\n    excellent_hp = 0.88\n    \n    # Advanced positioning analysis\n    left_corner = my_position < -0.8\n    right_corner = my_position > 0.8\n    near_left_edge = my_position < -0.65\n    near_right_edge = my_position > 0.65\n    center_stage = abs(my_position) < 0.3\n    opponent_left_corner = opponent_position < -0.75\n    opponent_right_corner = opponent_position > 0.75\n    \n    # Enhanced status tracking\n    projectile_ready = my_projectile_cooldown < 0.05\n    projectile_charging = my_projectile_cooldown < 0.12\n    projectile_soon = my_projectile_cooldown < 0.25\n    opponent_proj_ready = opponent_projectile_cooldown < 0.08\n    opponent_proj_charging = opponent_projectile_cooldown < 0.18\n    \n    # Advanced movement pattern recognition\n    opponent_advancing_fast = (relative_pos > 0 and opponent_velocity_x < -0.35) or (relative_pos < 0 and opponent_velocity_x > 0.35)\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x < -0.15) or (relative_pos < 0 and opponent_velocity_x > 0.15)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.2) or (relative_pos < 0 and opponent_velocity_x < -0.2)\n    opponent_airborne = abs(height_diff) > 0.2 or abs(opponent_velocity_y) > 0.15\n    opponent_falling = opponent_velocity_y > 0.12 and height_diff < -0.08\n    my_airborne = abs(my_velocity_y) > 0.12\n    \n    # Hybrid aggression system with momentum tracking\n    base_aggression = 0.58\n    momentum_factor = 0.0\n    \n    # Health-based aggression adjustment\n    if health_advantage > 0.5:\n        momentum_factor += 0.25\n    elif health_advantage > 0.2:\n        momentum_factor += 0.12\n    elif health_advantage < -0.5:\n        momentum_factor -= 0.35\n    elif health_advantage < -0.2:\n        momentum_factor -= 0.18\n    \n    # Distance-based aggression modifier\n    if distance < close_range:\n        momentum_factor += 0.15\n    elif distance > far_range:\n        momentum_factor -= 0.1\n    \n    # Position advantage modifier\n    if opponent_left_corner or opponent_right_corner:\n        momentum_factor += 0.2\n    elif left_corner or right_corner:\n        momentum_factor -= 0.25\n    \n    current_aggression = max(0.2, min(0.9, base_aggression + momentum_factor))\n    \n    # Critical health emergency protocols\n    if my_health <= critical_hp:\n        # Immediate survival mode\n        if opponent_attack_status > 0.4 and distance < medium_range:\n            if distance <= ultra_close:\n                # Point blank defense\n                if left_corner and relative_pos < 0:\n                    return 8 if random.random() < 0.7 else 3\n                elif right_corner and relative_pos > 0:\n                    return 7 if random.random() < 0.7 else 3\n                else:\n                    return 6\n            elif distance < close_range:\n                # Close range evasive blocking\n                if not left_corner and relative_pos > 0:\n                    return 7\n                elif not right_corner and relative_pos < 0:\n                    return 8\n                else:\n                    return 6\n            else:\n                # Medium range blocking\n                return 6\n        \n        # Desperate spacing management\n        if distance < close_range:\n            if left_corner or right_corner:\n                # Cornered - try to escape\n                if projectile_ready and distance > ultra_close:\n                    return 9  # Desperation projectile\n                elif opponent_airborne:\n                    return 4  # Anti-air attempt\n                else:\n                    # Try to escape corner\n                    if left_corner and relative_pos > -0.5:\n                        return 2\n                    elif right_corner and relative_pos < 0.5:\n                        return 1\n                    else:\n                        return 6\n            else:\n                # Create distance when possible\n                if relative_pos > 0 and not near_left_edge:\n                    return 1\n                elif relative_pos < 0 and not near_right_edge:\n                    return 2\n                else:\n                    return 6\n        \n        # Long range survival tactics\n        if distance > medium_range and projectile_ready:\n            return 9\n        \n        # Default survival block\n        return 6\n    \n    # Enhanced threat response system\n    if opponent_attack_status > 0.5:\n        threat_intensity = opponent_attack_status / max(distance, 0.05)\n        \n        if threat_intensity > 4.0:  # Extreme threat\n            if my_health <= low_hp:\n                return 6  # Prioritize survival\n            else:\n                # Calculated counter-risk\n                if projectile_ready and distance > ultra_close and random.random() < 0.4:\n                    return 9  # Counter projectile\n                else:\n                    return 6\n        elif threat_intensity > 2.5:  # High threat\n            if distance <= ultra_close:\n                return 6  # Must block\n            elif distance < close_range:\n                # Mobile defense consideration\n                if my_health > mid_hp and not (left_corner or right_corner):\n                    return 7 if relative_pos > 0 else 8\n                else:\n                    return 6\n            else:\n                # Medium range threat assessment\n                if projectile_ready and random.random() < 0.6:\n                    return 9",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904316,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_001",
      "generation": 0,
      "fitness": 167.22533333332805,
      "win_rate": 0.5,
      "avg_reward": 238.89333333332578,
      "code": "import random\nimport numpy as np\nimport math\n\ndef get_action(state):\n    # Defensive programming - validate state input\n    if state is None or len(state) < 26:\n        return 6  # Default to block if invalid state\n    \n    # Extract key strategic information with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player and opponent status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_position_x = state[0] if len(state) > 0 else 0.5\n    my_velocity_x = state[2] if len(state) > 2 else 0.0\n    my_velocity_y = state[3] if len(state) > 3 else 0.0\n    my_attack_status = state[4] if len(state) > 4 else 0.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_position_x = state[11] if len(state) > 11 else 0.5\n    opponent_velocity_x = state[13] if len(state) > 13 else 0.0\n    opponent_attack_status = state[15] if len(state) > 15 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define strategic thresholds for defensive play\n    close_combat_range = 0.12\n    medium_range = 0.25\n    safe_range = 0.45\n    critical_health = 0.3\n    comfortable_health_lead = 0.2\n    \n    # Defensive style parameters\n    block_probability_base = 0.4\n    counter_attack_window = 0.3\n    retreat_threshold = 0.15\n    projectile_spam_distance = 0.5\n    \n    # Emergency defensive actions when health is critical\n    if my_health < critical_health:\n        # Prioritize survival over aggression\n        if distance < close_combat_range:\n            # Very close - high chance to block or retreat\n            if opponent_attack_status > 0.5:\n                return 6  # Block incoming attack\n            elif relative_pos > 0:\n                return 7  # Move left while blocking (retreat)\n            else:\n                return 8  # Move right while blocking (retreat)\n        elif distance < medium_range:\n            # Medium range - create distance\n            if relative_pos > 0:\n                return 7  # Retreat left with block\n            else:\n                return 8  # Retreat right with block\n        else:\n            # Far range - use projectiles to chip damage\n            if my_projectile_cooldown < 0.1:\n                return 9  # Safe projectile\n            else:\n                return 6  # Block while waiting for cooldown\n    \n    # Comfortable health lead - maintain distance and control\n    if health_advantage > comfortable_health_lead:\n        if distance > safe_range:\n            # Very safe - projectile spam\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile attack\n            else:\n                # Move to maintain optimal projectile distance\n                if relative_pos > 0:\n                    return 2  # Move right to maintain distance\n                else:\n                    return 1  # Move left to maintain distance\n        elif distance > medium_range:\n            # Medium-far range - control space\n            if my_projectile_cooldown < 0.2:\n                return 9  # Projectile\n            elif random.random() < 0.3:\n                return 6  # Occasional block to stay defensive\n            else:\n                # Maintain spacing\n                if opponent_velocity_x > 0.1 and relative_pos < 0:\n                    return 1  # Move away from approaching opponent\n                elif opponent_velocity_x < -0.1 and relative_pos > 0:\n                    return 2  # Move away from approaching opponent\n                else:\n                    return 0  # Idle and observe\n        else:\n            # Close range with health advantage - careful aggression\n            if opponent_attack_status > 0.5:\n                return 6  # Block opponent's attack\n            elif random.random() < 0.6:\n                return 6  # Stay defensive even with advantage\n            else:\n                # Controlled counter-attack\n                if random.random() < 0.7:\n                    return 4  # Quick punch\n                else:\n                    return 5  # Stronger kick\n    \n    # Standard defensive play - balanced approach\n    if distance < close_combat_range:\n        # Close combat - high blocking priority\n        if opponent_attack_status > 0.3:\n            # Opponent is attacking - definitely block\n            return 6\n        elif my_block_status > 0.5:\n            # Already blocking - look for counter opportunity\n            if random.random() < counter_attack_window:\n                if random.random() < 0.8:\n                    return 4  # Quick counter punch\n                else:\n                    return 5  # Counter kick\n            else:\n                return 6  # Continue blocking\n        else:\n            # Not currently blocking - decide based on situation\n            block_chance = block_probability_base\n            \n            # Increase block chance based on opponent aggression\n            if opponent_velocity_x != 0:\n                block_chance += 0.2\n            if distance < 0.08:\n                block_chance += 0.3\n            \n            if random.random() < block_chance:\n                return 6  # Block\n            else:\n                # Counter-attack opportunity\n                if health_advantage > 0:\n                    # Slight advantage - more aggressive counter\n                    if random.random() < 0.6:\n                        return 4  # Punch\n                    else:\n                        return 5  # Kick\n                else:\n                    # No advantage - quick counter only\n                    return 4  # Safe punch\n    \n    elif distance < medium_range:\n        # Medium range - positioning and spacing\n        if opponent_attack_status > 0.5:\n            # Opponent attacking - block while moving\n            if relative_pos > 0:\n                return 7  # Block and move left\n            else:\n                return 8  # Block and move right\n        elif opponent_velocity_x > 0.2:\n            # Opponent rushing - prepare defense\n            if relative_pos < 0:  # Opponent coming from left\n                if random.random() < 0.7:\n                    return 8  # Block and move right (away)\n                else:\n                    return 6  # Stand and block\n            else:  # Opponent coming from right\n                if random.random() < 0.7:\n                    return 7  # Block and move left (away)\n                else:\n                    return 6  # Stand and block\n        else:\n            # Neutral medium range - control space\n            if my_projectile_cooldown < 0.3:\n                if random.random() < 0.4:\n                    return 9  # Projectile attack\n                else:\n                    return 6  # Block (stay defensive)\n            else:\n                # No projectile available - positioning\n                if random.random() < 0.5:\n                    return 6  # Block and wait\n                else:\n                    # Adjust position slightly\n                    if my_position_x < 0.3:  # Near left edge\n                        return 2  # Move right\n                    elif my_position_x > 0.7:  # Near right edge\n                        return 1  # Move left",
      "fighting_style": "defensive",
      "creation_time": 1748763419.2608361,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_010",
      "generation": 1,
      "fitness": 166.33866666666106,
      "win_rate": 0.5,
      "avg_reward": 237.62666666665865,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player state information with bounds checking\n    my_health = max(0.0, min(1.0, state[3])) if len(state) > 3 else 1.0\n    my_position = state[1] if len(state) > 1 else 0.5\n    my_velocity = state[2] if len(state) > 2 else 0.0\n    my_attack_state = state[7] if len(state) > 7 else 0.0\n    my_block_state = state[8] if len(state) > 8 else 0.0\n    my_attack_cooldown = max(0.0, state[9]) if len(state) > 9 else 0.0\n    my_projectile_cooldown = max(0.0, state[10]) if len(state) > 10 else 0.0\n    \n    # Extract opponent state information\n    opp_health = max(0.0, min(1.0, state[14])) if len(state) > 14 else 1.0\n    opp_position = state[12] if len(state) > 12 else 0.5\n    opp_velocity = state[13] if len(state) > 13 else 0.0\n    opp_attack_state = state[18] if len(state) > 18 else 0.0\n    opp_block_state = state[19] if len(state) > 19 else 0.0\n    opp_attack_cooldown = max(0.0, state[20]) if len(state) > 20 else 0.0\n    opp_projectile_cooldown = max(0.0, state[21]) if len(state) > 21 else 0.0\n    \n    # Define hybrid tactical ranges and thresholds\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.32\n    long_range = 0.55\n    \n    # Health-based tactical states\n    critical_health = 0.2\n    low_health = 0.35\n    good_health = 0.65\n    excellent_health = 0.85\n    \n    # Advantage thresholds for adaptive strategy\n    desperate_threshold = -0.5\n    losing_threshold = -0.2\n    even_threshold = 0.1\n    winning_threshold = 0.3\n    dominating_threshold = 0.5\n    \n    # Wall proximity detection for positioning\n    near_left_wall = my_position < -0.7\n    near_right_wall = my_position > 0.7\n    near_any_wall = near_left_wall or near_right_wall\n    \n    # Opponent state analysis\n    opponent_attacking = opp_attack_state > 0.5\n    opponent_blocking = opp_block_state > 0.5\n    opponent_vulnerable = opp_attack_cooldown > 0.3\n    opponent_moving_fast = abs(opp_velocity) > 0.3\n    \n    # My state analysis\n    can_attack = my_attack_cooldown < 0.1\n    can_projectile = my_projectile_cooldown < 0.1\n    am_attacking = my_attack_state > 0.5\n    am_blocking = my_block_state > 0.5\n    \n    # Immediate threat assessment and emergency responses\n    immediate_threat = opponent_attacking and distance < 0.18\n    projectile_incoming = distance > 0.4 and opp_projectile_cooldown > 0.7\n    \n    # Emergency blocking system\n    if immediate_threat:\n        if my_health < low_health:\n            # Critical health - prioritize survival\n            if near_any_wall:\n                return 6  # Block in place\n            elif relative_pos > 0.2:\n                return 7  # Block and escape left\n            else:\n                return 8  # Block and escape right\n        else:\n            # Healthy enough for positioning while blocking\n            if distance < ultra_close_range:\n                return 6  # Perfect block timing\n            elif relative_pos > 0:\n                return 7  # Block while repositioning left\n            else:\n                return 8  # Block while repositioning right\n    \n    # Critical health survival mode\n    if my_health < critical_health:\n        if distance > long_range:\n            # Maximum range survival\n            if can_projectile and not opponent_attacking:\n                return 9  # Safe projectile\n            elif near_any_wall:\n                # Escape from wall\n                if near_left_wall:\n                    return 8  # Move right with block\n                else:\n                    return 7  # Move left with block\n            else:\n                return 6  # Defensive stance\n        \n        elif distance > medium_range:\n            # Medium range survival\n            if opponent_attacking:\n                return 6  # Block incoming attacks\n            elif can_projectile and random.random() < 0.6:\n                return 9  # Harassment projectile\n            else:\n                # Create more distance\n                if relative_pos > 0:\n                    return 7  # Move away with block\n                else:\n                    return 8  # Move away with block\n        \n        else:\n            # Close range survival\n            if opponent_vulnerable and can_attack and random.random() < 0.3:\n                return 4  # Quick desperate punch\n            else:\n                return 6  # Block everything\n    \n    # Determine primary strategy based on health advantage\n    if health_advantage < desperate_threshold:\n        strategy = \"survival\"\n    elif health_advantage < losing_threshold:\n        strategy = \"defensive\"\n    elif health_advantage < even_threshold:\n        strategy = \"balanced_defensive\"\n    elif health_advantage < winning_threshold:\n        strategy = \"balanced_aggressive\"\n    elif health_advantage < dominating_threshold:\n        strategy = \"aggressive\"\n    else:\n        strategy = \"finish\"\n    \n    # Ultra close range combat (touching distance)\n    if distance < ultra_close_range:\n        if strategy in [\"survival\", \"defensive\"]:\n            if opponent_vulnerable and can_attack:\n                return 4  # Quick counter punch\n            else:\n                return 6  # Block everything\n        \n        elif strategy in [\"balanced_defensive\", \"balanced_aggressive\"]:\n            if opponent_attacking:\n                return 6  # Block first\n            elif opponent_vulnerable and can_attack:\n                if random.random() < 0.7:\n                    return 4  # Fast punch\n                else:\n                    return 5  # Power kick\n            elif opponent_blocking:\n                # Mix up against blocking opponent\n                if random.random() < 0.4:\n                    return 5  # Kick to break guard\n                elif random.random() < 0.7:\n                    # Reposition around block\n                    if relative_pos > 0:\n                        return 1  # Move left around\n                    else:\n                        return 2  # Move right around\n                else:\n                    return 6  # Block and wait\n            else:\n                return 4  # Default quick attack\n        \n        else:  # aggressive or finish\n            if opponent_attacking:\n                if random.random() < 0.3:\n                    return 6  # Sometimes block\n                else:\n                    return 4  # Trade with quick punch\n            elif can_attack:\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Quick punch\n                elif attack_choice < 0.8:\n                    return 5  # Power kick\n                else:\n                    return 6  # Fake defensive\n            else:\n                return 6  # Wait",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371427,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_026",
      "generation": 0,
      "fitness": 164.93093333332843,
      "win_rate": 0.3333333333333333,
      "avg_reward": 232.7133333333264,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player and opponent state information\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_pos_x = state[0]\n    my_velocity_x = state[2]\n    my_velocity_y = state[3]\n    my_is_attacking = state[4] > 0.5\n    my_is_blocking = state[5] > 0.5\n    my_projectile_cooldown = state[6]\n    my_stun_timer = state[7] if len(state) > 7 else 0.0\n    my_combo_count = state[8] if len(state) > 8 else 0.0\n    my_energy = state[9] if len(state) > 9 else 1.0\n    my_is_grounded = state[10] > 0.5 if len(state) > 10 else True\n    \n    opp_health = state[12] if state[12] >= 0 else 0.5\n    opp_pos_x = state[11]\n    opp_velocity_x = state[13]\n    opp_velocity_y = state[14]\n    opp_is_attacking = state[15] > 0.5\n    opp_is_blocking = state[16] > 0.5\n    opp_projectile_cooldown = state[17]\n    opp_stun_timer = state[18] if len(state) > 18 else 0.0\n    opp_combo_count = state[19] if len(state) > 19 else 0.0\n    opp_energy = state[20] if len(state) > 20 else 1.0\n    opp_is_grounded = state[21] > 0.5 if len(state) > 21 else True\n    \n    # Define tactical ranges and thresholds\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.25\n    winning_threshold = 0.2\n    losing_threshold = -0.3\n    \n    # Counter-puncher strategic parameters\n    patience_factor = 0.75  # Higher means more patient\n    counter_window = 0.8    # Reaction time to opponent attacks\n    defensive_bonus = 0.6   # Extra defensive behavior\n    punish_aggression = 0.85 # How much to punish opponent mistakes\n    \n    # Emergency defensive mode when critically low health\n    if my_health < critical_health and health_advantage < -0.4:\n        if distance < close_range:\n            if opp_is_attacking:\n                return 6  # Block incoming attack\n            elif relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < medium_range:\n            # Create distance when low health\n            if relative_pos > 0:\n                return 7  # Retreat left with block\n            else:\n                return 8  # Retreat right with block\n        else:\n            # Long range harassment\n            if my_projectile_cooldown < 0.3:\n                return 9  # Projectile attack\n            else:\n                return 6  # Block while cooldown recovers\n    \n    # Counter-attack when opponent is vulnerable\n    if opp_stun_timer > 0.3 or (opp_is_attacking and distance < close_range):\n        if distance < close_range:\n            # Punish with strong attacks\n            if random.random() < punish_aggression:\n                return 5 if my_energy > 0.4 else 4  # Kick or punch based on energy\n            else:\n                return 4  # Quick punch counter\n        elif distance < medium_range:\n            # Close in for counter-attack\n            if relative_pos > 0:\n                return 2  # Move right to close distance\n            else:\n                return 1  # Move left to close distance\n    \n    # Opponent is attacking - defensive counter-puncher response\n    if opp_is_attacking:\n        if distance < close_range:\n            # In danger zone - prioritize defense\n            if random.random() < defensive_bonus:\n                return 6  # Block the attack\n            else:\n                # Counter-attack opportunity\n                if my_velocity_x * relative_pos < 0:  # Moving toward opponent\n                    return 4  # Quick counter punch\n                else:\n                    return 6  # Play it safe with block\n        elif distance < medium_range:\n            # Medium range - position for counter\n            if opp_velocity_x * relative_pos > 0:  # Opponent advancing\n                return 6  # Prepare to block\n            else:\n                # Opponent retreating - pursue carefully\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        else:\n            # Long range - wait and projectile\n            if my_projectile_cooldown < 0.2:\n                return 9  # Projectile while they attack air\n            else:\n                return 0  # Wait patiently\n    \n    # Opponent is blocking - probe for openings\n    if opp_is_blocking:\n        if distance < close_range:\n            # Try to break guard or reposition\n            if random.random() < 0.4:\n                return 5  # Strong kick to break block\n            elif random.random() < 0.3:\n                # Try to get behind them\n                if relative_pos > 0:\n                    return 1  # Move left to get around\n                else:\n                    return 2  # Move right to get around\n            else:\n                return 0  # Wait for them to drop guard\n        elif distance < medium_range:\n            # Maintain pressure but stay safe\n            if my_projectile_cooldown < 0.3:\n                return 9  # Projectile pressure\n            else:\n                # Slight positioning adjustment\n                if abs(relative_pos) > 0.1:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    return 0  # Wait for opening\n        else:\n            # Long range against blocker\n            if my_projectile_cooldown < 0.4:\n                return 9  # Projectile harassment\n            else:\n                return 0  # Patient waiting\n    \n    # Health-based strategic adjustments\n    if health_advantage > winning_threshold:\n        # Winning - controlled aggression\n        if distance < close_range:\n            if random.random() < 0.6:\n                return 5 if my_energy > 0.5 else 4  # Strong attacks when winning\n            else:\n                return 6  # Still defensive but less so\n        elif distance < medium_range:\n            # Press advantage by closing distance\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n        else:\n            # Long range control\n            if my_projectile_cooldown < 0.5:\n                return 9  # Projectile\n            else:\n                # Close to medium range\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n    \n    elif health_advantage < losing_threshold:\n        # Losing - extra defensive\n        if distance < close_range:\n            if random.random() < 0.8:\n                return 6  # Heavy blocking when losing\n            else:\n                # Desperate counter\n                return",
      "fighting_style": "counter_puncher",
      "creation_time": 1748763419.260837,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_015",
      "generation": 1,
      "fitness": 158.1999999999932,
      "win_rate": 0.0,
      "avg_reward": 158.1999999999932,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0\n    \n    # Extract player and opponent info\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position_x = state[0]\n    opponent_position_x = state[11]\n    my_velocity_x = state[3] if len(state) > 3 else 0\n    opponent_velocity_x = state[14] if len(state) > 14 else 0\n    \n    # Extract combat status with bounds checking\n    my_block_status = max(0.0, min(1.0, state[5])) if len(state) > 5 else 0\n    opponent_attack_status = max(0.0, min(1.0, state[16])) if len(state) > 16 else 0\n    my_projectile_cooldown = max(0.0, min(1.0, state[7])) if len(state) > 7 else 0\n    opponent_projectile_cooldown = max(0.0, min(1.0, state[18])) if len(state) > 18 else 0\n    my_attack_status = max(0.0, min(1.0, state[6])) if len(state) > 6 else 0\n    opponent_block_status = max(0.0, min(1.0, state[17])) if len(state) > 17 else 0\n    \n    # Enhanced zoner strategy constants\n    optimal_distance = 0.42     # Preferred fighting distance\n    max_zoner_range = 0.55      # Maximum effective range\n    danger_zone = 0.11          # Ultra close combat threshold\n    retreat_threshold = 0.18    # When to start retreating\n    projectile_range = 0.32     # Effective projectile distance\n    health_crisis = 0.25        # Critical health level\n    domination_threshold = 0.35 # When we're winning decisively\n    \n    # Stage position and movement analysis\n    stage_center = 0.5\n    stage_quarter = 0.25\n    my_corner_distance = min(abs(my_position_x), abs(my_position_x - 1.0))\n    opponent_corner_distance = min(abs(opponent_position_x), abs(opponent_position_x - 1.0))\n    near_corner = my_corner_distance < 0.2\n    opponent_cornered = opponent_corner_distance < 0.15\n    \n    # Advanced tactical analysis\n    is_critical_health = my_health < health_crisis\n    is_dominating = health_advantage > domination_threshold\n    is_losing_badly = health_advantage < -0.3\n    is_losing = health_advantage < -0.1\n    projectile_ready = my_projectile_cooldown < 0.05\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.05\n    opponent_aggressive = opponent_attack_status > 0.3\n    currently_attacking = my_attack_status > 0.3\n    opponent_blocking = opponent_block_status > 0.3\n    \n    # Movement prediction and positioning\n    opponent_approaching = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    closing_speed = abs(my_velocity_x) + abs(opponent_velocity_x) if opponent_approaching else 0\n    \n    # Zoner pattern recognition\n    opponent_rushdown = opponent_approaching and distance < 0.3\n    opponent_zoning = opponent_projectile_ready and distance > 0.4\n    space_control_needed = distance < optimal_distance and not is_dominating\n    \n    # Emergency survival mode\n    if is_critical_health:\n        # Absolute priority: survive\n        if distance < danger_zone:\n            if opponent_aggressive:\n                return 6  # Block critical attack\n            elif near_corner:\n                # Escape corner with movement\n                if my_position_x < stage_center:\n                    return 8  # Move right blocking\n                else:\n                    return 7  # Move left blocking\n            else:\n                # Create emergency distance\n                if relative_pos > 0:\n                    return 7  # Move left blocking\n                else:\n                    return 8  # Move right blocking\n        \n        elif distance < retreat_threshold:\n            # Still too close when critical\n            if opponent_aggressive and random.random() < 0.7:\n                return 6  # Block first\n            else:\n                # Retreat to safety\n                if near_corner:\n                    if my_position_x < stage_center:\n                        return 2  # Move right toward center\n                    else:\n                        return 1  # Move left toward center\n                else:\n                    if relative_pos > 0:\n                        return 1  # Move left away\n                    else:\n                        return 2  # Move right away\n        \n        elif projectile_ready and distance > 0.25:\n            # Desperate projectile attempts\n            return 9\n        \n        else:\n            # Get to projectile range safely\n            if distance < projectile_range:\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            else:\n                return 0  # Wait for projectile cooldown\n    \n    # Ultra close range - immediate escape protocols\n    if distance < danger_zone:\n        # Cannot allow close combat as zoner\n        if opponent_aggressive:\n            # Block and escape\n            if near_corner:\n                if my_position_x < stage_center:\n                    return 8  # Move right blocking\n                else:\n                    return 7  # Move left blocking\n            else:\n                if random.random() < 0.6:\n                    if relative_pos > 0:\n                        return 7  # Move left blocking\n                    else:\n                        return 8  # Move right blocking\n                else:\n                    return 6  # Pure block\n        \n        elif is_dominating and random.random() < 0.25:\n            # Rare aggressive option when dominating\n            if random.random() < 0.7:\n                return 4  # Quick punch\n            else:\n                return 5  # Kick\n        \n        else:\n            # Standard escape\n            if near_corner:\n                # Priority: escape corner\n                if my_position_x < stage_center:\n                    if random.random() < 0.4:\n                        return 8  # Move right blocking\n                    else:\n                        return 2  # Move right fast\n                else:\n                    if random.random() < 0.4:\n                        return 7  # Move left blocking\n                    else:\n                        return 1  # Move left fast\n            else:\n                # Normal retreat\n                if closing_speed > 0.3:\n                    # Fast approach, block while moving\n                    if relative_pos > 0:\n                        return 7  # Move left blocking\n                    else:\n                        return 8  # Move right blocking\n                else:\n                    # Standard retreat\n                    if relative_pos > 0:\n                        if random.random() < 0.3:\n                            return 7  # Move left blocking\n                        else:\n                            return 1  # Move left\n                    else:\n                        if random.random() < 0.3:\n                            return 8  # Move",
      "fighting_style": "evolved",
      "creation_time": 1748766291.371428,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_elite_001",
      "generation": 4,
      "fitness": 156.22600000000244,
      "win_rate": 0.0,
      "avg_reward": 223.1800000000035,
      "code": "def get_action(state):\n    import random\n    import math\n    import numpy as np\n    \n    # Extract and validate key state information with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter information\n    my_x_pos = state[0]\n    my_y_pos = state[1] \n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent information\n    opp_x_pos = state[11]\n    opp_y_pos = state[12]\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    \n    # Advanced tactical parameters\n    close_range = 0.14\n    medium_range = 0.32\n    far_range = 0.5\n    \n    # Enhanced adaptive aggression system\n    base_aggression = 0.65\n    health_ratio = my_health / max(0.05, opp_health)\n    momentum_factor = health_advantage * 0.3\n    \n    # Calculate dynamic aggression level\n    if health_advantage > 0.5:\n        aggression_level = min(0.9, base_aggression * 1.6 + momentum_factor)\n    elif health_advantage > 0.2:\n        aggression_level = base_aggression * 1.3 + momentum_factor\n    elif health_advantage < -0.5:\n        aggression_level = max(0.25, base_aggression * 0.5 + momentum_factor)\n    elif health_advantage < -0.2:\n        aggression_level = base_aggression * 0.7 + momentum_factor\n    else:\n        aggression_level = base_aggression + momentum_factor * 0.5\n    \n    # Enhanced positioning awareness\n    near_left_wall = my_x_pos < 0.2\n    near_right_wall = my_x_pos > 0.8\n    in_corner = near_left_wall or near_right_wall\n    center_stage = 0.3 < my_x_pos < 0.7\n    \n    # Advanced movement prediction\n    opp_closing_fast = (relative_pos > 0 and opp_x_vel > 0.25) or (relative_pos < 0 and opp_x_vel < -0.25)\n    opp_retreating_fast = (relative_pos > 0 and opp_x_vel < -0.25) or (relative_pos < 0 and opp_x_vel > 0.25)\n    opp_aerial = abs(opp_y_vel) > 0.2 or abs(height_diff) > 0.3\n    \n    # Critical state overrides\n    if my_stunned > 0.5:\n        return 0\n    \n    # Enhanced critical health management\n    if my_health < 0.25:\n        if opp_attacking > 0.6 and distance < close_range:\n            return 6  # Emergency defense\n        elif distance > medium_range and my_projectile_cd < 0.15:\n            if random.random() < 0.8:\n                return 9  # Projectile harassment\n        \n        # Improved escape sequences\n        if distance < medium_range:\n            if in_corner:\n                if near_left_wall and relative_pos <= 0:\n                    return 8 if random.random() < 0.7 else 3\n                elif near_right_wall and relative_pos >= 0:\n                    return 7 if random.random() < 0.7 else 3\n                else:\n                    return 3  # Jump escape\n            else:\n                # Enhanced retreat with options\n                if opp_closing_fast:\n                    return 6  # Block incoming rush\n                else:\n                    retreat_choice = random.random()\n                    if retreat_choice < 0.6:\n                        return 7 if relative_pos > 0 else 8\n                    elif retreat_choice < 0.8:\n                        return 3  # Jump retreat\n                    else:\n                        return 9 if my_projectile_cd < 0.3 else 6\n    \n    # Enhanced opponent vulnerability exploitation\n    if opp_stunned > 0.4:\n        if distance <= close_range:\n            # Maximum damage combinations\n            if abs(height_diff) > 0.2:\n                if my_y_pos < opp_y_pos:\n                    return 3  # Jump strike\n                else:\n                    return 5  # Downward kick\n            else:\n                combo_roll = random.random()\n                if combo_roll < 0.5:\n                    return 5  # Heavy damage\n                elif combo_roll < 0.75:\n                    return 4  # Fast follow-up\n                else:\n                    return 3  # Repositioning attack\n        elif distance <= medium_range:\n            # Quick gap closing\n            if abs(height_diff) > 0.25:\n                return 3\n            elif my_projectile_cd < 0.2 and random.random() < 0.4:\n                return 9  # Projectile punish\n            else:\n                return 2 if relative_pos > 0 else 1\n        else:\n            # Long range punishment\n            if my_projectile_cd < 0.25:\n                return 9\n            else:\n                return 2 if relative_pos > 0 else 1\n    \n    # Advanced defensive responses with counter-attack options\n    if opp_attacking > 0.6:\n        if distance <= close_range:\n            # Close range defense with calculated risks\n            if aggression_level > 0.7 and my_health > opp_health * 1.2:\n                # Aggressive counter system\n                counter_roll = random.random()\n                if counter_roll < 0.35:\n                    return 4  # Quick counter\n                elif counter_roll < 0.55:\n                    return 3  # Jump counter\n                elif counter_roll < 0.75:\n                    return 6  # Safe block\n                else:\n                    return 5  # Risk/reward counter\n            else:\n                # Conservative defense with mobility\n                defense_roll = random.random()\n                if defense_roll < 0.6:\n                    return 6  # Primary defense\n                elif defense_roll < 0.8:\n                    return 7 if relative_pos > 0 else 8  # Evasive movement\n                else:\n                    return 3  # Jump defense\n        elif distance <= medium_range:\n            # Medium range threat response\n            if opp_closing_fast:\n                if my_projectile_cd < 0.2 and random.random() < 0.6:\n                    return 9  # Interrupt approach\n                else:\n                    return 6  # Prepare defense\n            else:\n                # Maintain range advantage\n                if my_projectile_cd < 0.3:\n                    return 9\n                elif aggression_level > 0.6:\n                    return 2 if relative_pos > 0 else 1",
      "fighting_style": "evolved",
      "creation_time": 1748775503.9043221,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_004",
      "generation": 1,
      "fitness": 150.45333333332795,
      "win_rate": 0.0,
      "avg_reward": 214.93333333332563,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_pos_x = state[2] if len(state) > 2 else 0.5\n    my_velocity_x = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_pos_x = state[13] if len(state) > 13 else 0.5\n    opponent_velocity_x = state[15] if len(state) > 15 else 0.0\n    opponent_attack_status = state[18] if len(state) > 18 else 0.0\n    opponent_block_status = state[19] if len(state) > 19 else 0.0\n    opponent_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define hybrid tactical parameters\n    ultra_close_range = 0.08\n    close_range = 0.15\n    medium_range = 0.3\n    far_range = 0.45\n    zoner_range = 0.6\n    \n    # Calculate stage positioning\n    stage_center = 0.5\n    my_corner_distance = min(my_pos_x, 1.0 - my_pos_x)\n    opponent_corner_distance = min(opponent_pos_x, 1.0 - opponent_pos_x)\n    near_corner = my_corner_distance < 0.2\n    opponent_cornered = opponent_corner_distance < 0.15\n    \n    # Dynamic strategy selection based on game state\n    health_ratio = my_health / max(opponent_health, 0.1)\n    momentum_factor = health_advantage + (my_health - opponent_health)\n    \n    # Determine current fighting mode\n    crisis_mode = my_health < 0.25 or health_advantage < -0.5\n    dominating_mode = health_advantage > 0.4 and my_health > 0.6\n    zoner_mode = distance > medium_range and my_projectile_cooldown < 0.3\n    rushdown_mode = health_ratio > 1.2 or (opponent_health < 0.4 and my_health > 0.5)\n    \n    # Opponent behavior analysis\n    opponent_aggressive = opponent_attack_status > 0.6\n    opponent_defensive = opponent_block_status > 0.7\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.2) or (relative_pos < 0 and opponent_velocity_x > 0.2)\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x > 0.2) or (relative_pos < 0 and opponent_velocity_x < -0.2)\n    \n    # Crisis management - survival first\n    if crisis_mode:\n        if distance < ultra_close_range and opponent_aggressive:\n            return 6  # Block critical hits\n        \n        if distance < close_range:\n            if near_corner:\n                # Escape corner with blocking movement\n                if my_pos_x < stage_center:\n                    return 8  # Move right while blocking\n                else:\n                    return 7  # Move left while blocking\n            else:\n                # Create space defensively\n                if opponent_aggressive:\n                    return 6  # Block first\n                else:\n                    if relative_pos > 0:\n                        return 7  # Move left blocking\n                    else:\n                        return 8  # Move right blocking\n        \n        elif distance < medium_range:\n            # Try to get to projectile range\n            if my_projectile_cooldown < 0.2:\n                return 9  # Use projectile to create space\n            else:\n                if relative_pos > 0:\n                    return 1  # Move left to create distance\n                else:\n                    return 2  # Move right to create distance\n        \n        else:\n            # At safe distance, use projectiles\n            if my_projectile_cooldown < 0.4:\n                return 9  # Projectile zoning\n            else:\n                return 0  # Wait for cooldown\n    \n    # Dominating mode - controlled aggression\n    elif dominating_mode:\n        if opponent_cornered and distance < medium_range:\n            # Corner pressure\n            if opponent_defensive:\n                # Mix up against blocking\n                mixup = random.random()\n                if mixup < 0.3:\n                    return 9 if my_projectile_cooldown < 0.3 else 5  # Throw or kick\n                elif mixup < 0.6:\n                    return 3  # Jump for overhead\n                else:\n                    return 4  # Quick punch\n            else:\n                # Apply pressure\n                if distance < close_range:\n                    return 4 if random.random() < 0.6 else 5  # Attack mix\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move in\n                    else:\n                        return 1  # Move in\n        \n        elif distance < close_range:\n            # Close range dominance\n            if opponent_aggressive:\n                # Counter attack\n                if random.random() < 0.4:\n                    return 6  # Block then counter\n                else:\n                    return 4  # Quick counter punch\n            else:\n                # Offensive pressure\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Punch\n                elif attack_choice < 0.8:\n                    return 5  # Kick\n                else:\n                    return 9 if my_projectile_cooldown < 0.2 else 4  # Throw or punch\n        \n        elif distance < medium_range:\n            # Control medium range\n            if opponent_retreating:\n                # Chase retreating opponent\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            else:\n                # Advance with purpose\n                if my_projectile_cooldown < 0.3 and random.random() < 0.3:\n                    return 9  # Projectile approach\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move in\n                    else:\n                        return 1  # Move in\n        \n        else:\n            # Long range control\n            if my_projectile_cooldown < 0.3:\n                return 9  # Projectile pressure\n            else:\n                if distance > zoner_range:\n                    # Close distance slightly\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    return 0  # Wait at good distance\n    \n    # Rushdown mode - aggressive close combat\n    elif rushdown_mode:\n        if distance > medium_range:\n            # Approach aggressively\n            if opponent_projectile_cooldown < 0.2:\n                # Opponent might shoot, approach with blocking\n                if relative_pos > 0:\n                    return 8  # Move right blocking\n                else:\n                    return 7  #",
      "fighting_style": "evolved",
      "creation_time": 1748766291.37143,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_015",
      "generation": 3,
      "fitness": 149.35999999999254,
      "win_rate": 0.0,
      "avg_reward": 149.35999999999254,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information with defensive bounds\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = max(0.0, min(1.0, state[0]))\n    my_y_pos = state[1]\n    my_x_vel = state[3]\n    my_y_vel = state[4]\n    my_attacking = state[5]\n    my_blocking = state[6]\n    my_stunned = state[7] if len(state) > 7 else 0.0\n    my_projectile_cd = max(0.0, state[10]) if len(state) > 10 else 1.0\n    \n    # Extract opponent status\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_pos = max(0.0, min(1.0, state[11]))\n    opp_y_pos = state[12]\n    opp_x_vel = state[14]\n    opp_y_vel = state[15]\n    opp_attacking = state[16]\n    opp_blocking = state[17]\n    opp_stunned = state[18] if len(state) > 18 else 0.0\n    opp_projectile_cd = max(0.0, state[21]) if len(state) > 21 else 1.0\n    \n    # Enhanced tactical parameters for evolved balanced style\n    close_range = 0.13\n    medium_range = 0.26\n    far_range = 0.42\n    critical_health = 0.25\n    winning_edge = 0.25\n    losing_edge = -0.25\n    wall_threshold = 0.15\n    \n    # Advanced aggression calculation with multi-factor analysis\n    base_aggression = 0.52\n    health_ratio = my_health / max(0.1, opp_health)\n    \n    # Enhanced momentum tracking with velocity integration\n    momentum_factor = 0.0\n    if abs(my_x_vel) > 0.25:\n        momentum_factor = 0.12 if my_x_vel * relative_pos > 0 else -0.08\n    \n    # Opponent pressure assessment\n    opponent_pressure = 0.0\n    if opp_attacking > 0.5 or (distance < medium_range and abs(opp_x_vel) > 0.3):\n        opponent_pressure = 0.15\n    \n    # Dynamic aggression with pressure response\n    if health_advantage > winning_edge:\n        dynamic_aggression = min(0.82, base_aggression + 0.25 + momentum_factor - opponent_pressure * 0.5)\n    elif health_advantage < losing_edge:\n        dynamic_aggression = max(0.28, base_aggression - 0.18 + momentum_factor - opponent_pressure * 0.3)\n    else:\n        dynamic_aggression = base_aggression + momentum_factor - opponent_pressure * 0.2\n    \n    # Enhanced wall awareness and positioning\n    near_left_wall = my_x_pos < wall_threshold\n    near_right_wall = my_x_pos > (1.0 - wall_threshold)\n    opp_near_left_wall = opp_x_pos < wall_threshold\n    opp_near_right_wall = opp_x_pos > (1.0 - wall_threshold)\n    \n    # Advanced movement prediction with acceleration consideration\n    predicted_distance = distance\n    if abs(opp_x_vel) > 0.15:\n        velocity_factor = opp_x_vel * 0.12\n        acceleration_bonus = 0.02 if abs(opp_x_vel) > 0.4 else 0.0\n        \n        if opp_x_vel * relative_pos < 0:  # Opponent approaching\n            predicted_distance = max(0.0, distance - abs(velocity_factor) - acceleration_bonus)\n        else:  # Opponent retreating\n            predicted_distance = min(1.0, distance + abs(velocity_factor) + acceleration_bonus)\n    \n    # Vertical positioning consideration\n    height_advantage = my_y_pos - opp_y_pos\n    aerial_factor = 1.0 if abs(height_advantage) > 0.2 else 0.0\n    \n    # Cannot act while stunned\n    if my_stunned > 0.5:\n        return 0\n    \n    # Advanced emergency protocols with escape routes\n    if my_health < critical_health and health_advantage < -0.35:\n        # Multi-layered emergency response\n        if opp_attacking > 0.5 and distance < close_range:\n            # Immediate threat response\n            escape_roll = random.random()\n            if escape_roll < 0.6:\n                return 6  # Block incoming attack\n            elif near_left_wall:\n                return 8  # Block and move right\n            elif near_right_wall:\n                return 7  # Block and move left\n            else:\n                return 3 if height_advantage < -0.1 else 6  # Jump or block\n        \n        elif distance > medium_range and my_projectile_cd < 0.18:\n            return 9  # Long range harassment\n        \n        elif distance < far_range:\n            # Intelligent repositioning based on stage position\n            if near_left_wall and relative_pos < 0:\n                return 8  # Must escape right\n            elif near_right_wall and relative_pos > 0:\n                return 7  # Must escape left\n            elif opp_x_vel > 0.25 and relative_pos > 0:\n                return 8  # Opponent chasing from left\n            elif opp_x_vel < -0.25 and relative_pos < 0:\n                return 7  # Opponent chasing from right\n            else:\n                # Space control retreat\n                retreat_direction = 1 if my_x_pos > 0.5 else 2\n                return retreat_direction\n        else:\n            return 6\n    \n    # Enhanced stunned opponent punishment system\n    if opp_stunned > 0.5:\n        if distance < close_range:\n            # Optimized damage dealing with combo awareness\n            if health_advantage < -0.1:  # Need maximum damage\n                return 5  # Heavy kick\n            else:\n                # Balanced combo approach\n                combo_choice = random.random()\n                if combo_choice < 0.45:\n                    return 5  # Kick for damage\n                elif combo_choice < 0.75:\n                    return 4  # Punch for speed\n                else:\n                    # Creative follow-up\n                    if abs(height_diff) > 0.2:\n                        return 3  # Jump attack\n                    else:\n                        return 5  # Another kick\n        \n        elif distance < medium_range:\n            # Smart approach with positioning\n            if abs(height_diff) > 0.25:\n                return 3  # Height adjustment\n            elif relative_pos > 0.2:\n                return 2  # Close distance right\n            elif relative_pos < -0.2:\n                return 1  # Close distance left\n            else:\n                # Already positioned, attack\n                return 4 if distance < 0.18 else 1 if relative_pos < 0 else 2\n        \n        else:\n            # Long range stunned opponent approach\n            if my_projectile_cd < 0.15:\n                return 9  # Free projectile hit\n            else:\n                # Quick approach\n                approach_move = 1 if relative_pos < 0 else 2",
      "fighting_style": "evolved",
      "creation_time": 1748772554.5032718,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_agent_020",
      "generation": 3,
      "fitness": 142.6999999999945,
      "win_rate": 0.0,
      "avg_reward": 142.6999999999945,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information with bounds checking\n    my_health = max(0.0, min(1.0, state[2] if len(state) > 2 else 1.0))\n    opponent_health = max(0.0, min(1.0, state[13] if len(state) > 13 else 1.0))\n    my_position = state[0] if len(state) > 0 else 0.0\n    opponent_position = state[11] if len(state) > 11 else 0.0\n    \n    # Velocity and movement data\n    my_velocity_x = state[7] if len(state) > 7 else 0.0\n    my_velocity_y = state[8] if len(state) > 8 else 0.0\n    opponent_velocity_x = state[18] if len(state) > 18 else 0.0\n    opponent_velocity_y = state[19] if len(state) > 19 else 0.0\n    \n    # Combat status information\n    my_attack_status = state[4] if len(state) > 4 else 0.0\n    opponent_attack_status = state[15] if len(state) > 15 else 0.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    opponent_block_status = state[16] if len(state) > 16 else 0.0\n    \n    # Projectile cooldowns\n    my_projectile_cooldown = max(0.0, state[6] if len(state) > 6 else 0.0)\n    opponent_projectile_cooldown = max(0.0, state[17] if len(state) > 17 else 0.0)\n    \n    # Hybrid fighting tactical ranges\n    danger_zone = 0.06\n    ultra_close = 0.12\n    close_range = 0.18\n    medium_close = 0.28\n    medium_range = 0.42\n    far_range = 0.58\n    max_range = 0.75\n    \n    # Health management thresholds\n    critical_health = 0.15\n    low_health = 0.32\n    good_health = 0.68\n    dominant_health = 0.85\n    \n    # Projectile readiness states\n    projectile_ready = my_projectile_cooldown < 0.08\n    projectile_soon = my_projectile_cooldown < 0.2\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.1\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.25\n    \n    # Enhanced positioning awareness\n    stage_left_edge = my_position < -0.75\n    stage_right_edge = my_position > 0.75\n    opponent_cornered_left = opponent_position < -0.7\n    opponent_cornered_right = opponent_position > 0.7\n    center_control = abs(my_position) < 0.25\n    \n    # Advanced movement pattern detection\n    opponent_rushing = (abs(opponent_velocity_x) > 0.3 and \n                      ((relative_pos > 0 and opponent_velocity_x < -0.25) or \n                       (relative_pos < 0 and opponent_velocity_x > 0.25)))\n    \n    opponent_retreating = (abs(opponent_velocity_x) > 0.2 and \n                          ((relative_pos > 0 and opponent_velocity_x > 0.2) or \n                           (relative_pos < 0 and opponent_velocity_x < -0.2)))\n    \n    opponent_airborne = abs(opponent_velocity_y) > 0.12 or height_diff < -0.15\n    my_airborne = abs(my_velocity_y) > 0.1\n    opponent_landing = opponent_velocity_y > 0.15 and height_diff < -0.1\n    \n    # Hybrid strategy adaptation parameters\n    base_aggression = 0.55\n    defensive_threshold = 0.4\n    aggressive_threshold = 0.75\n    \n    # Dynamic aggression calculation\n    current_aggression = base_aggression\n    if health_advantage > 0.4:\n        current_aggression = min(0.85, base_aggression + 0.25)\n    elif health_advantage > 0.15:\n        current_aggression = min(0.7, base_aggression + 0.1)\n    elif health_advantage < -0.4:\n        current_aggression = max(0.25, base_aggression - 0.3)\n    elif health_advantage < -0.15:\n        current_aggression = max(0.4, base_aggression - 0.15)\n    \n    # Critical survival protocol\n    if my_health <= critical_health:\n        # Immediate threat assessment\n        if opponent_attack_status > 0.5 and distance < medium_range:\n            if distance < close_range and not my_airborne:\n                # Emergency evasion with blocking\n                if stage_left_edge and relative_pos < 0:\n                    if opponent_airborne:\n                        return 3  # Jump escape\n                    else:\n                        return 8  # Block right movement\n                elif stage_right_edge and relative_pos > 0:\n                    if opponent_airborne:\n                        return 3  # Jump escape\n                    else:\n                        return 7  # Block left movement\n                else:\n                    # Standard blocking retreat\n                    if relative_pos > 0 and not stage_left_edge:\n                        return 7  # Block retreat left\n                    elif not stage_right_edge:\n                        return 8  # Block retreat right\n                    else:\n                        return 6  # Pure block\n            else:\n                return 6  # Block at medium range\n        \n        # Desperate spacing when cornered\n        if distance < close_range and (stage_left_edge or stage_right_edge):\n            if opponent_rushing:\n                # Counter-attack attempt with projectile\n                if projectile_ready and distance > danger_zone:\n                    return 9\n                else:\n                    return 6  # Block rush\n            else:\n                # Try to create space\n                if stage_left_edge and relative_pos > 0:\n                    return 2  # Move away from corner\n                elif stage_right_edge and relative_pos < 0:\n                    return 1  # Move away from corner\n                else:\n                    return 3  # Jump attempt\n        \n        # Long-range survival tactics\n        if distance > medium_range:\n            if projectile_ready:\n                return 9  # Projectile for damage/space\n            else:\n                # Maintain distance\n                if opponent_rushing:\n                    if relative_pos > 0 and not stage_left_edge:\n                        return 1  # Retreat\n                    elif not stage_right_edge:\n                        return 2  # Retreat\n                    else:\n                        return 6  # Block if trapped\n    \n    # Enhanced threat response system\n    if opponent_attack_status > 0.6:\n        threat_level = opponent_attack_status * (1.0 / max(distance, 0.1))\n        \n        if threat_level > 3.0:  # High immediate threat\n            if my_health <= low_health:\n                return 6  # Priority block when low health\n            else:\n                # Counter-attack opportunity assessment\n                if projectile_ready and distance > ultra_close and distance < medium_close:\n                    if random.random() < 0.65:\n                        return",
      "fighting_style": "evolved",
      "creation_time": 1748772554.503273,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_007",
      "generation": 4,
      "fitness": 131.47866666666042,
      "win_rate": 0.0,
      "avg_reward": 187.82666666665773,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[1] if len(state) > 1 else 1.0))\n    my_pos_x = state[0] if len(state) > 0 else 0.5\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attacking = state[5] > 0.3 if len(state) > 5 else False\n    my_blocking = state[6] > 0.3 if len(state) > 6 else False\n    my_stunned = state[7] > 0.3 if len(state) > 7 else False\n    my_projectile_cooldown = max(0.0, state[8] if len(state) > 8 else 0.0)\n    my_attack_cooldown = max(0.0, state[9] if len(state) > 9 else 0.0)\n    my_block_cooldown = max(0.0, state[10] if len(state) > 10 else 0.0)\n    \n    # Extract opponent status with bounds checking\n    opp_health = max(0.0, min(1.0, state[12] if len(state) > 12 else 1.0))\n    opp_pos_x = state[11] if len(state) > 11 else 0.5\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attacking = state[16] > 0.3 if len(state) > 16 else False\n    opp_blocking = state[17] > 0.3 if len(state) > 17 else False\n    opp_stunned = state[18] > 0.3 if len(state) > 18 else False\n    opp_projectile_cooldown = max(0.0, state[19] if len(state) > 19 else 0.0)\n    opp_attack_cooldown = max(0.0, state[20] if len(state) > 20 else 0.0)\n    opp_block_cooldown = max(0.0, state[21] if len(state) > 21 else 0.0)\n    \n    # Enhanced tactical ranges with precision tuning\n    point_blank = 0.04\n    very_close = 0.08\n    close_range = 0.14\n    medium_close = 0.22\n    medium_range = 0.32\n    medium_far = 0.45\n    far_range = 0.60\n    max_range = 0.8\n    \n    # Core hybrid fighter parameters\n    base_aggression = 0.58\n    base_patience = 0.45\n    adaptation_factor = 0.35\n    tactical_variance = 0.25\n    \n    # Calculate advanced fighting metrics\n    health_ratio = my_health / max(opp_health, 0.01)\n    momentum_my = abs(my_velocity_x) + abs(my_velocity_y * 0.7)\n    momentum_opp = abs(opp_velocity_x) + abs(opp_velocity_y * 0.7)\n    velocity_difference = momentum_my - momentum_opp\n    \n    # Enhanced cooldown status\n    can_attack = my_attack_cooldown < 0.12\n    can_block = my_block_cooldown < 0.08\n    can_projectile = my_projectile_cooldown < 0.18\n    opp_can_attack = opp_attack_cooldown < 0.12\n    opp_can_projectile = opp_projectile_cooldown < 0.18\n    \n    # Sophisticated opponent analysis\n    opp_is_rushing = momentum_opp > 0.12 and distance > very_close\n    opp_is_retreating = opp_velocity_x * relative_pos < -0.08\n    opp_is_stationary = momentum_opp < 0.04\n    opp_is_vulnerable = opp_stunned or (opp_attacking and distance < close_range)\n    opp_is_aggressive = opp_attacking and momentum_opp > 0.06\n    opp_is_defensive = opp_blocking or (distance < medium_range and momentum_opp < 0.03)\n    opp_is_zoning = opp_can_projectile and distance > medium_range\n    \n    # Dynamic fighting mode determination\n    if health_advantage > 0.6:\n        fight_mode = \"dominating\"\n        aggression_level = 0.88\n        defensive_level = 0.15\n        risk_tolerance = 0.8\n    elif health_advantage > 0.25:\n        fight_mode = \"winning\"\n        aggression_level = 0.72\n        defensive_level = 0.28\n        risk_tolerance = 0.65\n    elif health_advantage > -0.05:\n        fight_mode = \"competitive\"\n        aggression_level = 0.58\n        defensive_level = 0.42\n        risk_tolerance = 0.5\n    elif health_advantage > -0.3:\n        fight_mode = \"behind\"\n        aggression_level = 0.45\n        defensive_level = 0.55\n        risk_tolerance = 0.35\n    else:\n        fight_mode = \"critical\"\n        aggression_level = 0.25\n        defensive_level = 0.75\n        risk_tolerance = 0.2\n    \n    # Tactical randomization for unpredictability\n    primary_dice = random.random()\n    secondary_dice = random.random()\n    combat_dice = random.random()\n    movement_dice = random.random()\n    \n    # Emergency protocols\n    if my_stunned and distance < medium_range:\n        if opp_attacking and can_block:\n            return 6  # Emergency defensive block\n        elif distance < close_range:\n            # Desperate escape based on positioning\n            if abs(my_pos_x) > 0.75:  # Near stage edge\n                return 6 if can_block else 3  # Block or jump\n            elif relative_pos > 0:\n                return 7 if can_block else 1  # Move left with protection\n            else:\n                return 8 if can_block else 2  # Move right with protection\n        else:\n            return 6 if can_block else 0\n    \n    # Critical health management\n    if my_health < 0.12 or health_advantage < -0.65:\n        if distance > medium_far:\n            if can_projectile and not opp_is_rushing:\n                return 9  # Desperation projectile\n            elif opp_can_projectile:\n                return 6 if can_block else 0  # Defensive positioning\n            else:\n                return 0  # Wait for opening\n        elif distance < very_close and opp_is_vulnerable:\n            # All-or-nothing attack\n            if can_attack and primary_dice < 0.85:\n                return 5 if combat_dice < 0.65 else 4\n            else:\n                return 6 if can_block else 0\n        else:\n            # Maintain safe distance\n            if relative_pos > 0:\n                return 7 if can_block else 1\n            else:\n                return",
      "fighting_style": "evolved",
      "creation_time": 1748775503.9043279,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_025",
      "generation": 0,
      "fitness": 127.93999999999816,
      "win_rate": 0.0,
      "avg_reward": 127.93999999999816,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Validate and extract key state information\n    if len(state) < 26:\n        return 4  # Default to punch if invalid state\n    \n    # Core state variables with bounds checking\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Player state information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_x_pos = state[0] if len(state) > 0 else 0.5\n    my_velocity_x = state[2] if len(state) > 2 else 0.0\n    my_velocity_y = state[3] if len(state) > 3 else 0.0\n    my_attack_cooldown = state[4] if len(state) > 4 else 0.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_projectile_cooldown = state[6] if len(state) > 6 else 0.0\n    my_stun_timer = state[7] if len(state) > 7 else 0.0\n    \n    # Opponent state information\n    opp_health = state[12] if len(state) > 12 else 1.0\n    opp_x_pos = state[11] if len(state) > 11 else 0.5\n    opp_velocity_x = state[13] if len(state) > 13 else 0.0\n    opp_velocity_y = state[14] if len(state) > 14 else 0.0\n    opp_attack_cooldown = state[15] if len(state) > 15 else 0.0\n    opp_block_status = state[16] if len(state) > 16 else 0.0\n    opp_projectile_cooldown = state[17] if len(state) > 17 else 0.0\n    opp_stun_timer = state[18] if len(state) > 18 else 0.0\n    \n    # RUSHDOWN STYLE: Define aggressive tactical ranges\n    ultra_close_range = 0.08  # Immediate attack range\n    close_range = 0.15        # Primary engagement zone\n    rush_range = 0.25         # Distance to start rushing in\n    max_engage_range = 0.4    # Maximum distance to engage\n    \n    # Aggression parameters for rushdown style\n    base_aggression = 0.8     # High base aggression\n    winning_aggression = 0.95 # Even more aggressive when winning\n    losing_aggression = 0.6   # Still aggressive when losing\n    \n    # Calculate current aggression level\n    if health_advantage > 0.2:\n        current_aggression = winning_aggression\n    elif health_advantage < -0.2:\n        current_aggression = losing_aggression\n    else:\n        current_aggression = base_aggression\n    \n    # Check if we're stunned or in cooldown\n    if my_stun_timer > 0:\n        return 6  # Block while stunned\n    \n    # Emergency defensive measures - even rushdown needs some defense\n    if my_health < 0.2 and opp_attack_cooldown < 0.3 and distance < close_range:\n        if random.random() < 0.4:  # Still sometimes attack even when low\n            return 6  # Block when critically low and opponent can attack\n    \n    # ULTRA CLOSE RANGE - Maximum aggression\n    if distance < ultra_close_range:\n        # Opponent is stunned or in cooldown - go for kill\n        if opp_stun_timer > 0 or opp_attack_cooldown > 0.5:\n            if my_attack_cooldown < 0.2:\n                # Mix up attacks for unpredictability\n                attack_choice = random.random()\n                if attack_choice < 0.6:\n                    return 4  # Punch - faster\n                else:\n                    return 5  # Kick - stronger\n        \n        # Opponent can counter-attack\n        if opp_attack_cooldown < 0.3 and opp_block_status < 0.5:\n            # High risk, high reward - trade blows\n            if random.random() < current_aggression:\n                return 4  # Quick punch to interrupt\n            else:\n                return 6  # Brief block then continue pressure\n        \n        # Default ultra-close behavior\n        if my_attack_cooldown < 0.3:\n            return 4 if random.random() < 0.7 else 5\n        else:\n            return 6  # Block while in cooldown\n    \n    # CLOSE RANGE - Primary rushdown zone\n    elif distance < close_range:\n        # Check if opponent is blocking - mix up approach\n        if opp_block_status > 0.5:\n            # Opponent blocking - grab or throw timing mix-up\n            if random.random() < 0.4:\n                return 5  # Kick can sometimes break guard\n            elif random.random() < 0.3:\n                # Back off slightly then re-engage\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n            else:\n                return 4  # Keep pressure with punches\n        \n        # Opponent not blocking - aggressive attack\n        if my_attack_cooldown < 0.4:\n            # Height advantage consideration\n            if abs(height_diff) > 0.3:\n                return 3  # Jump to adjust height\n            \n            # Choose attack based on situation\n            if opp_velocity_x != 0:  # Opponent moving\n                return 4  # Quick punch to catch them\n            else:  # Opponent stationary\n                attack_roll = random.random()\n                if attack_roll < 0.5:\n                    return 4  # Punch\n                elif attack_roll < 0.8:\n                    return 5  # Kick\n                else:\n                    return 3  # Jump attack mix-up\n        else:\n            # In attack cooldown - maintain pressure with movement\n            if relative_pos > 0.1:\n                return 2  # Move right to stay close\n            elif relative_pos < -0.1:\n                return 1  # Move left to stay close\n            else:\n                return 6  # Block briefly\n    \n    # RUSH RANGE - Close the distance aggressively\n    elif distance < rush_range:\n        # This is prime rushdown territory - get in fast\n        \n        # Check if opponent is preparing projectile\n        if opp_projectile_cooldown < 0.3 and distance > 0.2:\n            # Rush in with block\n            if relative_pos > 0:\n                return 8  # Move right with block\n            else:\n                return 7  # Move left with block\n        \n        # Opponent is backing away - chase aggressively\n        if (relative_pos > 0 and opp_velocity_x > 0) or (relative_pos < 0 and opp_velocity_x < 0):\n            # Jump in to close distance faster\n            if random.random() < 0.6:\n                return 3  # Jump toward opponent\n            else:\n                # Direct rush\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        # Standard rush approach\n        rush_method = random.random()\n        if rush_method < 0.6:\n            # Direct approach\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n        elif rush_method < 0.8:\n            # Jump approach\n            return 3",
      "fighting_style": "rushdown",
      "creation_time": 1748763419.260839,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_agent_026",
      "generation": 2,
      "fitness": 125.01066666666055,
      "win_rate": 0.0,
      "avg_reward": 178.58666666665795,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract detailed fighter status\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_velocity = state[3]\n    opponent_velocity = state[14]\n    my_attack_status = state[7]\n    opponent_attack_status = state[18]\n    my_block_status = state[8]\n    opponent_block_status = state[19]\n    projectile_cooldown = max(0.0, state[9])\n    opponent_projectile_cooldown = max(0.0, state[20])\n    height_difference = state[24]\n    \n    # Enhanced tactical parameters for evolved hybrid style\n    strike_range = 0.12\n    danger_zone = 0.18\n    medium_range = 0.30\n    control_range = 0.45\n    safe_range = 0.60\n    critical_health = 0.20\n    danger_health = 0.35\n    winning_margin = 0.30\n    dominance_margin = 0.50\n    \n    # Dynamic aggression calculation\n    base_aggression = 0.55\n    health_modifier = health_advantage * 0.25\n    distance_modifier = (0.4 - distance) * 0.15 if distance < 0.4 else 0\n    momentum = abs(my_velocity) - abs(opponent_velocity)\n    momentum_modifier = momentum * 0.10\n    \n    current_aggression = max(0.1, min(0.9, base_aggression + health_modifier + distance_modifier + momentum_modifier))\n    \n    # Unpredictability factor\n    chaos_factor = random.random()\n    tactical_roll = random.random()\n    \n    # Emergency survival mode - refined\n    if my_health < critical_health or health_advantage < -0.45:\n        if distance < danger_zone:\n            if opponent_attack_status > 0.4:\n                # Opponent attacking - maximum defense\n                if chaos_factor < 0.3:\n                    return 6  # Full block\n                elif chaos_factor < 0.65:\n                    if relative_pos > 0:\n                        return 7  # Protected retreat left\n                    else:\n                        return 8  # Protected retreat right\n                else:\n                    return 3  # Desperate jump escape\n            else:\n                # Quick escape from danger\n                if relative_pos > 0:\n                    return 1 if chaos_factor < 0.7 else 7\n                else:\n                    return 2 if chaos_factor < 0.7 else 8\n        elif distance < control_range:\n            if projectile_cooldown < 0.2 and opponent_projectile_cooldown > 0.3:\n                return 9  # Safe projectile harassment\n            else:\n                # Defensive positioning\n                if chaos_factor < 0.5:\n                    return 6  # Block and wait\n                else:\n                    # Evasive movement\n                    if relative_pos > 0:\n                        return 1  # Move away\n                    else:\n                        return 2  # Move away\n        else:\n            # Long range survival\n            if projectile_cooldown < 0.15:\n                return 9  # Keep opponent at bay\n            else:\n                return 6  # Defensive stance\n    \n    # Dominance finishing mode - enhanced\n    if health_advantage > dominance_margin and opponent_health < 0.30:\n        if distance < strike_range:\n            if opponent_block_status > 0.3:\n                # Break guard tactics\n                if tactical_roll < 0.4:\n                    return 5  # Kick to break guard\n                elif tactical_roll < 0.7:\n                    # Create space then pressure\n                    if relative_pos > 0:\n                        return 1  # Step back\n                    else:\n                        return 2  # Step back\n                else:\n                    return 3  # Jump mix-up\n            else:\n                # Finishing sequence\n                if my_attack_status > 0.3:\n                    return 0  # Let attack complete\n                else:\n                    finish_choice = tactical_roll\n                    if finish_choice < 0.45:\n                        return 4  # Quick finisher\n                    elif finish_choice < 0.75:\n                        return 5  # Power finisher\n                    else:\n                        return 6  # Stay ready for counter\n        elif distance < medium_range:\n            # Aggressive closing\n            if opponent_attack_status > 0.4:\n                # Counter while closing\n                if current_aggression > 0.7:\n                    if relative_pos > 0:\n                        return 8  # Move in with guard\n                    else:\n                        return 7  # Move in with guard\n                else:\n                    return 6  # Block then counter\n            else:\n                # Direct pressure\n                if relative_pos > 0:\n                    return 2  # Close distance\n                else:\n                    return 1  # Close distance\n        else:\n            # Long range pressure\n            if projectile_cooldown < 0.25:\n                return 9  # Projectile pressure\n            else:\n                # Advance while cooling down\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Close range hybrid combat - evolved\n    if distance < strike_range:\n        # Analyze opponent's defensive state\n        if opponent_block_status > 0.4:\n            # Opponent blocking heavily\n            block_counter_choice = tactical_roll\n            if block_counter_choice < 0.25:\n                return 5  # Kick to break guard\n            elif block_counter_choice < 0.5:\n                # Reset positioning\n                if relative_pos > 0:\n                    return 1  # Step back left\n                else:\n                    return 2  # Step back right\n            elif block_counter_choice < 0.75:\n                return 3  # Jump over guard\n            else:\n                return 6  # Wait for opening\n        \n        # Opponent not blocking - strike opportunities\n        if opponent_attack_status > 0.5:\n            # Opponent attacking - timing critical\n            if current_aggression > 0.65 and health_advantage > -0.2:\n                # Aggressive counter-trade\n                counter_choice = chaos_factor\n                if counter_choice < 0.6:\n                    return 4  # Quick counter\n                else:\n                    return 5  # Power counter\n            else:\n                # Defensive counter\n                defense_choice = tactical_roll\n                if defense_choice < 0.4:\n                    return 6  # Block\n                elif defense_choice < 0.7:\n                    return 3  # Jump dodge\n                else:\n                    # Evasive retreat\n                    if relative_pos > 0:\n                        return 1\n                    else:\n                        return 2\n        \n        # Clean strike opportunity\n        if not my_attack_status > 0.3:\n            strike_aggression = current_aggression + (chaos_factor - 0.5) * 0.2\n            strike_decision = tactical_roll\n            \n            if strike_decision < strike_aggression * 0.55:\n                return 4  # Fast strike\n            elif strike_decision < strike_aggression * 0.85:\n                return 5  # Power strike\n            elif strike_decision < 0.9:\n                # Feint - no attack, reposition\n                if relative_pos > 0:\n                    return 1  # Feint retreat\n                else:\n                    return 2  # Feint retreat\n            else:\n                return 6  # Defensive wait",
      "fighting_style": "evolved",
      "creation_time": 1748769390.978373,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_agent_029",
      "generation": 4,
      "fitness": 124.51999999999376,
      "win_rate": 0.0,
      "avg_reward": 124.51999999999376,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status with bounds checking\n    my_health = max(0.0, min(1.0, state[2]))\n    my_position = state[0]\n    my_velocity_x = state[7]\n    my_velocity_y = state[8]\n    my_attack_status = max(0.0, state[4])\n    my_block_status = max(0.0, state[5])\n    my_projectile_cooldown = max(0.0, state[6])\n    \n    # Extract opponent status\n    opponent_health = max(0.0, min(1.0, state[13]))\n    opponent_position = state[11]\n    opponent_velocity_x = state[18]\n    opponent_velocity_y = state[19]\n    opponent_attack_status = max(0.0, state[15])\n    opponent_block_status = max(0.0, state[16])\n    opponent_projectile_cooldown = max(0.0, state[17])\n    \n    # Enhanced tactical range definitions\n    touch_range = 0.02\n    ultra_close_range = 0.06\n    very_close_range = 0.12\n    close_range = 0.18\n    mid_close_range = 0.28\n    medium_range = 0.42\n    mid_far_range = 0.58\n    far_range = 0.75\n    \n    # Health and positioning thresholds\n    critical_health = 0.08\n    very_low_health = 0.18\n    low_health = 0.35\n    good_health = 0.65\n    excellent_health = 0.85\n    \n    # Position analysis\n    wall_distance = min(abs(my_position), abs(1.0 - my_position))\n    opponent_wall_distance = min(abs(opponent_position), abs(1.0 - opponent_position))\n    corner_trapped = wall_distance < 0.08\n    near_corner = wall_distance < 0.2\n    opponent_cornered = opponent_wall_distance < 0.08\n    opponent_near_corner = opponent_wall_distance < 0.2\n    center_control = abs(my_position - 0.5) < 0.15\n    \n    # Advanced status analysis\n    projectile_ready = my_projectile_cooldown < 0.12\n    projectile_charging = my_projectile_cooldown < 0.25\n    opponent_projectile_ready = opponent_projectile_cooldown < 0.15\n    opponent_projectile_threat = opponent_projectile_cooldown < 0.3\n    \n    # Movement and behavior patterns\n    opponent_advancing = (relative_pos > 0 and opponent_velocity_x > 0.05) or (relative_pos < 0 and opponent_velocity_x < -0.05)\n    opponent_retreating = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    opponent_aggressive = opponent_attack_status > 0.4 or abs(opponent_velocity_x) > 0.2\n    opponent_very_aggressive = opponent_attack_status > 0.7 or abs(opponent_velocity_x) > 0.35\n    opponent_defensive = opponent_block_status > 0.3\n    opponent_very_defensive = opponent_block_status > 0.6\n    opponent_airborne = abs(height_diff) > 0.2\n    opponent_high_airborne = abs(height_diff) > 0.4\n    \n    # Enhanced momentum calculation\n    momentum_score = 0.0\n    \n    # Health momentum\n    health_ratio = my_health / max(0.01, opponent_health)\n    if health_ratio > 1.8:\n        momentum_score += 0.4\n    elif health_ratio > 1.3:\n        momentum_score += 0.2\n    elif health_ratio < 0.5:\n        momentum_score -= 0.4\n    elif health_ratio < 0.8:\n        momentum_score -= 0.2\n    \n    # Position momentum\n    if opponent_cornered and not corner_trapped:\n        momentum_score += 0.35\n    elif corner_trapped and not opponent_cornered:\n        momentum_score -= 0.35\n    elif center_control and not opponent_near_corner:\n        momentum_score += 0.15\n    \n    # Tactical momentum\n    if opponent_very_defensive and distance < medium_range:\n        momentum_score += 0.25\n    elif opponent_very_aggressive and my_health < low_health:\n        momentum_score -= 0.3\n    \n    # Calculate adaptive aggression with momentum\n    base_aggression = 0.58\n    momentum_modifier = momentum_score * 0.5\n    health_modifier = health_advantage * 0.3\n    \n    # Distance-based aggression tuning\n    distance_modifier = 0.0\n    if distance < close_range:\n        distance_modifier = 0.15\n    elif distance > medium_range:\n        distance_modifier = -0.1\n    \n    current_aggression = max(0.2, min(0.9, base_aggression + momentum_modifier + health_modifier + distance_modifier))\n    \n    # Enhanced defense priority calculation\n    defense_priority = 0.35\n    if my_health < critical_health:\n        defense_priority = 0.9\n    elif my_health < very_low_health:\n        defense_priority = 0.75\n    elif my_health < low_health and health_advantage < -0.3:\n        defense_priority = 0.65\n    elif corner_trapped and opponent_aggressive:\n        defense_priority = 0.7\n    \n    # Emergency survival protocols\n    if my_health <= critical_health:\n        if opponent_attack_status > 0.6 and distance < medium_range:\n            return 6  # Priority defensive block\n        \n        if corner_trapped:\n            if distance < ultra_close_range and projectile_ready:\n                return 9  # Desperate point-blank projectile\n            elif opponent_airborne and distance < close_range:\n                return 4  # Anti-air attempt\n            elif abs(height_diff) < 0.25:\n                return 3  # Jump escape\n            else:\n                escape_dir = 2 if my_position < 0.5 else 1\n                return 7 if escape_dir == 1 else 8\n        \n        if distance > medium_range and projectile_ready:\n            return 9  # Safe projectile\n        elif distance < close_range and not corner_trapped:\n            retreat_dir = 1 if relative_pos > 0 else 2\n            return retreat_dir\n        \n        return 6  # Default emergency block\n    \n    # Advanced threat response system\n    if opponent_attack_status > 0.5:\n        threat_intensity = opponent_attack_status * (1.0 - distance)\n        \n        if distance < touch_range:\n            return 6  # Mandatory block at touch range\n        elif distance < ultra_close_range:\n            if my_health > low_health and not near_corner:\n                evasive_move = 7 if relative_pos > 0 else 8\n                return evasive_move if random.random() < 0.75 else 6\n            else:\n                return 6\n        elif distance < very_close_range:\n            if threat_intensity > 0.4:\n                if projectile_ready and random.random() < 0.45:\n                    return 9  # Counter projectile\n                else:\n                    return 6  # Defensive block",
      "fighting_style": "evolved",
      "creation_time": 1748775503.904334,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_agent_008",
      "generation": 1,
      "fitness": 122.58866666666123,
      "win_rate": 0.0,
      "avg_reward": 175.1266666666589,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract my fighter status\n    my_health = max(0.0, state[1] if len(state) > 1 else 0.5)\n    my_x_pos = state[0] if len(state) > 0 else 0.0\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_velocity_y = state[4] if len(state) > 4 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    # Extract opponent status\n    opp_health = max(0.0, state[12] if len(state) > 12 else 0.5)\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_velocity_x = state[14] if len(state) > 14 else 0.0\n    opp_velocity_y = state[15] if len(state) > 15 else 0.0\n    opp_attack_status = state[16] if len(state) > 16 else 0.0\n    opp_block_status = state[17] if len(state) > 17 else 0.0\n    opp_projectile_cooldown = state[21] if len(state) > 21 else 0.0\n    \n    # Define hybrid strategic parameters\n    close_threshold = 0.16\n    medium_threshold = 0.32\n    far_threshold = 0.55\n    critical_health = 0.22\n    winning_threshold = 0.25\n    losing_threshold = -0.25\n    corner_threshold = 0.75\n    \n    # Calculate situational awareness\n    is_airborne = abs(my_velocity_y) > 0.15 or abs(my_y_pos) > 0.1\n    opponent_airborne = abs(height_diff) > 0.25\n    opponent_attacking = opp_attack_status > 0.6\n    opponent_blocking = opp_block_status > 0.6\n    near_corner = abs(my_x_pos) > corner_threshold\n    opponent_near_corner = abs(opp_x_pos) > corner_threshold\n    can_projectile = my_projectile_cooldown < 0.2\n    opponent_can_projectile = opp_projectile_cooldown < 0.3\n    \n    # Calculate momentum and positioning factors\n    closing_speed = abs(my_velocity_x) if (my_velocity_x > 0 and relative_pos > 0) or (my_velocity_x < 0 and relative_pos < 0) else 0\n    retreating = (my_velocity_x < 0 and relative_pos > 0) or (my_velocity_x > 0 and relative_pos < 0)\n    opponent_approaching = (opp_velocity_x > 0 and relative_pos < 0) or (opp_velocity_x < 0 and relative_pos > 0)\n    \n    # Emergency survival tactics\n    if my_health < critical_health and health_advantage < -0.5:\n        if opponent_attacking and distance < 0.25:\n            return 6  # Emergency block\n        if distance > 0.7 and can_projectile:\n            return 9  # Desperate projectile\n        if near_corner:\n            if my_x_pos > 0:\n                return 7  # Escape corner left with block\n            else:\n                return 8  # Escape corner right with block\n        if distance < close_threshold:\n            # Last ditch attack\n            return 5 if random.random() < 0.7 else 4\n        else:\n            # Defensive movement\n            if relative_pos > 0:\n                return 7\n            else:\n                return 8\n    \n    # Aggressive winning strategy\n    if health_advantage > winning_threshold and my_health > 0.35:\n        if distance < close_threshold:\n            if opponent_blocking:\n                # Break guard tactics\n                guard_break = random.random()\n                if guard_break < 0.35:\n                    return 5  # Heavy kick\n                elif guard_break < 0.6:\n                    return 3  # Jump mix-up\n                elif guard_break < 0.8:\n                    return 4  # Fast punch\n                else:\n                    return 9 if can_projectile else 4  # Point blank projectile or punch\n            elif opponent_attacking:\n                # Counter attack aggressively\n                if random.random() < 0.6:\n                    return 4  # Quick counter\n                else:\n                    return 5  # Power counter\n            else:\n                # Pure aggression\n                if opponent_airborne:\n                    return 4  # Anti-air\n                elif random.random() < 0.55:\n                    return 4  # Fast pressure\n                else:\n                    return 5  # Power attack\n        \n        elif distance < medium_threshold:\n            # Aggressive approach\n            if opponent_near_corner:\n                # Corner pressure\n                if relative_pos > 0:\n                    return 2  # Chase to corner\n                else:\n                    return 1  # Chase to corner\n            elif opponent_attacking or opponent_approaching:\n                # Meet aggression with aggression\n                if relative_pos > 0:\n                    return 2  # Advance right\n                else:\n                    return 1  # Advance left\n            else:\n                # Standard aggressive positioning\n                approach_choice = random.random()\n                if approach_choice < 0.4:\n                    if relative_pos > 0:\n                        return 2\n                    else:\n                        return 1\n                elif approach_choice < 0.6:\n                    return 3  # Jump approach\n                elif approach_choice < 0.8:\n                    return 4  # Advancing punch\n                else:\n                    return 9 if can_projectile else 2 if relative_pos > 0 else 1\n        \n        else:\n            # Long range dominance\n            if can_projectile and random.random() < 0.65:\n                return 9  # Projectile pressure\n            else:\n                # Close distance for kill\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Defensive strategy when losing\n    elif health_advantage < losing_threshold:\n        if distance < close_threshold:\n            if opponent_attacking:\n                return 6  # Defensive block\n            elif opponent_blocking:\n                # Try to create space\n                if near_corner:\n                    if my_x_pos > 0:\n                        return 7  # Escape left\n                    else:\n                        return 8  # Escape right\n                else:\n                    # Reset with jump or careful attack\n                    if random.random() < 0.6:\n                        return 3  # Jump reset\n                    else:\n                        return 4  # Safe poke\n            else:\n                # Careful counterattack\n                if my_attack_status < 0.3:\n                    if random.random() < 0.45:\n                        return 4  # Safe punch\n                    elif random.random() < 0.7:\n                        return 6  # Block and wait",
      "fighting_style": "evolved",
      "creation_time": 1748766291.3714309,
      "tournament_stats": {},
      "lineage": []
    }
  ]
}