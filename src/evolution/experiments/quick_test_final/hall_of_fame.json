{
  "experiment_info": {
    "max_agents": 100,
    "last_updated": 1748759260.9983401,
    "total_agents": 2
  },
  "agents": [
    {
      "agent_id": "gen0_agent_000",
      "generation": 0,
      "fitness": 293.99999999999835,
      "win_rate": 0.5,
      "avg_reward": 293.99999999999835,
      "code": "import random\nimport numpy as np\nimport math\n\ndef get_action(state):\n    # Extract and validate key game state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract player status information\n    my_health = max(0.0, min(1.0, state[2]))\n    my_x_pos = state[0]\n    my_y_pos = state[1]\n    my_x_velocity = state[3]\n    my_y_velocity = state[4]\n    my_attack_cooldown = max(0.0, state[5])\n    my_block_status = state[6]\n    my_projectile_cooldown = max(0.0, state[10])\n    \n    # Extract opponent status information\n    opp_health = max(0.0, min(1.0, state[13]))\n    opp_x_pos = state[11]\n    opp_y_pos = state[12]\n    opp_x_velocity = state[14]\n    opp_y_velocity = state[15]\n    opp_attack_cooldown = max(0.0, state[16])\n    opp_block_status = state[17]\n    opp_projectile_cooldown = max(0.0, state[21])\n    \n    # Height difference for aerial tactics\n    height_diff = state[24]\n    \n    # Aggressive fighting style parameters\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    aggression_base = 0.85\n    chase_threshold = 0.6\n    attack_mix_chance = 0.75\n    \n    # Dynamic aggression based on health advantage\n    current_aggression = aggression_base\n    if health_advantage > 0.2:\n        current_aggression = min(0.95, aggression_base + 0.1)\n    elif health_advantage < -0.4:\n        current_aggression = max(0.6, aggression_base - 0.25)\n    \n    # Emergency defensive behavior when critically low health\n    if my_health < 0.15 and health_advantage < -0.5:\n        if distance < close_range and opp_attack_cooldown < 0.1:\n            return 6  # Block incoming attack\n        elif distance > medium_range:\n            return 9  # Desperate projectile attempt\n        else:\n            # Try to create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Opponent is attacking or about to attack - aggressive counter\n    if opp_attack_cooldown < 0.15 and distance < close_range:\n        if random.random() < 0.3:\n            return 6  # Occasional block\n        else:\n            # Aggressive counter-attack\n            if random.random() < 0.6:\n                return 4  # Quick punch counter\n            else:\n                return 5  # Power kick counter\n    \n    # Close range aggressive combat\n    if distance < close_range:\n        # Can't attack due to cooldown\n        if my_attack_cooldown > 0.2:\n            if opp_attack_cooldown < 0.1:\n                return 6  # Block while cooling down\n            else:\n                # Aggressive positioning while cooling down\n                if abs(relative_pos) > 0.1:\n                    if relative_pos > 0:\n                        return 2  # Chase right\n                    else:\n                        return 1  # Chase left\n                else:\n                    return 0  # Wait briefly\n        \n        # Opponent is blocking - mix up attacks aggressively\n        if opp_block_status > 0.5:\n            attack_choice = random.random()\n            if attack_choice < 0.35:\n                return 5  # Heavy kick to break guard\n            elif attack_choice < 0.65:\n                return 4  # Quick punch\n            else:\n                # Try to reposition for attack angle\n                if relative_pos > 0:\n                    return 1  # Move left\n                else:\n                    return 2  # Move right\n        \n        # Normal close combat - aggressive attack patterns\n        if random.random() < attack_mix_chance:\n            punch_vs_kick = random.random()\n            if punch_vs_kick < 0.55:\n                return 4  # Favor punches for speed\n            else:\n                return 5  # Kicks for power\n        else:\n            # Aggressive movement to maintain pressure\n            if abs(relative_pos) > 0.2:\n                if relative_pos > 0:\n                    return 2  # Pursue right\n                else:\n                    return 1  # Pursue left\n            else:\n                return 4  # Default to quick punch\n    \n    # Medium range - aggressive positioning and timing\n    elif distance < medium_range:\n        # Projectile available and opponent far enough\n        if my_projectile_cooldown < 0.1 and distance > 0.18:\n            if random.random() < 0.4:\n                return 9  # Projectile to pressure\n        \n        # Opponent is vulnerable - press the attack\n        if opp_attack_cooldown > 0.3 or opp_block_status < 0.1:\n            if relative_pos > 0.1:\n                return 2  # Aggressive advance right\n            elif relative_pos < -0.1:\n                return 1  # Aggressive advance left\n            else:\n                # Close enough to attack\n                if distance < 0.2:\n                    if random.random() < 0.7:\n                        return 4  # Quick punch\n                    else:\n                        return 5  # Power kick\n                else:\n                    # Continue closing distance\n                    if relative_pos >= 0:\n                        return 2\n                    else:\n                        return 1\n        \n        # Opponent might counter-attack\n        if opp_attack_cooldown < 0.2:\n            # Aggressive but cautious approach\n            if distance < 0.2:\n                if random.random() < 0.25:\n                    return 6  # Brief block\n                else:\n                    return 4  # Punch first\n            else:\n                # Continue pressure\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        \n        # Default medium range aggression\n        chase_roll = random.random()\n        if chase_roll < chase_threshold:\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        else:\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile pressure\n            else:\n                # Keep advancing\n                if relative_pos >= 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Far range - projectile pressure and aggressive advancement\n    else:\n        # Prioritize projectiles for constant pressure\n        if my_projectile_cooldown < 0.1:\n            return 9  # Projectile attack\n        \n        # No projectile available - aggressive approach\n        approach_style = random.random()\n        if approach_style < 0.8:\n            # Direct aggressive approach\n            if relative_pos > 0.1:\n                return 2  # Move right toward opponent\n            elif relative_pos < -0.1:\n                return 1  # Move left toward opponent\n            else:\n                # Opponent directly ahead - charge forward\n                if random.random() < 0.6:\n                    if relative_pos >= 0:\n                        return 2\n                    else:\n                        return 1\n                else:\n                    return 0  # Brief pause before assault\n        else:\n            # Aerial approach for unpredictability\n            if abs(height_diff) < 0.1:\n                return",
      "fighting_style": "aggressive",
      "creation_time": 1748759260.998299,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_001",
      "generation": 0,
      "fitness": 235.0999999999963,
      "win_rate": 0.0,
      "avg_reward": 235.0999999999963,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate core game state information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[2]))\n    opponent_health = max(0.0, min(1.0, state[13]))\n    my_position = state[0]\n    opponent_position = state[11]\n    \n    # Extract attack and defense states\n    my_attack_cooldown = max(0.0, state[6])\n    my_block_status = state[7]\n    opponent_attack_cooldown = max(0.0, state[17])\n    opponent_block_status = state[18]\n    \n    # Projectile information\n    my_projectile_cooldown = max(0.0, state[10])\n    opponent_projectile_cooldown = max(0.0, state[21])\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.25\n    far_range = 0.4\n    safe_distance = 0.35\n    \n    # Health-based defensive parameters\n    critical_health = 0.3\n    low_health = 0.5\n    comfortable_health = 0.7\n    \n    # Defensive strategy: prioritize survival when health is low\n    if my_health < critical_health:\n        # Critical health - maximum defense\n        if distance < close_range:\n            # Too close, need to block or escape\n            if opponent_attack_cooldown < 0.3:\n                return 6  # Block incoming attack\n            else:\n                # Try to create distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left while blocking\n                else:\n                    return 8  # Move right while blocking\n        \n        elif distance < medium_range:\n            # Medium range - maintain distance\n            if my_projectile_cooldown < 0.1:\n                return 9  # Safe projectile attack\n            else:\n                # Create more distance\n                if relative_pos > 0:\n                    return 1  # Move away (left)\n                else:\n                    return 2  # Move away (right)\n        \n        else:\n            # Far range - projectile harassment\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile attack\n            else:\n                return 6  # Block while waiting for cooldown\n    \n    # Low health - cautious defensive play\n    elif my_health < low_health:\n        if distance < close_range:\n            # Close range - selective engagement\n            if opponent_attack_cooldown > 0.5 and my_attack_cooldown < 0.2:\n                # Safe counter-attack opportunity\n                if random.random() < 0.7:\n                    return 4  # Quick punch\n                else:\n                    return 5  # Stronger kick\n            else:\n                # Defensive positioning\n                if opponent_attack_cooldown < 0.3:\n                    return 6  # Block\n                else:\n                    # Create space while blocking\n                    if abs(my_position) > 0.7:  # Near wall\n                        if my_position > 0:\n                            return 7  # Move left (away from right wall)\n                        else:\n                            return 8  # Move right (away from left wall)\n                    else:\n                        if relative_pos > 0:\n                            return 7  # Move left while blocking\n                        else:\n                            return 8  # Move right while blocking\n        \n        elif distance < medium_range:\n            # Medium range - control distance\n            if opponent_attack_cooldown > 0.4 and distance > 0.18:\n                # Safe approach for quick attack\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            else:\n                # Maintain safe distance\n                if my_projectile_cooldown < 0.2:\n                    return 9  # Projectile\n                else:\n                    if distance < 0.2:\n                        # Too close, back up\n                        if relative_pos > 0:\n                            return 1  # Move left (away)\n                        else:\n                            return 2  # Move right (away)\n                    else:\n                        return 6  # Block and assess\n        \n        else:\n            # Far range - projectile game\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile attack\n            elif opponent_projectile_cooldown < 0.2:\n                return 6  # Block incoming projectile\n            else:\n                # Maintain distance\n                if distance < safe_distance:\n                    if relative_pos > 0:\n                        return 1  # Move away\n                    else:\n                        return 2  # Move away\n                else:\n                    return 0  # Wait for projectile cooldown\n    \n    # Comfortable health - balanced defensive approach\n    elif my_health > comfortable_health or health_advantage > 0.2:\n        if distance < close_range:\n            # Close range - measured aggression\n            if opponent_block_status > 0.5:\n                # Opponent is blocking, create space or throw\n                if random.random() < 0.4:\n                    return 5  # Kick (can break blocks better)\n                else:\n                    # Create space for projectile\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            \n            elif opponent_attack_cooldown < 0.3:\n                # Opponent can attack, be defensive\n                if random.random() < 0.8:\n                    return 6  # Block\n                else:\n                    # Counter-attack timing\n                    return 4  # Quick punch\n            \n            else:\n                # Good opportunity to attack\n                attack_choice = random.random()\n                if attack_choice < 0.5:\n                    return 4  # Punch\n                elif attack_choice < 0.8:\n                    return 5  # Kick\n                else:\n                    return 6  # Defensive block\n        \n        elif distance < medium_range:\n            # Medium range - positioning game\n            if my_projectile_cooldown < 0.1 and distance > 0.2:\n                return 9  # Projectile attack\n            \n            elif opponent_projectile_cooldown < 0.3:\n                # Opponent might shoot, be ready\n                if distance < 0.22:\n                    # Close enough to pressure\n                    if relative_pos > 0:\n                        return 2  # Move right toward opponent\n                    else:\n                        return 1  # Move left toward opponent\n                else:\n                    return 6  # Block potential projectile\n            \n            else:\n                # Control spacing\n                if distance < 0.18:\n                    # Too close for comfort\n                    if relative_pos > 0:\n                        return 1  # Back up left\n                    else:\n                        return 2  # Back up right\n                elif distance > 0.23:\n                    # Can close distance safely\n                    if relative_pos > 0:\n                        return 2  # Move right toward opponent\n                    else:\n                        return 1  # Move left toward opponent\n                else:\n                    # Good medium range position\n                    if random.random() < 0.3:\n                        return 0  # Wait and observe\n                    else:\n                        return 6  # Ready to block\n        \n        else:\n            # Far range - projectile and positioning\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile attack\n            elif opponent_projectile_cooldown < 0.2:\n                return 6  # Block incoming",
      "fighting_style": "defensive",
      "creation_time": 1748759260.998326,
      "tournament_stats": {},
      "lineage": []
    }
  ]
}