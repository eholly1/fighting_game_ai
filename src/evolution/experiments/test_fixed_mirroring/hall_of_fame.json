{
  "experiment_info": {
    "max_agents": 100,
    "last_updated": 1748801736.478702,
    "total_agents": 4
  },
  "agents": [
    {
      "agent_id": "gen0_agent_000",
      "generation": 0,
      "fitness": 96.86666666666183,
      "win_rate": 0.0,
      "avg_reward": 96.86666666666183,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22])) if len(state) > 22 else 0.5\n    relative_pos = max(-1.0, min(1.0, state[23])) if len(state) > 23 else 0.0\n    health_advantage = max(-1.0, min(1.0, state[25])) if len(state) > 25 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    opponent_health = state[12] if len(state) > 12 else 1.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    opponent_block_status = state[17] if len(state) > 17 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    opponent_attack_status = state[16] if len(state) > 16 else 0.0\n    projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Define aggressive tactical parameters\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    aggression_base = 0.8\n    health_panic_threshold = -0.4\n    winning_threshold = 0.2\n    pressure_distance = 0.35\n    \n    # Calculate dynamic aggression level based on health\n    aggression_modifier = 1.0\n    if health_advantage > winning_threshold:\n        aggression_modifier = 1.3  # Even more aggressive when winning\n    elif health_advantage < health_panic_threshold:\n        aggression_modifier = 0.6  # Slightly less reckless when desperate\n    \n    final_aggression = aggression_base * aggression_modifier\n    \n    # Emergency defensive actions when critically low health\n    if my_health < 0.2 and opponent_attack_status > 0.5:\n        if distance < close_range:\n            return 6  # Block immediate threat\n        elif relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Aggressive pressure tactics - chase relentlessly\n    chase_urgency = 1.0\n    if distance > pressure_distance:\n        chase_urgency = 1.5  # Increase urgency when opponent is far\n    \n    # Close range combat - maximize damage output\n    if distance < close_range:\n        # Counter opponent blocks with varied attacks\n        if opponent_block_status > 0.5:\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 5  # Kick to break blocks\n            elif attack_choice < 0.7:\n                return 4  # Quick punch\n            else:\n                # Reposition for better attack angle\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        # When opponent is vulnerable, attack aggressively\n        if opponent_attack_status < 0.3:\n            if random.random() < 0.65:\n                return 4  # Fast punch for pressure\n            else:\n                return 5  # Strong kick for damage\n        \n        # Mixed offense when trading blows\n        combat_roll = random.random()\n        if combat_roll < 0.45:\n            return 4  # Punch\n        elif combat_roll < 0.75:\n            return 5  # Kick\n        elif combat_roll < 0.85:\n            return 6  # Brief block\n        else:\n            # Aggressive repositioning\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n    \n    # Medium range - aggressive positioning and setup\n    elif distance < medium_range:\n        # Height advantage considerations\n        if abs(height_diff) > 0.3:\n            if height_diff < -0.3:  # Opponent is higher\n                return 3  # Jump to equalize\n            \n        # Aggressive approach based on opponent state\n        if opponent_block_status > 0.6:\n            # Opponent is defensive, charge in aggressively\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Mix attacks and movement for unpredictable pressure\n        medium_action = random.random()\n        if medium_action < 0.35:\n            # Direct approach\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        elif medium_action < 0.55:\n            return 4  # Aggressive punch approach\n        elif medium_action < 0.7:\n            # Projectile to force opponent action\n            if projectile_cooldown < 0.3:\n                return 9\n            else:\n                # Keep pressuring with movement\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        else:\n            return 3  # Jump for position change\n    \n    # Far range - close distance while applying pressure\n    else:\n        # Projectile pressure when available\n        if projectile_cooldown < 0.4 and random.random() < 0.6:\n            return 9  # Ranged pressure\n        \n        # Aggressive advancement\n        advance_method = random.random()\n        if advance_method < 0.7:\n            # Direct chase\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        elif advance_method < 0.85:\n            return 3  # Jump approach\n        else:\n            # Projectile if available, otherwise advance\n            if projectile_cooldown < 0.5:\n                return 9\n            else:\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Fallback aggressive action\n    if relative_pos > 0:\n        return 2\n    else:\n        return 1",
      "fighting_style": "aggressive",
      "creation_time": 1748801582.587032,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_elite_000",
      "generation": 1,
      "fitness": 91.16666666666248,
      "win_rate": 0.0,
      "avg_reward": 91.16666666666248,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22])) if len(state) > 22 else 0.5\n    relative_pos = max(-1.0, min(1.0, state[23])) if len(state) > 23 else 0.0\n    health_advantage = max(-1.0, min(1.0, state[25])) if len(state) > 25 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    opponent_health = state[12] if len(state) > 12 else 1.0\n    my_block_status = state[6] if len(state) > 6 else 0.0\n    opponent_block_status = state[17] if len(state) > 17 else 0.0\n    my_attack_status = state[5] if len(state) > 5 else 0.0\n    opponent_attack_status = state[16] if len(state) > 16 else 0.0\n    projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Define aggressive tactical parameters\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    aggression_base = 0.8\n    health_panic_threshold = -0.4\n    winning_threshold = 0.2\n    pressure_distance = 0.35\n    \n    # Calculate dynamic aggression level based on health\n    aggression_modifier = 1.0\n    if health_advantage > winning_threshold:\n        aggression_modifier = 1.3  # Even more aggressive when winning\n    elif health_advantage < health_panic_threshold:\n        aggression_modifier = 0.6  # Slightly less reckless when desperate\n    \n    final_aggression = aggression_base * aggression_modifier\n    \n    # Emergency defensive actions when critically low health\n    if my_health < 0.2 and opponent_attack_status > 0.5:\n        if distance < close_range:\n            return 6  # Block immediate threat\n        elif relative_pos > 0:\n            return 7  # Move left while blocking\n        else:\n            return 8  # Move right while blocking\n    \n    # Aggressive pressure tactics - chase relentlessly\n    chase_urgency = 1.0\n    if distance > pressure_distance:\n        chase_urgency = 1.5  # Increase urgency when opponent is far\n    \n    # Close range combat - maximize damage output\n    if distance < close_range:\n        # Counter opponent blocks with varied attacks\n        if opponent_block_status > 0.5:\n            attack_choice = random.random()\n            if attack_choice < 0.4:\n                return 5  # Kick to break blocks\n            elif attack_choice < 0.7:\n                return 4  # Quick punch\n            else:\n                # Reposition for better attack angle\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        # When opponent is vulnerable, attack aggressively\n        if opponent_attack_status < 0.3:\n            if random.random() < 0.65:\n                return 4  # Fast punch for pressure\n            else:\n                return 5  # Strong kick for damage\n        \n        # Mixed offense when trading blows\n        combat_roll = random.random()\n        if combat_roll < 0.45:\n            return 4  # Punch\n        elif combat_roll < 0.75:\n            return 5  # Kick\n        elif combat_roll < 0.85:\n            return 6  # Brief block\n        else:\n            # Aggressive repositioning\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n    \n    # Medium range - aggressive positioning and setup\n    elif distance < medium_range:\n        # Height advantage considerations\n        if abs(height_diff) > 0.3:\n            if height_diff < -0.3:  # Opponent is higher\n                return 3  # Jump to equalize\n            \n        # Aggressive approach based on opponent state\n        if opponent_block_status > 0.6:\n            # Opponent is defensive, charge in aggressively\n            if relative_pos > 0:\n                return 2  # Chase right\n            else:\n                return 1  # Chase left\n        \n        # Mix attacks and movement for unpredictable pressure\n        medium_action = random.random()\n        if medium_action < 0.35:\n            # Direct approach\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        elif medium_action < 0.55:\n            return 4  # Aggressive punch approach\n        elif medium_action < 0.7:\n            # Projectile to force opponent action\n            if projectile_cooldown < 0.3:\n                return 9\n            else:\n                # Keep pressuring with movement\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n        else:\n            return 3  # Jump for position change\n    \n    # Far range - close distance while applying pressure\n    else:\n        # Projectile pressure when available\n        if projectile_cooldown < 0.4 and random.random() < 0.6:\n            return 9  # Ranged pressure\n        \n        # Aggressive advancement\n        advance_method = random.random()\n        if advance_method < 0.7:\n            # Direct chase\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        elif advance_method < 0.85:\n            return 3  # Jump approach\n        else:\n            # Projectile if available, otherwise advance\n            if projectile_cooldown < 0.5:\n                return 9\n            else:\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Fallback aggressive action\n    if relative_pos > 0:\n        return 2\n    else:\n        return 1",
      "fighting_style": "aggressive",
      "creation_time": 1748801736.478677,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_004",
      "generation": 0,
      "fitness": 71.44000000000443,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player and opponent state info\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    opp_health = state[12] if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_attack_status = state[18] if len(state) > 18 else 0.0\n    opp_block_status = state[19] if len(state) > 19 else 0.0\n    \n    # Define tactical ranges and thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    critical_health_diff = -0.4\n    winning_health_diff = 0.3\n    \n    # Adaptive behavior tracking variables\n    frame_randomness = random.random()\n    aggression_factor = 0.5 + (health_advantage * 0.3)\n    defensive_factor = max(0.1, 0.8 - health_advantage)\n    \n    # Emergency defensive behavior when losing badly\n    if health_advantage < critical_health_diff:\n        if distance < close_range:\n            # In danger zone - prioritize blocking and escape\n            if opp_attack_status > 0.5:\n                return 6  # Block incoming attack\n            elif relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < medium_range:\n            # Try to create distance\n            if my_projectile_cd < 0.3:\n                return 9  # Projectile to keep distance\n            elif relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        else:\n            # Safe distance - use projectiles\n            if my_projectile_cd < 0.5:\n                return 9  # Projectile spam when losing\n            else:\n                return 0  # Wait for cooldown\n    \n    # Aggressive behavior when winning significantly\n    elif health_advantage > winning_health_diff:\n        if distance < close_range:\n            # Go for the kill with varied attacks\n            if opp_block_status > 0.5:\n                # Opponent blocking - mix up timing\n                if frame_randomness < 0.3:\n                    return 0  # Wait then attack\n                elif frame_randomness < 0.6:\n                    return 5  # Heavy kick through block\n                else:\n                    return 4  # Quick punch\n            else:\n                # Opponent not blocking - aggressive assault\n                if frame_randomness < 0.4:\n                    return 5  # Power kick\n                elif frame_randomness < 0.7:\n                    return 4  # Quick punch\n                else:\n                    return 3  # Jump attack mix-up\n        elif distance < medium_range:\n            # Close the distance aggressively\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        else:\n            # Long range pressure\n            if my_projectile_cd < 0.4:\n                return 9  # Projectile pressure\n            elif relative_pos > 0:\n                return 2  # Advance right\n            else:\n                return 1  # Advance left\n    \n    # Balanced adaptive strategy for even matchups\n    else:\n        # Close range tactical decisions\n        if distance < close_range:\n            # High risk/reward zone - careful decision making\n            if opp_attack_status > 0.5:\n                # Opponent attacking - defensive response\n                if frame_randomness < defensive_factor:\n                    return 6  # Block attack\n                else:\n                    # Counter-attack timing\n                    if frame_randomness < 0.7:\n                        return 4  # Quick counter punch\n                    else:\n                        return 5  # Heavy counter kick\n            \n            elif opp_block_status > 0.5:\n                # Opponent blocking - break their defense\n                if frame_randomness < 0.25:\n                    return 0  # Wait for opening\n                elif frame_randomness < 0.5:\n                    return 5  # Heavy attack vs block\n                elif frame_randomness < 0.75:\n                    return 3  # Jump over block\n                else:\n                    # Reposition\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            \n            else:\n                # Open opponent - capitalize with attacks\n                attack_choice = frame_randomness * aggression_factor\n                if attack_choice < 0.2:\n                    return 4  # Quick punch\n                elif attack_choice < 0.35:\n                    return 5  # Power kick  \n                elif attack_choice < 0.45:\n                    return 3  # Jump attack\n                else:\n                    # Mix in some defense\n                    return 6  # Block to reset\n        \n        # Medium range positioning and tactics\n        elif distance < medium_range:\n            # Critical positioning zone\n            if abs(height_diff) > 0.3:\n                # Height advantage considerations\n                if height_diff > 0:\n                    # We're higher - projectile advantage\n                    if my_projectile_cd < 0.6:\n                        return 9  # Projectile from high ground\n                    else:\n                        return 0  # Wait for cooldown\n                else:\n                    # We're lower - close distance\n                    if relative_pos > 0:\n                        return 2  # Move right and up\n                    else:\n                        return 1  # Move left and up\n            \n            # Equal height medium range\n            positioning_strategy = frame_randomness + (aggression_factor * 0.3)\n            \n            if positioning_strategy < 0.3:\n                # Advance for attack\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            \n            elif positioning_strategy < 0.5:\n                # Projectile harassment  \n                if my_projectile_cd < 0.7:\n                    return 9  # Medium range projectile\n                else:\n                    # Can't projectile - reposition\n                    if my_velocity_x > 0.1:\n                        return 1  # Move left to change momentum\n                    else:\n                        return 2  # Move right to change momentum\n            \n            elif positioning_strategy < 0.7:\n                # Defensive positioning\n                if opp_attack_status > 0.3:\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    return 0  # Wait and observe\n            \n            else:\n                # Jump tactics for unpredictability\n                return 3  #",
      "fighting_style": "adaptive",
      "creation_time": 1748801582.587053,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_elite_001",
      "generation": 1,
      "fitness": 45.386666666668994,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract player and opponent state info\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_x_pos = state[0]\n    my_y_pos = state[2] if len(state) > 2 else 0.0\n    my_velocity_x = state[3] if len(state) > 3 else 0.0\n    my_attack_status = state[7] if len(state) > 7 else 0.0\n    my_block_status = state[8] if len(state) > 8 else 0.0\n    my_projectile_cd = state[10] if len(state) > 10 else 0.0\n    \n    opp_health = state[12] if len(state) > 12 else 0.5\n    opp_x_pos = state[11] if len(state) > 11 else 0.0\n    opp_attack_status = state[18] if len(state) > 18 else 0.0\n    opp_block_status = state[19] if len(state) > 19 else 0.0\n    \n    # Define tactical ranges and thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    critical_health_diff = -0.4\n    winning_health_diff = 0.3\n    \n    # Adaptive behavior tracking variables\n    frame_randomness = random.random()\n    aggression_factor = 0.5 + (health_advantage * 0.3)\n    defensive_factor = max(0.1, 0.8 - health_advantage)\n    \n    # Emergency defensive behavior when losing badly\n    if health_advantage < critical_health_diff:\n        if distance < close_range:\n            # In danger zone - prioritize blocking and escape\n            if opp_attack_status > 0.5:\n                return 6  # Block incoming attack\n            elif relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < medium_range:\n            # Try to create distance\n            if my_projectile_cd < 0.3:\n                return 9  # Projectile to keep distance\n            elif relative_pos > 0:\n                return 1  # Move away left\n            else:\n                return 2  # Move away right\n        else:\n            # Safe distance - use projectiles\n            if my_projectile_cd < 0.5:\n                return 9  # Projectile spam when losing\n            else:\n                return 0  # Wait for cooldown\n    \n    # Aggressive behavior when winning significantly\n    elif health_advantage > winning_health_diff:\n        if distance < close_range:\n            # Go for the kill with varied attacks\n            if opp_block_status > 0.5:\n                # Opponent blocking - mix up timing\n                if frame_randomness < 0.3:\n                    return 0  # Wait then attack\n                elif frame_randomness < 0.6:\n                    return 5  # Heavy kick through block\n                else:\n                    return 4  # Quick punch\n            else:\n                # Opponent not blocking - aggressive assault\n                if frame_randomness < 0.4:\n                    return 5  # Power kick\n                elif frame_randomness < 0.7:\n                    return 4  # Quick punch\n                else:\n                    return 3  # Jump attack mix-up\n        elif distance < medium_range:\n            # Close the distance aggressively\n            if relative_pos > 0:\n                return 2  # Move right toward opponent\n            else:\n                return 1  # Move left toward opponent\n        else:\n            # Long range pressure\n            if my_projectile_cd < 0.4:\n                return 9  # Projectile pressure\n            elif relative_pos > 0:\n                return 2  # Advance right\n            else:\n                return 1  # Advance left\n    \n    # Balanced adaptive strategy for even matchups\n    else:\n        # Close range tactical decisions\n        if distance < close_range:\n            # High risk/reward zone - careful decision making\n            if opp_attack_status > 0.5:\n                # Opponent attacking - defensive response\n                if frame_randomness < defensive_factor:\n                    return 6  # Block attack\n                else:\n                    # Counter-attack timing\n                    if frame_randomness < 0.7:\n                        return 4  # Quick counter punch\n                    else:\n                        return 5  # Heavy counter kick\n            \n            elif opp_block_status > 0.5:\n                # Opponent blocking - break their defense\n                if frame_randomness < 0.25:\n                    return 0  # Wait for opening\n                elif frame_randomness < 0.5:\n                    return 5  # Heavy attack vs block\n                elif frame_randomness < 0.75:\n                    return 3  # Jump over block\n                else:\n                    # Reposition\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            \n            else:\n                # Open opponent - capitalize with attacks\n                attack_choice = frame_randomness * aggression_factor\n                if attack_choice < 0.2:\n                    return 4  # Quick punch\n                elif attack_choice < 0.35:\n                    return 5  # Power kick  \n                elif attack_choice < 0.45:\n                    return 3  # Jump attack\n                else:\n                    # Mix in some defense\n                    return 6  # Block to reset\n        \n        # Medium range positioning and tactics\n        elif distance < medium_range:\n            # Critical positioning zone\n            if abs(height_diff) > 0.3:\n                # Height advantage considerations\n                if height_diff > 0:\n                    # We're higher - projectile advantage\n                    if my_projectile_cd < 0.6:\n                        return 9  # Projectile from high ground\n                    else:\n                        return 0  # Wait for cooldown\n                else:\n                    # We're lower - close distance\n                    if relative_pos > 0:\n                        return 2  # Move right and up\n                    else:\n                        return 1  # Move left and up\n            \n            # Equal height medium range\n            positioning_strategy = frame_randomness + (aggression_factor * 0.3)\n            \n            if positioning_strategy < 0.3:\n                # Advance for attack\n                if relative_pos > 0:\n                    return 2  # Move right toward opponent\n                else:\n                    return 1  # Move left toward opponent\n            \n            elif positioning_strategy < 0.5:\n                # Projectile harassment  \n                if my_projectile_cd < 0.7:\n                    return 9  # Medium range projectile\n                else:\n                    # Can't projectile - reposition\n                    if my_velocity_x > 0.1:\n                        return 1  # Move left to change momentum\n                    else:\n                        return 2  # Move right to change momentum\n            \n            elif positioning_strategy < 0.7:\n                # Defensive positioning\n                if opp_attack_status > 0.3:\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    return 0  # Wait and observe\n            \n            else:\n                # Jump tactics for unpredictability\n                return 3  #",
      "fighting_style": "adaptive",
      "creation_time": 1748801736.4786859,
      "tournament_stats": {},
      "lineage": []
    }
  ]
}