{
  "experiment_info": {
    "max_agents": 100,
    "last_updated": 1748806570.454499,
    "total_agents": 13
  },
  "agents": [
    {
      "agent_id": "gen0_agent_004",
      "generation": 0,
      "fitness": 244.0872857142885,
      "win_rate": 0.0,
      "avg_reward": 238.3950000000009,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_pos_x = state[2] if abs(state[2]) <= 1.0 else 0.0\n    my_velocity_x = state[4] if abs(state[4]) <= 2.0 else 0.0\n    my_attack_cooldown = state[7] if state[7] >= 0 else 0.0\n    my_block_status = state[8] if state[8] >= 0 else 0.0\n    my_projectile_cooldown = state[9] if state[9] >= 0 else 0.0\n    \n    opponent_health = state[12] if state[12] >= 0 else 0.5\n    opponent_pos_x = state[13] if abs(state[13]) <= 1.0 else 0.0\n    opponent_velocity_x = state[15] if abs(state[15]) <= 2.0 else 0.0\n    opponent_attack_cooldown = state[18] if state[18] >= 0 else 0.0\n    opponent_block_status = state[19] if state[19] >= 0 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    \n    critical_health = 0.25\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Analyze current situation\n    is_close = distance < close_range\n    is_medium = close_range <= distance < medium_range\n    is_far = distance >= medium_range\n    is_very_far = distance > far_range\n    \n    am_winning = health_advantage > 0.2\n    am_losing = health_advantage < -0.2\n    am_critical = my_health < critical_health\n    am_low_health = my_health < low_health\n    \n    opponent_attacking = opponent_attack_cooldown > 0.1\n    opponent_blocking = opponent_block_status > 0.1\n    opponent_moving_toward = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_moving_away = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    \n    can_attack = my_attack_cooldown < 0.05\n    can_projectile = my_projectile_cooldown < 0.05\n    am_cornered = abs(my_pos_x) > 0.8\n    opponent_cornered = abs(opponent_pos_x) > 0.8\n    \n    # Emergency defensive measures\n    if am_critical and opponent_attacking and is_close:\n        if random.random() < 0.8:\n            return 6  # Block to survive\n        else:\n            # Desperate escape\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Adaptive strategy based on health situation\n    if am_losing and my_health < low_health:\n        # Defensive/cautious play when losing\n        if is_very_far:\n            if can_projectile and not opponent_blocking:\n                return 9  # Safe projectile\n            else:\n                # Position for better angle\n                if abs(relative_pos) < 0.3:\n                    return 1 if random.random() < 0.5 else 2\n                else:\n                    return 0  # Wait\n        \n        elif is_far:\n            if opponent_moving_toward and can_projectile:\n                return 9  # Projectile to slow approach\n            elif opponent_blocking:\n                # Try to flank\n                if relative_pos > 0:\n                    return 1  # Move left to flank\n                else:\n                    return 2  # Move right to flank\n            else:\n                if can_projectile:\n                    return 9\n                else:\n                    return 6  # Block while waiting\n        \n        elif is_medium:\n            if opponent_attacking:\n                return 6  # Block incoming attack\n            elif opponent_moving_toward:\n                # Maintain distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n            else:\n                if can_projectile and not opponent_blocking:\n                    return 9\n                else:\n                    return 6  # Defensive stance\n        \n        else:  # Close range\n            if opponent_attacking:\n                return 6  # Block\n            elif can_attack and not opponent_blocking:\n                # Quick counter-attack\n                return 4  # Fast punch\n            else:\n                # Try to create space\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n    \n    elif am_winning or my_health > good_health:\n        # Aggressive play when winning\n        if is_close:\n            if opponent_blocking:\n                # Mix up attacks to break guard\n                if random.random() < 0.4:\n                    return 5  # Strong kick\n                elif random.random() < 0.6:\n                    return 4  # Fast punch\n                else:\n                    # Create space for projectile\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            elif can_attack:\n                # Aggressive combo\n                if random.random() < 0.7:\n                    return 5  # Kick for damage\n                else:\n                    return 4  # Punch for speed\n            else:\n                # Position for next attack\n                if opponent_moving_away:\n                    if relative_pos > 0:\n                        return 2  # Chase right\n                    else:\n                        return 1  # Chase left\n                else:\n                    return 0  # Wait for cooldown\n        \n        elif is_medium:\n            if opponent_blocking:\n                # Move to better position\n                if random.random() < 0.5:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    if can_projectile:\n                        return 9  # Projectile to pressure\n                    else:\n                        return 0\n            elif opponent_moving_away:\n                # Pursue aggressively\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            else:\n                # Close distance for attack\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:  # Far range\n            if can_projectile and not opponent_blocking:\n                return 9  # Projectile pressure\n            elif opponent_blocking:\n                # Advance while they block\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Maintain pressure\n                if can_projectile:\n                    return 9\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move right",
      "fighting_style": "adaptive",
      "creation_time": 1748802924.4054441,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_elite_000",
      "generation": 2,
      "fitness": 215.18716666666936,
      "win_rate": 0.0,
      "avg_reward": 269.7816666666693,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_pos_x = state[2] if abs(state[2]) <= 1.0 else 0.0\n    my_velocity_x = state[4] if abs(state[4]) <= 2.0 else 0.0\n    my_attack_cooldown = state[7] if state[7] >= 0 else 0.0\n    my_block_status = state[8] if state[8] >= 0 else 0.0\n    my_projectile_cooldown = state[9] if state[9] >= 0 else 0.0\n    \n    opponent_health = state[12] if state[12] >= 0 else 0.5\n    opponent_pos_x = state[13] if abs(state[13]) <= 1.0 else 0.0\n    opponent_velocity_x = state[15] if abs(state[15]) <= 2.0 else 0.0\n    opponent_attack_cooldown = state[18] if state[18] >= 0 else 0.0\n    opponent_block_status = state[19] if state[19] >= 0 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    \n    critical_health = 0.25\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Analyze current situation\n    is_close = distance < close_range\n    is_medium = close_range <= distance < medium_range\n    is_far = distance >= medium_range\n    is_very_far = distance > far_range\n    \n    am_winning = health_advantage > 0.2\n    am_losing = health_advantage < -0.2\n    am_critical = my_health < critical_health\n    am_low_health = my_health < low_health\n    \n    opponent_attacking = opponent_attack_cooldown > 0.1\n    opponent_blocking = opponent_block_status > 0.1\n    opponent_moving_toward = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_moving_away = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    \n    can_attack = my_attack_cooldown < 0.05\n    can_projectile = my_projectile_cooldown < 0.05\n    am_cornered = abs(my_pos_x) > 0.8\n    opponent_cornered = abs(opponent_pos_x) > 0.8\n    \n    # Emergency defensive measures\n    if am_critical and opponent_attacking and is_close:\n        if random.random() < 0.8:\n            return 6  # Block to survive\n        else:\n            # Desperate escape\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Adaptive strategy based on health situation\n    if am_losing and my_health < low_health:\n        # Defensive/cautious play when losing\n        if is_very_far:\n            if can_projectile and not opponent_blocking:\n                return 9  # Safe projectile\n            else:\n                # Position for better angle\n                if abs(relative_pos) < 0.3:\n                    return 1 if random.random() < 0.5 else 2\n                else:\n                    return 0  # Wait\n        \n        elif is_far:\n            if opponent_moving_toward and can_projectile:\n                return 9  # Projectile to slow approach\n            elif opponent_blocking:\n                # Try to flank\n                if relative_pos > 0:\n                    return 1  # Move left to flank\n                else:\n                    return 2  # Move right to flank\n            else:\n                if can_projectile:\n                    return 9\n                else:\n                    return 6  # Block while waiting\n        \n        elif is_medium:\n            if opponent_attacking:\n                return 6  # Block incoming attack\n            elif opponent_moving_toward:\n                # Maintain distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n            else:\n                if can_projectile and not opponent_blocking:\n                    return 9\n                else:\n                    return 6  # Defensive stance\n        \n        else:  # Close range\n            if opponent_attacking:\n                return 6  # Block\n            elif can_attack and not opponent_blocking:\n                # Quick counter-attack\n                return 4  # Fast punch\n            else:\n                # Try to create space\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n    \n    elif am_winning or my_health > good_health:\n        # Aggressive play when winning\n        if is_close:\n            if opponent_blocking:\n                # Mix up attacks to break guard\n                if random.random() < 0.4:\n                    return 5  # Strong kick\n                elif random.random() < 0.6:\n                    return 4  # Fast punch\n                else:\n                    # Create space for projectile\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            elif can_attack:\n                # Aggressive combo\n                if random.random() < 0.7:\n                    return 5  # Kick for damage\n                else:\n                    return 4  # Punch for speed\n            else:\n                # Position for next attack\n                if opponent_moving_away:\n                    if relative_pos > 0:\n                        return 2  # Chase right\n                    else:\n                        return 1  # Chase left\n                else:\n                    return 0  # Wait for cooldown\n        \n        elif is_medium:\n            if opponent_blocking:\n                # Move to better position\n                if random.random() < 0.5:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    if can_projectile:\n                        return 9  # Projectile to pressure\n                    else:\n                        return 0\n            elif opponent_moving_away:\n                # Pursue aggressively\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            else:\n                # Close distance for attack\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:  # Far range\n            if can_projectile and not opponent_blocking:\n                return 9  # Projectile pressure\n            elif opponent_blocking:\n                # Advance while they block\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Maintain pressure\n                if can_projectile:\n                    return 9\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move right",
      "fighting_style": "adaptive",
      "creation_time": 1748804836.53779,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_elite_000",
      "generation": 3,
      "fitness": 190.73966666666772,
      "win_rate": 0.0,
      "avg_reward": 234.85666666666694,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_pos_x = state[2] if abs(state[2]) <= 1.0 else 0.0\n    my_velocity_x = state[4] if abs(state[4]) <= 2.0 else 0.0\n    my_attack_cooldown = state[7] if state[7] >= 0 else 0.0\n    my_block_status = state[8] if state[8] >= 0 else 0.0\n    my_projectile_cooldown = state[9] if state[9] >= 0 else 0.0\n    \n    opponent_health = state[12] if state[12] >= 0 else 0.5\n    opponent_pos_x = state[13] if abs(state[13]) <= 1.0 else 0.0\n    opponent_velocity_x = state[15] if abs(state[15]) <= 2.0 else 0.0\n    opponent_attack_cooldown = state[18] if state[18] >= 0 else 0.0\n    opponent_block_status = state[19] if state[19] >= 0 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    \n    critical_health = 0.25\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Analyze current situation\n    is_close = distance < close_range\n    is_medium = close_range <= distance < medium_range\n    is_far = distance >= medium_range\n    is_very_far = distance > far_range\n    \n    am_winning = health_advantage > 0.2\n    am_losing = health_advantage < -0.2\n    am_critical = my_health < critical_health\n    am_low_health = my_health < low_health\n    \n    opponent_attacking = opponent_attack_cooldown > 0.1\n    opponent_blocking = opponent_block_status > 0.1\n    opponent_moving_toward = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_moving_away = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    \n    can_attack = my_attack_cooldown < 0.05\n    can_projectile = my_projectile_cooldown < 0.05\n    am_cornered = abs(my_pos_x) > 0.8\n    opponent_cornered = abs(opponent_pos_x) > 0.8\n    \n    # Emergency defensive measures\n    if am_critical and opponent_attacking and is_close:\n        if random.random() < 0.8:\n            return 6  # Block to survive\n        else:\n            # Desperate escape\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Adaptive strategy based on health situation\n    if am_losing and my_health < low_health:\n        # Defensive/cautious play when losing\n        if is_very_far:\n            if can_projectile and not opponent_blocking:\n                return 9  # Safe projectile\n            else:\n                # Position for better angle\n                if abs(relative_pos) < 0.3:\n                    return 1 if random.random() < 0.5 else 2\n                else:\n                    return 0  # Wait\n        \n        elif is_far:\n            if opponent_moving_toward and can_projectile:\n                return 9  # Projectile to slow approach\n            elif opponent_blocking:\n                # Try to flank\n                if relative_pos > 0:\n                    return 1  # Move left to flank\n                else:\n                    return 2  # Move right to flank\n            else:\n                if can_projectile:\n                    return 9\n                else:\n                    return 6  # Block while waiting\n        \n        elif is_medium:\n            if opponent_attacking:\n                return 6  # Block incoming attack\n            elif opponent_moving_toward:\n                # Maintain distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n            else:\n                if can_projectile and not opponent_blocking:\n                    return 9\n                else:\n                    return 6  # Defensive stance\n        \n        else:  # Close range\n            if opponent_attacking:\n                return 6  # Block\n            elif can_attack and not opponent_blocking:\n                # Quick counter-attack\n                return 4  # Fast punch\n            else:\n                # Try to create space\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n    \n    elif am_winning or my_health > good_health:\n        # Aggressive play when winning\n        if is_close:\n            if opponent_blocking:\n                # Mix up attacks to break guard\n                if random.random() < 0.4:\n                    return 5  # Strong kick\n                elif random.random() < 0.6:\n                    return 4  # Fast punch\n                else:\n                    # Create space for projectile\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            elif can_attack:\n                # Aggressive combo\n                if random.random() < 0.7:\n                    return 5  # Kick for damage\n                else:\n                    return 4  # Punch for speed\n            else:\n                # Position for next attack\n                if opponent_moving_away:\n                    if relative_pos > 0:\n                        return 2  # Chase right\n                    else:\n                        return 1  # Chase left\n                else:\n                    return 0  # Wait for cooldown\n        \n        elif is_medium:\n            if opponent_blocking:\n                # Move to better position\n                if random.random() < 0.5:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    if can_projectile:\n                        return 9  # Projectile to pressure\n                    else:\n                        return 0\n            elif opponent_moving_away:\n                # Pursue aggressively\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            else:\n                # Close distance for attack\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:  # Far range\n            if can_projectile and not opponent_blocking:\n                return 9  # Projectile pressure\n            elif opponent_blocking:\n                # Advance while they block\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Maintain pressure\n                if can_projectile:\n                    return 9\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move right",
      "fighting_style": "adaptive",
      "creation_time": 1748805413.625618,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_elite_000",
      "generation": 1,
      "fitness": 188.9441666666672,
      "win_rate": 0.0,
      "avg_reward": 232.29166666666623,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_pos_x = state[2] if abs(state[2]) <= 1.0 else 0.0\n    my_velocity_x = state[4] if abs(state[4]) <= 2.0 else 0.0\n    my_attack_cooldown = state[7] if state[7] >= 0 else 0.0\n    my_block_status = state[8] if state[8] >= 0 else 0.0\n    my_projectile_cooldown = state[9] if state[9] >= 0 else 0.0\n    \n    opponent_health = state[12] if state[12] >= 0 else 0.5\n    opponent_pos_x = state[13] if abs(state[13]) <= 1.0 else 0.0\n    opponent_velocity_x = state[15] if abs(state[15]) <= 2.0 else 0.0\n    opponent_attack_cooldown = state[18] if state[18] >= 0 else 0.0\n    opponent_block_status = state[19] if state[19] >= 0 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    \n    critical_health = 0.25\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Analyze current situation\n    is_close = distance < close_range\n    is_medium = close_range <= distance < medium_range\n    is_far = distance >= medium_range\n    is_very_far = distance > far_range\n    \n    am_winning = health_advantage > 0.2\n    am_losing = health_advantage < -0.2\n    am_critical = my_health < critical_health\n    am_low_health = my_health < low_health\n    \n    opponent_attacking = opponent_attack_cooldown > 0.1\n    opponent_blocking = opponent_block_status > 0.1\n    opponent_moving_toward = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_moving_away = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    \n    can_attack = my_attack_cooldown < 0.05\n    can_projectile = my_projectile_cooldown < 0.05\n    am_cornered = abs(my_pos_x) > 0.8\n    opponent_cornered = abs(opponent_pos_x) > 0.8\n    \n    # Emergency defensive measures\n    if am_critical and opponent_attacking and is_close:\n        if random.random() < 0.8:\n            return 6  # Block to survive\n        else:\n            # Desperate escape\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Adaptive strategy based on health situation\n    if am_losing and my_health < low_health:\n        # Defensive/cautious play when losing\n        if is_very_far:\n            if can_projectile and not opponent_blocking:\n                return 9  # Safe projectile\n            else:\n                # Position for better angle\n                if abs(relative_pos) < 0.3:\n                    return 1 if random.random() < 0.5 else 2\n                else:\n                    return 0  # Wait\n        \n        elif is_far:\n            if opponent_moving_toward and can_projectile:\n                return 9  # Projectile to slow approach\n            elif opponent_blocking:\n                # Try to flank\n                if relative_pos > 0:\n                    return 1  # Move left to flank\n                else:\n                    return 2  # Move right to flank\n            else:\n                if can_projectile:\n                    return 9\n                else:\n                    return 6  # Block while waiting\n        \n        elif is_medium:\n            if opponent_attacking:\n                return 6  # Block incoming attack\n            elif opponent_moving_toward:\n                # Maintain distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n            else:\n                if can_projectile and not opponent_blocking:\n                    return 9\n                else:\n                    return 6  # Defensive stance\n        \n        else:  # Close range\n            if opponent_attacking:\n                return 6  # Block\n            elif can_attack and not opponent_blocking:\n                # Quick counter-attack\n                return 4  # Fast punch\n            else:\n                # Try to create space\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n    \n    elif am_winning or my_health > good_health:\n        # Aggressive play when winning\n        if is_close:\n            if opponent_blocking:\n                # Mix up attacks to break guard\n                if random.random() < 0.4:\n                    return 5  # Strong kick\n                elif random.random() < 0.6:\n                    return 4  # Fast punch\n                else:\n                    # Create space for projectile\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            elif can_attack:\n                # Aggressive combo\n                if random.random() < 0.7:\n                    return 5  # Kick for damage\n                else:\n                    return 4  # Punch for speed\n            else:\n                # Position for next attack\n                if opponent_moving_away:\n                    if relative_pos > 0:\n                        return 2  # Chase right\n                    else:\n                        return 1  # Chase left\n                else:\n                    return 0  # Wait for cooldown\n        \n        elif is_medium:\n            if opponent_blocking:\n                # Move to better position\n                if random.random() < 0.5:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    if can_projectile:\n                        return 9  # Projectile to pressure\n                    else:\n                        return 0\n            elif opponent_moving_away:\n                # Pursue aggressively\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            else:\n                # Close distance for attack\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:  # Far range\n            if can_projectile and not opponent_blocking:\n                return 9  # Projectile pressure\n            elif opponent_blocking:\n                # Advance while they block\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Maintain pressure\n                if can_projectile:\n                    return 9\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move right",
      "fighting_style": "adaptive",
      "creation_time": 1748803669.245038,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_elite_000",
      "generation": 4,
      "fitness": 187.5278333333342,
      "win_rate": 0.0,
      "avg_reward": 230.26833333333337,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states\n    my_health = state[1] if state[1] >= 0 else 0.5\n    my_pos_x = state[2] if abs(state[2]) <= 1.0 else 0.0\n    my_velocity_x = state[4] if abs(state[4]) <= 2.0 else 0.0\n    my_attack_cooldown = state[7] if state[7] >= 0 else 0.0\n    my_block_status = state[8] if state[8] >= 0 else 0.0\n    my_projectile_cooldown = state[9] if state[9] >= 0 else 0.0\n    \n    opponent_health = state[12] if state[12] >= 0 else 0.5\n    opponent_pos_x = state[13] if abs(state[13]) <= 1.0 else 0.0\n    opponent_velocity_x = state[15] if abs(state[15]) <= 2.0 else 0.0\n    opponent_attack_cooldown = state[18] if state[18] >= 0 else 0.0\n    opponent_block_status = state[19] if state[19] >= 0 else 0.0\n    \n    # Define strategic thresholds\n    close_range = 0.12\n    medium_range = 0.35\n    far_range = 0.6\n    \n    critical_health = 0.25\n    low_health = 0.4\n    good_health = 0.7\n    \n    # Analyze current situation\n    is_close = distance < close_range\n    is_medium = close_range <= distance < medium_range\n    is_far = distance >= medium_range\n    is_very_far = distance > far_range\n    \n    am_winning = health_advantage > 0.2\n    am_losing = health_advantage < -0.2\n    am_critical = my_health < critical_health\n    am_low_health = my_health < low_health\n    \n    opponent_attacking = opponent_attack_cooldown > 0.1\n    opponent_blocking = opponent_block_status > 0.1\n    opponent_moving_toward = (relative_pos > 0 and opponent_velocity_x > 0.1) or (relative_pos < 0 and opponent_velocity_x < -0.1)\n    opponent_moving_away = (relative_pos > 0 and opponent_velocity_x < -0.1) or (relative_pos < 0 and opponent_velocity_x > 0.1)\n    \n    can_attack = my_attack_cooldown < 0.05\n    can_projectile = my_projectile_cooldown < 0.05\n    am_cornered = abs(my_pos_x) > 0.8\n    opponent_cornered = abs(opponent_pos_x) > 0.8\n    \n    # Emergency defensive measures\n    if am_critical and opponent_attacking and is_close:\n        if random.random() < 0.8:\n            return 6  # Block to survive\n        else:\n            # Desperate escape\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n    \n    # Adaptive strategy based on health situation\n    if am_losing and my_health < low_health:\n        # Defensive/cautious play when losing\n        if is_very_far:\n            if can_projectile and not opponent_blocking:\n                return 9  # Safe projectile\n            else:\n                # Position for better angle\n                if abs(relative_pos) < 0.3:\n                    return 1 if random.random() < 0.5 else 2\n                else:\n                    return 0  # Wait\n        \n        elif is_far:\n            if opponent_moving_toward and can_projectile:\n                return 9  # Projectile to slow approach\n            elif opponent_blocking:\n                # Try to flank\n                if relative_pos > 0:\n                    return 1  # Move left to flank\n                else:\n                    return 2  # Move right to flank\n            else:\n                if can_projectile:\n                    return 9\n                else:\n                    return 6  # Block while waiting\n        \n        elif is_medium:\n            if opponent_attacking:\n                return 6  # Block incoming attack\n            elif opponent_moving_toward:\n                # Maintain distance while blocking\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n            else:\n                if can_projectile and not opponent_blocking:\n                    return 9\n                else:\n                    return 6  # Defensive stance\n        \n        else:  # Close range\n            if opponent_attacking:\n                return 6  # Block\n            elif can_attack and not opponent_blocking:\n                # Quick counter-attack\n                return 4  # Fast punch\n            else:\n                # Try to create space\n                if relative_pos > 0:\n                    return 7  # Move left block\n                else:\n                    return 8  # Move right block\n    \n    elif am_winning or my_health > good_health:\n        # Aggressive play when winning\n        if is_close:\n            if opponent_blocking:\n                # Mix up attacks to break guard\n                if random.random() < 0.4:\n                    return 5  # Strong kick\n                elif random.random() < 0.6:\n                    return 4  # Fast punch\n                else:\n                    # Create space for projectile\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n            elif can_attack:\n                # Aggressive combo\n                if random.random() < 0.7:\n                    return 5  # Kick for damage\n                else:\n                    return 4  # Punch for speed\n            else:\n                # Position for next attack\n                if opponent_moving_away:\n                    if relative_pos > 0:\n                        return 2  # Chase right\n                    else:\n                        return 1  # Chase left\n                else:\n                    return 0  # Wait for cooldown\n        \n        elif is_medium:\n            if opponent_blocking:\n                # Move to better position\n                if random.random() < 0.5:\n                    if relative_pos > 0:\n                        return 2  # Move right\n                    else:\n                        return 1  # Move left\n                else:\n                    if can_projectile:\n                        return 9  # Projectile to pressure\n                    else:\n                        return 0\n            elif opponent_moving_away:\n                # Pursue aggressively\n                if relative_pos > 0:\n                    return 2  # Chase right\n                else:\n                    return 1  # Chase left\n            else:\n                # Close distance for attack\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:  # Far range\n            if can_projectile and not opponent_blocking:\n                return 9  # Projectile pressure\n            elif opponent_blocking:\n                # Advance while they block\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n            else:\n                # Maintain pressure\n                if can_projectile:\n                    return 9\n                else:\n                    if relative_pos > 0:\n                        return 2  # Move right",
      "fighting_style": "adaptive",
      "creation_time": 1748806570.4542348,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_008",
      "generation": 0,
      "fitness": 36.46666666666735,
      "win_rate": 0.5,
      "avg_reward": 36.46666666666735,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter states with bounds checking\n    my_health = max(0.0, min(1.0, state[1])) if len(state) > 1 else 1.0\n    opponent_health = max(0.0, min(1.0, state[12])) if len(state) > 12 else 1.0\n    my_velocity_x = state[2] if len(state) > 2 else 0.0\n    my_velocity_y = state[3] if len(state) > 3 else 0.0\n    opponent_velocity_x = state[13] if len(state) > 13 else 0.0\n    opponent_velocity_y = state[14] if len(state) > 14 else 0.0\n    \n    # Check attack and defense states\n    my_attacking = state[4] if len(state) > 4 else 0.0\n    my_blocking = state[5] if len(state) > 5 else 0.0\n    opponent_attacking = state[15] if len(state) > 15 else 0.0\n    opponent_blocking = state[16] if len(state) > 16 else 0.0\n    \n    # Projectile cooldown info\n    my_projectile_cooldown = state[6] if len(state) > 6 else 0.0\n    opponent_projectile_cooldown = state[17] if len(state) > 17 else 0.0\n    \n    # Define pressure fighter parameters\n    close_range = 0.12\n    medium_range = 0.25\n    corner_distance = 0.85\n    aggression_threshold = 0.6\n    critical_health = 0.3\n    desperation_health = 0.15\n    \n    # Calculate derived strategic values\n    is_close = distance < close_range\n    is_medium = close_range <= distance < medium_range\n    is_far = distance >= medium_range\n    opponent_left = relative_pos < 0\n    opponent_right = relative_pos > 0\n    winning = health_advantage > 0.1\n    losing = health_advantage < -0.1\n    critical_situation = my_health < critical_health\n    desperate = my_health < desperation_health\n    \n    # Movement direction based on opponent position\n    move_toward_opponent = 2 if opponent_right else 1\n    move_away_opponent = 1 if opponent_right else 2\n    \n    # Emergency survival mode for desperate situations\n    if desperate:\n        if opponent_attacking > 0.5:\n            return 6  # Block incoming attack\n        elif distance > 0.4 and my_projectile_cooldown < 0.3:\n            return 9  # Keep distance with projectiles\n        elif distance < 0.08:\n            return move_away_opponent  # Create space when too close\n        else:\n            return 6  # Default to blocking\n    \n    # Critical health defensive adjustments\n    if critical_situation and not winning:\n        if opponent_attacking > 0.5:\n            return 6  # Block attacks\n        elif distance > 0.35 and my_projectile_cooldown < 0.4:\n            return 9  # Use projectiles for safer damage\n        elif distance < 0.1 and random.random() < 0.4:\n            return 6  # Increased blocking chance\n    \n    # Opponent attack response - pressure fighter adapts but stays aggressive\n    if opponent_attacking > 0.5:\n        if distance < 0.1:\n            if random.random() < 0.3:\n                return 6  # Sometimes block very close attacks\n            else:\n                # Counter-attack mindset\n                return 4 if random.random() < 0.7 else 5\n        elif distance < 0.2:\n            if random.random() < 0.6:\n                return 6  # Block medium-close attacks more often\n            else:\n                return move_toward_opponent  # Keep advancing\n        else:\n            return move_toward_opponent  # Advance through their attack\n    \n    # Opponent blocking response - pressure fighter breaks through\n    if opponent_blocking > 0.5 and distance < 0.2:\n        if random.random() < 0.4:\n            return 5  # Kicks are stronger against blocks\n        elif random.random() < 0.6:\n            return 4  # Fast punches to overwhelm\n        else:\n            # Mix in movement to find openings\n            if random.random() < 0.5:\n                return 7 if opponent_right else 8  # Move while blocking\n            else:\n                return move_toward_opponent\n    \n    # Core pressure fighter range-based strategy\n    if is_close:\n        # Close range: Maximum pressure and aggression\n        if winning:\n            # Press advantage with varied attacks\n            attack_choice = random.random()\n            if attack_choice < 0.5:\n                return 4  # Fast punches\n            elif attack_choice < 0.8:\n                return 5  # Power kicks\n            else:\n                return move_toward_opponent  # Stay close\n        else:\n            # Maintain pressure even when not winning\n            if random.random() < 0.7:\n                # High attack frequency\n                return 4 if random.random() < 0.6 else 5\n            else:\n                # Occasional defensive action\n                return 6 if random.random() < 0.4 else move_toward_opponent\n    \n    elif is_medium:\n        # Medium range: Close the distance aggressively\n        if opponent_velocity_x > 0.1 and opponent_right:\n            # Opponent moving right, intercept\n            return 2\n        elif opponent_velocity_x < -0.1 and opponent_left:\n            # Opponent moving left, intercept\n            return 1\n        elif abs(height_diff) > 0.1 and random.random() < 0.3:\n            return 3  # Jump to handle height differences\n        else:\n            # Direct advance toward opponent\n            if random.random() < 0.8:\n                return move_toward_opponent\n            else:\n                # Occasional projectile to disrupt opponent timing\n                if my_projectile_cooldown < 0.3:\n                    return 9\n                else:\n                    return move_toward_opponent\n    \n    else:\n        # Far range: Close distance while using projectiles\n        if my_projectile_cooldown < 0.2:\n            if random.random() < 0.4:\n                return 9  # Projectile attack\n            else:\n                return move_toward_opponent  # Advance while projectile available\n        elif distance > 0.5:\n            # Too far, must close distance\n            if random.random() < 0.9:\n                return move_toward_opponent\n            else:\n                return 3  # Occasional jump approach\n        else:\n            # Medium-far range, aggressive advance\n            return move_toward_opponent\n    \n    # Corner pressure tactics\n    if distance < 0.3:\n        opponent_position_estimate = 0.5 + (relative_pos * distance * 0.5)\n        if opponent_position_estimate > corner_distance or opponent_position_estimate < (1.0 - corner_distance):\n            # Opponent near corner, increase pressure\n            if random.random() < 0.8:\n                return 4 if random.random() < 0.5 else 5\n            else:\n                return move_toward_opponent\n    \n    # Momentum and velocity considerations\n    if abs(my_velocity_x) > 0.15:\n        # High speed approach, prepare for attack\n        if distance < 0.2:\n            return 4  # Quick punch on",
      "fighting_style": "pressure_fighter",
      "creation_time": 1748802924.4054809,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_001",
      "generation": 0,
      "fitness": 26.340000000000853,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_attack_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_attack_status = state[17] if len(state) > 17 else 0.0\n    opponent_velocity_x = state[14] if len(state) > 14 else 0.0\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.3\n    safe_health = 0.7\n    \n    # Emergency defensive reactions - highest priority\n    if health_advantage < -0.6 and my_health < critical_health:\n        # Desperate situation - prioritize survival\n        if distance < close_range and opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        elif distance < medium_range:\n            # Create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Far range - use projectiles if available\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile to maintain distance\n            else:\n                return 6  # Block and wait\n    \n    # Defensive counter-attack opportunities\n    if opponent_attack_status > 0.7 and distance < close_range:\n        # Opponent is attacking - block then counter\n        if my_block_status < 0.3:\n            return 6  # Block first\n        else:\n            # Counter attack after successful block\n            counter_choice = random.random()\n            if counter_choice < 0.6:\n                return 4  # Quick punch counter\n            else:\n                return 5  # Powerful kick counter\n    \n    # Range-based defensive positioning\n    if distance < close_range:\n        # Close range - high risk area for defensive style\n        if health_advantage > 0.2:\n            # Slight advantage - can afford some aggression\n            if opponent_attack_status < 0.2:\n                # Safe to attack\n                attack_roll = random.random()\n                if attack_roll < 0.4:\n                    return 4  # Quick punch\n                elif attack_roll < 0.7:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Stay defensive\n            else:\n                return 6  # Block opponent's attack\n        else:\n            # Losing or even - stay defensive\n            if abs(opponent_velocity_x) > 0.3:\n                # Opponent moving fast - prepare to block\n                return 6\n            else:\n                # Look for safe counter opportunity\n                if random.random() < 0.3:\n                    return 4  # Cautious punch\n                else:\n                    return 6  # Default block\n    \n    elif distance < medium_range:\n        # Medium range - positioning phase\n        if health_advantage < -0.2:\n            # Losing - maintain safe distance\n            if relative_pos > 0:\n                return 7  # Move left with guard up\n            else:\n                return 8  # Move right with guard up\n        else:\n            # Even or winning - controlled approach\n            if opponent_attack_status > 0.5:\n                # Opponent preparing attack - stay back and block\n                return 6\n            else:\n                # Safe to position for attack\n                approach_style = random.random()\n                if approach_style < 0.4:\n                    # Direct approach\n                    if relative_pos > 0:\n                        return 1  # Move left toward opponent\n                    else:\n                        return 2  # Move right toward opponent\n                elif approach_style < 0.7:\n                    # Guarded approach\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump approach for unpredictability\n                    return 3\n    \n    elif distance < far_range:\n        # Far range - projectile and positioning game\n        if my_projectile_cooldown < 0.1:\n            # Projectile available\n            if health_advantage > 0.1:\n                # Ahead - maintain pressure with projectiles\n                return 9\n            else:\n                # Behind or even - use projectile defensively\n                projectile_decision = random.random()\n                if projectile_decision < 0.6:\n                    return 9  # Use projectile\n                else:\n                    return 6  # Stay defensive\n        else:\n            # No projectile - positioning\n            if health_advantage < -0.1:\n                # Losing - maintain distance\n                if relative_pos > 0:\n                    return 7  # Move away with guard\n                else:\n                    return 8  # Move away with guard\n            else:\n                # Even or ahead - controlled advance\n                positioning_choice = random.random()\n                if positioning_choice < 0.5:\n                    # Advance carefully\n                    if relative_pos > 0:\n                        return 7  # Guarded advance left\n                    else:\n                        return 8  # Guarded advance right\n                else:\n                    # Wait and block\n                    return 6\n    \n    else:\n        # Maximum range - long distance tactics\n        if my_projectile_cooldown < 0.1:\n            # Always use projectile at max range when available\n            return 9\n        else:\n            # No projectile available\n            if health_advantage > 0.3:\n                # Winning significantly - can afford to advance\n                advance_method = random.random()\n                if advance_method < 0.4:\n                    # Direct advance\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                elif advance_method < 0.7:\n                    # Guarded advance\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump advance\n                    return 3\n            else:\n                # Even or losing - stay back and wait\n                defensive_wait = random.random()\n                if defensive_wait < 0.8:\n                    return 6  # Block and wait\n                else:\n                    # Slight repositioning\n                    if relative_pos > 0:\n                        return 7  # Move left with guard\n                    else:\n                        return 8  # Move right with guard\n    \n    # Height-based adjustments for defensive play\n    if abs(height_diff) > 0.3:\n        if height_diff > 0:\n            # Opponent is higher - defensive ground game\n            if distance < close_range:\n                return 6  # Block high attacks\n            else:\n                return 5  # Kick to control low space\n        else:\n            # Opponent is lower - use reach advantage\n            if distance < medium_range and my_projectile_cooldown < 0.1:\n                return 9  # Projectile from height\n            else:\n                return 6  # Maintain defensive posture",
      "fighting_style": "defensive",
      "creation_time": 1748802924.405484,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen1_elite_002",
      "generation": 1,
      "fitness": 26.340000000000853,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_attack_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_attack_status = state[17] if len(state) > 17 else 0.0\n    opponent_velocity_x = state[14] if len(state) > 14 else 0.0\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.3\n    safe_health = 0.7\n    \n    # Emergency defensive reactions - highest priority\n    if health_advantage < -0.6 and my_health < critical_health:\n        # Desperate situation - prioritize survival\n        if distance < close_range and opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        elif distance < medium_range:\n            # Create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Far range - use projectiles if available\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile to maintain distance\n            else:\n                return 6  # Block and wait\n    \n    # Defensive counter-attack opportunities\n    if opponent_attack_status > 0.7 and distance < close_range:\n        # Opponent is attacking - block then counter\n        if my_block_status < 0.3:\n            return 6  # Block first\n        else:\n            # Counter attack after successful block\n            counter_choice = random.random()\n            if counter_choice < 0.6:\n                return 4  # Quick punch counter\n            else:\n                return 5  # Powerful kick counter\n    \n    # Range-based defensive positioning\n    if distance < close_range:\n        # Close range - high risk area for defensive style\n        if health_advantage > 0.2:\n            # Slight advantage - can afford some aggression\n            if opponent_attack_status < 0.2:\n                # Safe to attack\n                attack_roll = random.random()\n                if attack_roll < 0.4:\n                    return 4  # Quick punch\n                elif attack_roll < 0.7:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Stay defensive\n            else:\n                return 6  # Block opponent's attack\n        else:\n            # Losing or even - stay defensive\n            if abs(opponent_velocity_x) > 0.3:\n                # Opponent moving fast - prepare to block\n                return 6\n            else:\n                # Look for safe counter opportunity\n                if random.random() < 0.3:\n                    return 4  # Cautious punch\n                else:\n                    return 6  # Default block\n    \n    elif distance < medium_range:\n        # Medium range - positioning phase\n        if health_advantage < -0.2:\n            # Losing - maintain safe distance\n            if relative_pos > 0:\n                return 7  # Move left with guard up\n            else:\n                return 8  # Move right with guard up\n        else:\n            # Even or winning - controlled approach\n            if opponent_attack_status > 0.5:\n                # Opponent preparing attack - stay back and block\n                return 6\n            else:\n                # Safe to position for attack\n                approach_style = random.random()\n                if approach_style < 0.4:\n                    # Direct approach\n                    if relative_pos > 0:\n                        return 1  # Move left toward opponent\n                    else:\n                        return 2  # Move right toward opponent\n                elif approach_style < 0.7:\n                    # Guarded approach\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump approach for unpredictability\n                    return 3\n    \n    elif distance < far_range:\n        # Far range - projectile and positioning game\n        if my_projectile_cooldown < 0.1:\n            # Projectile available\n            if health_advantage > 0.1:\n                # Ahead - maintain pressure with projectiles\n                return 9\n            else:\n                # Behind or even - use projectile defensively\n                projectile_decision = random.random()\n                if projectile_decision < 0.6:\n                    return 9  # Use projectile\n                else:\n                    return 6  # Stay defensive\n        else:\n            # No projectile - positioning\n            if health_advantage < -0.1:\n                # Losing - maintain distance\n                if relative_pos > 0:\n                    return 7  # Move away with guard\n                else:\n                    return 8  # Move away with guard\n            else:\n                # Even or ahead - controlled advance\n                positioning_choice = random.random()\n                if positioning_choice < 0.5:\n                    # Advance carefully\n                    if relative_pos > 0:\n                        return 7  # Guarded advance left\n                    else:\n                        return 8  # Guarded advance right\n                else:\n                    # Wait and block\n                    return 6\n    \n    else:\n        # Maximum range - long distance tactics\n        if my_projectile_cooldown < 0.1:\n            # Always use projectile at max range when available\n            return 9\n        else:\n            # No projectile available\n            if health_advantage > 0.3:\n                # Winning significantly - can afford to advance\n                advance_method = random.random()\n                if advance_method < 0.4:\n                    # Direct advance\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                elif advance_method < 0.7:\n                    # Guarded advance\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump advance\n                    return 3\n            else:\n                # Even or losing - stay back and wait\n                defensive_wait = random.random()\n                if defensive_wait < 0.8:\n                    return 6  # Block and wait\n                else:\n                    # Slight repositioning\n                    if relative_pos > 0:\n                        return 7  # Move left with guard\n                    else:\n                        return 8  # Move right with guard\n    \n    # Height-based adjustments for defensive play\n    if abs(height_diff) > 0.3:\n        if height_diff > 0:\n            # Opponent is higher - defensive ground game\n            if distance < close_range:\n                return 6  # Block high attacks\n            else:\n                return 5  # Kick to control low space\n        else:\n            # Opponent is lower - use reach advantage\n            if distance < medium_range and my_projectile_cooldown < 0.1:\n                return 9  # Projectile from height\n            else:\n                return 6  # Maintain defensive posture",
      "fighting_style": "defensive",
      "creation_time": 1748803669.2450602,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen2_elite_001",
      "generation": 2,
      "fitness": 26.340000000000853,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_attack_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_attack_status = state[17] if len(state) > 17 else 0.0\n    opponent_velocity_x = state[14] if len(state) > 14 else 0.0\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.3\n    safe_health = 0.7\n    \n    # Emergency defensive reactions - highest priority\n    if health_advantage < -0.6 and my_health < critical_health:\n        # Desperate situation - prioritize survival\n        if distance < close_range and opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        elif distance < medium_range:\n            # Create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Far range - use projectiles if available\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile to maintain distance\n            else:\n                return 6  # Block and wait\n    \n    # Defensive counter-attack opportunities\n    if opponent_attack_status > 0.7 and distance < close_range:\n        # Opponent is attacking - block then counter\n        if my_block_status < 0.3:\n            return 6  # Block first\n        else:\n            # Counter attack after successful block\n            counter_choice = random.random()\n            if counter_choice < 0.6:\n                return 4  # Quick punch counter\n            else:\n                return 5  # Powerful kick counter\n    \n    # Range-based defensive positioning\n    if distance < close_range:\n        # Close range - high risk area for defensive style\n        if health_advantage > 0.2:\n            # Slight advantage - can afford some aggression\n            if opponent_attack_status < 0.2:\n                # Safe to attack\n                attack_roll = random.random()\n                if attack_roll < 0.4:\n                    return 4  # Quick punch\n                elif attack_roll < 0.7:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Stay defensive\n            else:\n                return 6  # Block opponent's attack\n        else:\n            # Losing or even - stay defensive\n            if abs(opponent_velocity_x) > 0.3:\n                # Opponent moving fast - prepare to block\n                return 6\n            else:\n                # Look for safe counter opportunity\n                if random.random() < 0.3:\n                    return 4  # Cautious punch\n                else:\n                    return 6  # Default block\n    \n    elif distance < medium_range:\n        # Medium range - positioning phase\n        if health_advantage < -0.2:\n            # Losing - maintain safe distance\n            if relative_pos > 0:\n                return 7  # Move left with guard up\n            else:\n                return 8  # Move right with guard up\n        else:\n            # Even or winning - controlled approach\n            if opponent_attack_status > 0.5:\n                # Opponent preparing attack - stay back and block\n                return 6\n            else:\n                # Safe to position for attack\n                approach_style = random.random()\n                if approach_style < 0.4:\n                    # Direct approach\n                    if relative_pos > 0:\n                        return 1  # Move left toward opponent\n                    else:\n                        return 2  # Move right toward opponent\n                elif approach_style < 0.7:\n                    # Guarded approach\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump approach for unpredictability\n                    return 3\n    \n    elif distance < far_range:\n        # Far range - projectile and positioning game\n        if my_projectile_cooldown < 0.1:\n            # Projectile available\n            if health_advantage > 0.1:\n                # Ahead - maintain pressure with projectiles\n                return 9\n            else:\n                # Behind or even - use projectile defensively\n                projectile_decision = random.random()\n                if projectile_decision < 0.6:\n                    return 9  # Use projectile\n                else:\n                    return 6  # Stay defensive\n        else:\n            # No projectile - positioning\n            if health_advantage < -0.1:\n                # Losing - maintain distance\n                if relative_pos > 0:\n                    return 7  # Move away with guard\n                else:\n                    return 8  # Move away with guard\n            else:\n                # Even or ahead - controlled advance\n                positioning_choice = random.random()\n                if positioning_choice < 0.5:\n                    # Advance carefully\n                    if relative_pos > 0:\n                        return 7  # Guarded advance left\n                    else:\n                        return 8  # Guarded advance right\n                else:\n                    # Wait and block\n                    return 6\n    \n    else:\n        # Maximum range - long distance tactics\n        if my_projectile_cooldown < 0.1:\n            # Always use projectile at max range when available\n            return 9\n        else:\n            # No projectile available\n            if health_advantage > 0.3:\n                # Winning significantly - can afford to advance\n                advance_method = random.random()\n                if advance_method < 0.4:\n                    # Direct advance\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                elif advance_method < 0.7:\n                    # Guarded advance\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump advance\n                    return 3\n            else:\n                # Even or losing - stay back and wait\n                defensive_wait = random.random()\n                if defensive_wait < 0.8:\n                    return 6  # Block and wait\n                else:\n                    # Slight repositioning\n                    if relative_pos > 0:\n                        return 7  # Move left with guard\n                    else:\n                        return 8  # Move right with guard\n    \n    # Height-based adjustments for defensive play\n    if abs(height_diff) > 0.3:\n        if height_diff > 0:\n            # Opponent is higher - defensive ground game\n            if distance < close_range:\n                return 6  # Block high attacks\n            else:\n                return 5  # Kick to control low space\n        else:\n            # Opponent is lower - use reach advantage\n            if distance < medium_range and my_projectile_cooldown < 0.1:\n                return 9  # Projectile from height\n            else:\n                return 6  # Maintain defensive posture",
      "fighting_style": "defensive",
      "creation_time": 1748804836.5378041,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen3_elite_001",
      "generation": 3,
      "fitness": 26.340000000000853,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_attack_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_attack_status = state[17] if len(state) > 17 else 0.0\n    opponent_velocity_x = state[14] if len(state) > 14 else 0.0\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.3\n    safe_health = 0.7\n    \n    # Emergency defensive reactions - highest priority\n    if health_advantage < -0.6 and my_health < critical_health:\n        # Desperate situation - prioritize survival\n        if distance < close_range and opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        elif distance < medium_range:\n            # Create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Far range - use projectiles if available\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile to maintain distance\n            else:\n                return 6  # Block and wait\n    \n    # Defensive counter-attack opportunities\n    if opponent_attack_status > 0.7 and distance < close_range:\n        # Opponent is attacking - block then counter\n        if my_block_status < 0.3:\n            return 6  # Block first\n        else:\n            # Counter attack after successful block\n            counter_choice = random.random()\n            if counter_choice < 0.6:\n                return 4  # Quick punch counter\n            else:\n                return 5  # Powerful kick counter\n    \n    # Range-based defensive positioning\n    if distance < close_range:\n        # Close range - high risk area for defensive style\n        if health_advantage > 0.2:\n            # Slight advantage - can afford some aggression\n            if opponent_attack_status < 0.2:\n                # Safe to attack\n                attack_roll = random.random()\n                if attack_roll < 0.4:\n                    return 4  # Quick punch\n                elif attack_roll < 0.7:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Stay defensive\n            else:\n                return 6  # Block opponent's attack\n        else:\n            # Losing or even - stay defensive\n            if abs(opponent_velocity_x) > 0.3:\n                # Opponent moving fast - prepare to block\n                return 6\n            else:\n                # Look for safe counter opportunity\n                if random.random() < 0.3:\n                    return 4  # Cautious punch\n                else:\n                    return 6  # Default block\n    \n    elif distance < medium_range:\n        # Medium range - positioning phase\n        if health_advantage < -0.2:\n            # Losing - maintain safe distance\n            if relative_pos > 0:\n                return 7  # Move left with guard up\n            else:\n                return 8  # Move right with guard up\n        else:\n            # Even or winning - controlled approach\n            if opponent_attack_status > 0.5:\n                # Opponent preparing attack - stay back and block\n                return 6\n            else:\n                # Safe to position for attack\n                approach_style = random.random()\n                if approach_style < 0.4:\n                    # Direct approach\n                    if relative_pos > 0:\n                        return 1  # Move left toward opponent\n                    else:\n                        return 2  # Move right toward opponent\n                elif approach_style < 0.7:\n                    # Guarded approach\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump approach for unpredictability\n                    return 3\n    \n    elif distance < far_range:\n        # Far range - projectile and positioning game\n        if my_projectile_cooldown < 0.1:\n            # Projectile available\n            if health_advantage > 0.1:\n                # Ahead - maintain pressure with projectiles\n                return 9\n            else:\n                # Behind or even - use projectile defensively\n                projectile_decision = random.random()\n                if projectile_decision < 0.6:\n                    return 9  # Use projectile\n                else:\n                    return 6  # Stay defensive\n        else:\n            # No projectile - positioning\n            if health_advantage < -0.1:\n                # Losing - maintain distance\n                if relative_pos > 0:\n                    return 7  # Move away with guard\n                else:\n                    return 8  # Move away with guard\n            else:\n                # Even or ahead - controlled advance\n                positioning_choice = random.random()\n                if positioning_choice < 0.5:\n                    # Advance carefully\n                    if relative_pos > 0:\n                        return 7  # Guarded advance left\n                    else:\n                        return 8  # Guarded advance right\n                else:\n                    # Wait and block\n                    return 6\n    \n    else:\n        # Maximum range - long distance tactics\n        if my_projectile_cooldown < 0.1:\n            # Always use projectile at max range when available\n            return 9\n        else:\n            # No projectile available\n            if health_advantage > 0.3:\n                # Winning significantly - can afford to advance\n                advance_method = random.random()\n                if advance_method < 0.4:\n                    # Direct advance\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                elif advance_method < 0.7:\n                    # Guarded advance\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump advance\n                    return 3\n            else:\n                # Even or losing - stay back and wait\n                defensive_wait = random.random()\n                if defensive_wait < 0.8:\n                    return 6  # Block and wait\n                else:\n                    # Slight repositioning\n                    if relative_pos > 0:\n                        return 7  # Move left with guard\n                    else:\n                        return 8  # Move right with guard\n    \n    # Height-based adjustments for defensive play\n    if abs(height_diff) > 0.3:\n        if height_diff > 0:\n            # Opponent is higher - defensive ground game\n            if distance < close_range:\n                return 6  # Block high attacks\n            else:\n                return 5  # Kick to control low space\n        else:\n            # Opponent is lower - use reach advantage\n            if distance < medium_range and my_projectile_cooldown < 0.1:\n                return 9  # Projectile from height\n            else:\n                return 6  # Maintain defensive posture",
      "fighting_style": "defensive",
      "creation_time": 1748805413.6256242,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen4_elite_001",
      "generation": 4,
      "fitness": 26.340000000000853,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    height_diff = state[24] if len(state) > 24 else 0.0\n    \n    # Extract fighter status information\n    my_health = state[1] if len(state) > 1 else 1.0\n    my_block_status = state[5] if len(state) > 5 else 0.0\n    my_attack_status = state[6] if len(state) > 6 else 0.0\n    my_projectile_cooldown = state[10] if len(state) > 10 else 0.0\n    \n    opponent_health = state[12] if len(state) > 12 else 1.0\n    opponent_attack_status = state[17] if len(state) > 17 else 0.0\n    opponent_velocity_x = state[14] if len(state) > 14 else 0.0\n    \n    # Define strategic thresholds for defensive play\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    critical_health = 0.3\n    safe_health = 0.7\n    \n    # Emergency defensive reactions - highest priority\n    if health_advantage < -0.6 and my_health < critical_health:\n        # Desperate situation - prioritize survival\n        if distance < close_range and opponent_attack_status > 0.5:\n            return 6  # Block incoming attack\n        elif distance < medium_range:\n            # Create distance while blocking\n            if relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        else:\n            # Far range - use projectiles if available\n            if my_projectile_cooldown < 0.1:\n                return 9  # Projectile to maintain distance\n            else:\n                return 6  # Block and wait\n    \n    # Defensive counter-attack opportunities\n    if opponent_attack_status > 0.7 and distance < close_range:\n        # Opponent is attacking - block then counter\n        if my_block_status < 0.3:\n            return 6  # Block first\n        else:\n            # Counter attack after successful block\n            counter_choice = random.random()\n            if counter_choice < 0.6:\n                return 4  # Quick punch counter\n            else:\n                return 5  # Powerful kick counter\n    \n    # Range-based defensive positioning\n    if distance < close_range:\n        # Close range - high risk area for defensive style\n        if health_advantage > 0.2:\n            # Slight advantage - can afford some aggression\n            if opponent_attack_status < 0.2:\n                # Safe to attack\n                attack_roll = random.random()\n                if attack_roll < 0.4:\n                    return 4  # Quick punch\n                elif attack_roll < 0.7:\n                    return 5  # Strong kick\n                else:\n                    return 6  # Stay defensive\n            else:\n                return 6  # Block opponent's attack\n        else:\n            # Losing or even - stay defensive\n            if abs(opponent_velocity_x) > 0.3:\n                # Opponent moving fast - prepare to block\n                return 6\n            else:\n                # Look for safe counter opportunity\n                if random.random() < 0.3:\n                    return 4  # Cautious punch\n                else:\n                    return 6  # Default block\n    \n    elif distance < medium_range:\n        # Medium range - positioning phase\n        if health_advantage < -0.2:\n            # Losing - maintain safe distance\n            if relative_pos > 0:\n                return 7  # Move left with guard up\n            else:\n                return 8  # Move right with guard up\n        else:\n            # Even or winning - controlled approach\n            if opponent_attack_status > 0.5:\n                # Opponent preparing attack - stay back and block\n                return 6\n            else:\n                # Safe to position for attack\n                approach_style = random.random()\n                if approach_style < 0.4:\n                    # Direct approach\n                    if relative_pos > 0:\n                        return 1  # Move left toward opponent\n                    else:\n                        return 2  # Move right toward opponent\n                elif approach_style < 0.7:\n                    # Guarded approach\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump approach for unpredictability\n                    return 3\n    \n    elif distance < far_range:\n        # Far range - projectile and positioning game\n        if my_projectile_cooldown < 0.1:\n            # Projectile available\n            if health_advantage > 0.1:\n                # Ahead - maintain pressure with projectiles\n                return 9\n            else:\n                # Behind or even - use projectile defensively\n                projectile_decision = random.random()\n                if projectile_decision < 0.6:\n                    return 9  # Use projectile\n                else:\n                    return 6  # Stay defensive\n        else:\n            # No projectile - positioning\n            if health_advantage < -0.1:\n                # Losing - maintain distance\n                if relative_pos > 0:\n                    return 7  # Move away with guard\n                else:\n                    return 8  # Move away with guard\n            else:\n                # Even or ahead - controlled advance\n                positioning_choice = random.random()\n                if positioning_choice < 0.5:\n                    # Advance carefully\n                    if relative_pos > 0:\n                        return 7  # Guarded advance left\n                    else:\n                        return 8  # Guarded advance right\n                else:\n                    # Wait and block\n                    return 6\n    \n    else:\n        # Maximum range - long distance tactics\n        if my_projectile_cooldown < 0.1:\n            # Always use projectile at max range when available\n            return 9\n        else:\n            # No projectile available\n            if health_advantage > 0.3:\n                # Winning significantly - can afford to advance\n                advance_method = random.random()\n                if advance_method < 0.4:\n                    # Direct advance\n                    if relative_pos > 0:\n                        return 1  # Move left\n                    else:\n                        return 2  # Move right\n                elif advance_method < 0.7:\n                    # Guarded advance\n                    if relative_pos > 0:\n                        return 7  # Move left while blocking\n                    else:\n                        return 8  # Move right while blocking\n                else:\n                    # Jump advance\n                    return 3\n            else:\n                # Even or losing - stay back and wait\n                defensive_wait = random.random()\n                if defensive_wait < 0.8:\n                    return 6  # Block and wait\n                else:\n                    # Slight repositioning\n                    if relative_pos > 0:\n                        return 7  # Move left with guard\n                    else:\n                        return 8  # Move right with guard\n    \n    # Height-based adjustments for defensive play\n    if abs(height_diff) > 0.3:\n        if height_diff > 0:\n            # Opponent is higher - defensive ground game\n            if distance < close_range:\n                return 6  # Block high attacks\n            else:\n                return 5  # Kick to control low space\n        else:\n            # Opponent is lower - use reach advantage\n            if distance < medium_range and my_projectile_cooldown < 0.1:\n                return 9  # Projectile from height\n            else:\n                return 6  # Maintain defensive posture",
      "fighting_style": "defensive",
      "creation_time": 1748806570.454242,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_000",
      "generation": 0,
      "fitness": 25.481785714286374,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "import numpy as np\nimport random\nimport math\n\ndef get_action(state):\n    # Validate and extract key state information\n    if len(state) < 26:\n        return 4  # Default punch if invalid state\n    \n    # Core state variables with bounds checking\n    distance = max(0.0, min(1.0, float(state[22])))\n    relative_pos = max(-1.0, min(1.0, float(state[23])))\n    health_advantage = max(-1.0, min(1.0, float(state[25])))\n    height_diff = float(state[24]) if len(state) > 24 else 0.0\n    \n    # My fighter status (indices 0-10)\n    my_health = max(0.0, float(state[1]))\n    my_x_pos = float(state[0])\n    my_velocity_x = float(state[2])\n    my_is_attacking = bool(state[5])\n    my_is_blocking = bool(state[6])\n    my_projectile_cooldown = max(0.0, float(state[9]))\n    my_stamina = max(0.0, float(state[10]))\n    \n    # Opponent status (indices 11-21)\n    opp_health = max(0.0, float(state[12]))\n    opp_x_pos = float(state[11])\n    opp_is_attacking = bool(state[16])\n    opp_is_blocking = bool(state[17])\n    opp_projectile_cooldown = max(0.0, float(state[20]))\n    \n    # Tactical range definitions\n    close_range = 0.12\n    medium_range = 0.28\n    far_range = 0.45\n    \n    # Aggressive style parameters\n    base_aggression = 0.85\n    chase_threshold = 0.6\n    pressure_distance = 0.35\n    attack_mix_ratio = 0.65\n    \n    # Health-based aggression modifiers\n    if health_advantage > 0.4:\n        aggression_modifier = 1.2  # Even more aggressive when winning\n    elif health_advantage > 0.0:\n        aggression_modifier = 1.0  # Standard aggression\n    elif health_advantage > -0.3:\n        aggression_modifier = 0.9  # Slightly less reckless\n    else:\n        aggression_modifier = 0.7  # Desperate but still aggressive\n    \n    final_aggression = min(1.0, base_aggression * aggression_modifier)\n    \n    # Emergency defensive situations\n    if my_health < 0.2 and health_advantage < -0.5:\n        if distance < close_range and opp_is_attacking:\n            return 6  # Block incoming attack\n        elif distance > medium_range:\n            return 9  # Try projectile for chip damage\n    \n    # Counter-attack when opponent is vulnerable\n    if opp_is_attacking and distance < close_range:\n        if random.random() < 0.3:  # Sometimes block, but prefer trading\n            return 6\n        else:\n            return 5 if random.random() < 0.7 else 4  # Favor kick counter\n    \n    # Aggressive close-range combat\n    if distance <= close_range:\n        # Don't block too much - stay aggressive\n        if opp_is_blocking and random.random() < 0.4:\n            return 5  # Kick to break guard\n        \n        # Mix up attacks heavily in close range\n        attack_choice = random.random()\n        if attack_choice < 0.4:\n            return 4  # Quick punch\n        elif attack_choice < 0.75:\n            return 5  # Strong kick\n        else:\n            # Occasional movement to reset positioning\n            if relative_pos > 0:\n                return 2  # Move right to maintain pressure\n            else:\n                return 1  # Move left to maintain pressure\n    \n    # Medium range - positioning for aggression\n    elif distance <= medium_range:\n        # Always move toward opponent for pressure\n        movement_urgency = random.random()\n        \n        if movement_urgency < final_aggression:\n            # Direct approach\n            if relative_pos > 0.1:\n                return 2  # Chase right\n            elif relative_pos < -0.1:\n                return 1  # Chase left\n            else:\n                # Close enough to attack\n                if random.random() < 0.6:\n                    return 4  # Quick punch to close gap\n                else:\n                    return 5  # Kick\n        else:\n            # Cautious approach with blocking movement\n            if relative_pos > 0:\n                return 8  # Move right while blocking\n            else:\n                return 7  # Move left while blocking\n    \n    # Far range - close distance aggressively\n    elif distance <= far_range:\n        # Projectile if available and tactical\n        projectile_chance = 0.3 - (final_aggression * 0.2)  # Less projectiles when more aggressive\n        \n        if my_projectile_cooldown <= 0 and random.random() < projectile_chance:\n            return 9  # Projectile\n        \n        # Mostly chase opponent\n        chase_urgency = random.random()\n        if chase_urgency < final_aggression:\n            # Direct chase\n            if relative_pos > 0:\n                return 2\n            else:\n                return 1\n        else:\n            # Protected advance\n            if relative_pos > 0:\n                return 8\n            else:\n                return 7\n    \n    # Very far range - mixed approach\n    else:\n        # Use projectiles more at very long range\n        if my_projectile_cooldown <= 0 and random.random() < 0.6:\n            return 9\n        \n        # Jump forward occasionally for surprise\n        if random.random() < 0.15:\n            return 3\n        \n        # Otherwise close distance\n        if relative_pos > 0:\n            return 2\n        else:\n            return 1\n    \n    # Height advantage tactics\n    if abs(height_diff) > 0.3:\n        if height_diff > 0:  # I'm higher\n            if distance < close_range:\n                return 5  # Kick down\n            else:\n                return 9  # Projectile down\n        else:  # Opponent is higher\n            if distance < medium_range:\n                return 3  # Jump up\n            else:\n                # Close distance first\n                if relative_pos > 0:\n                    return 2\n                else:\n                    return 1\n    \n    # Stamina management - stay aggressive but smart\n    if my_stamina < 0.3:\n        if distance < close_range and opp_is_attacking:\n            return 6  # Block to recover stamina\n        elif distance > medium_range:\n            return 9  # Low stamina projectile\n        else:\n            # Light attacks to maintain pressure\n            return 4\n    \n    # Opponent behavior adaptation\n    if opp_is_blocking and distance < medium_range:\n        # Break guard with kicks or positioning\n        if random.random() < 0.6:\n            return 5  # Kick\n        else:\n            # Move to different angle\n            if random.random() < 0.5:\n                return 1\n            else:\n                return 2\n    \n    # Opponent projectile management\n    if opp_projectile_cooldown <= 0 and distance > medium_range:\n        # Close distance quickly before they can projectile\n        if relative_pos > 0:\n            return 2\n        else:\n            return 1\n    \n    # Pressure maintenance - don't let opponent breathe\n    if distance < pressure_distance:\n        pressure_action = random.random()\n        if pressure_action < 0.35:\n            return 4  # Quick punch\n        elif pressure_action < 0.65:\n            return 5  # Strong kick\n        elif pressure_action < 0.8:\n            # Reposition for continued pressure\n            if relative_pos > 0:\n                return 2\n            else:\n                return",
      "fighting_style": "aggressive",
      "creation_time": 1748802924.405486,
      "tournament_stats": {},
      "lineage": []
    },
    {
      "agent_id": "gen0_agent_005",
      "generation": 0,
      "fitness": 25.38900000000064,
      "win_rate": 0.5,
      "avg_reward": 0.0,
      "code": "def get_action(state):\n    import random\n    import numpy as np\n    \n    # Extract and validate key strategic information\n    distance = max(0.0, min(1.0, state[22]))\n    relative_pos = max(-1.0, min(1.0, state[23]))\n    health_advantage = max(-1.0, min(1.0, state[25]))\n    \n    # Extract fighter status information\n    my_health = max(0.0, min(1.0, state[3]))\n    opponent_health = max(0.0, min(1.0, state[14]))\n    my_attack_status = state[6]\n    opponent_attack_status = state[17]\n    my_block_status = state[7]\n    opponent_block_status = state[18]\n    my_projectile_cooldown = max(0.0, state[10])\n    opponent_projectile_cooldown = max(0.0, state[21])\n    height_difference = state[24]\n    \n    # Define strategic parameters for rushdown style\n    close_range = 0.12\n    medium_range = 0.25\n    far_range = 0.4\n    critical_health = 0.2\n    dominant_health = 0.3\n    \n    # Rushdown aggression factors\n    base_aggression = 0.8\n    health_desperation = 0.9\n    winning_aggression = 0.85\n    \n    # Emergency defensive mode when critically low health\n    if my_health < critical_health and health_advantage < -0.4:\n        if distance < close_range:\n            if opponent_attack_status > 0:\n                return 6  # Block incoming attack\n            elif relative_pos > 0:\n                return 7  # Move left while blocking\n            else:\n                return 8  # Move right while blocking\n        elif distance < medium_range:\n            if my_projectile_cooldown <= 0:\n                return 9  # Projectile to create space\n            else:\n                return 6  # Block and wait\n        else:\n            if my_projectile_cooldown <= 0:\n                return 9  # Long range projectile\n            else:\n                return 0  # Wait for cooldown\n    \n    # Rushdown primary strategy - get close and attack\n    if distance > far_range:\n        # Too far - need to close distance quickly\n        if my_projectile_cooldown <= 0 and random.random() < 0.3:\n            return 9  # Occasional projectile while closing\n        elif relative_pos > 0.1:\n            return 2  # Rush right toward opponent\n        elif relative_pos < -0.1:\n            return 1  # Rush left toward opponent\n        else:\n            return 2 if random.random() < 0.5 else 1  # Random approach\n    \n    elif distance > medium_range:\n        # Medium-far range - aggressive approach with some caution\n        if opponent_projectile_cooldown <= 0 and random.random() < 0.4:\n            # Opponent might projectile, be ready\n            if relative_pos > 0:\n                return 8  # Move right with block\n            else:\n                return 7  # Move left with block\n        elif my_projectile_cooldown <= 0 and random.random() < 0.25:\n            return 9  # Quick projectile before closing\n        else:\n            # Aggressive approach\n            if relative_pos > 0:\n                return 2  # Move right\n            else:\n                return 1  # Move left\n    \n    elif distance > close_range:\n        # Medium range - prime rushdown positioning\n        if opponent_attack_status > 0:\n            # Opponent is attacking, decide counter-strategy\n            if health_advantage > 0.2:\n                # Winning, can afford to trade or rush through\n                if relative_pos > 0:\n                    return 2  # Rush through attack\n                else:\n                    return 1  # Rush through attack\n            else:\n                # Need to be more careful\n                if random.random() < 0.6:\n                    return 6  # Block the attack\n                else:\n                    return 3  # Jump over attack\n        \n        elif opponent_block_status > 0:\n            # Opponent blocking, mix up approach\n            if random.random() < 0.4:\n                return 3  # Jump to confuse timing\n            elif random.random() < 0.3:\n                if my_projectile_cooldown <= 0:\n                    return 9  # Projectile to break guard\n                else:\n                    return 5  # Strong kick to break guard\n            else:\n                # Continue approach\n                if relative_pos > 0:\n                    return 2  # Move right\n                else:\n                    return 1  # Move left\n        \n        else:\n            # Opponent neutral, perfect rush opportunity\n            rush_chance = base_aggression\n            if health_advantage > dominant_health:\n                rush_chance = winning_aggression\n            elif health_advantage < -dominant_health:\n                rush_chance = health_desperation\n            \n            if random.random() < rush_chance:\n                if relative_pos > 0:\n                    return 2  # Aggressive approach right\n                else:\n                    return 1  # Aggressive approach left\n            else:\n                return 3  # Jump approach for unpredictability\n    \n    else:\n        # Close range - prime rushdown combat zone\n        if opponent_block_status > 0:\n            # Opponent blocking, need to break guard\n            mix_options = []\n            if random.random() < 0.3:\n                mix_options.append(5)  # Heavy kick to break guard\n            if random.random() < 0.2:\n                mix_options.append(3)  # Jump for overhead\n            if my_projectile_cooldown <= 0 and random.random() < 0.15:\n                mix_options.append(9)  # Point blank projectile\n            if random.random() < 0.35:\n                mix_options.append(4)  # Fast punch to pressure\n            \n            if mix_options:\n                return random.choice(mix_options)\n            else:\n                return 5  # Default guard break attempt\n        \n        elif opponent_attack_status > 0:\n            # Opponent attacking in close range\n            if my_health > opponent_health * 1.3:\n                # Healthy enough to trade hits\n                counter_options = [4, 5]  # Counter attack\n                if random.random() < 0.7:\n                    return random.choice(counter_options)\n                else:\n                    return 6  # Block occasionally\n            else:\n                # Need to be defensive\n                if random.random() < 0.7:\n                    return 6  # Block most attacks\n                elif random.random() < 0.5:\n                    return 3  # Jump to escape\n                else:\n                    return 4  # Quick counter punch\n        \n        else:\n            # Opponent neutral in close range - prime attack opportunity\n            attack_intensity = base_aggression\n            \n            # Adjust intensity based on health situation\n            if health_advantage > dominant_health:\n                attack_intensity = 0.95  # Maximum aggression when winning\n            elif health_advantage < -dominant_health:\n                attack_intensity = health_desperation  # Desperate attacks when losing\n            elif my_health < critical_health:\n                attack_intensity = 0.92  # High aggression when low health\n            \n            if random.random() < attack_intensity:\n                # Choose attack type based on situation\n                attack_choice = random.random()\n                \n                if attack_choice < 0.45:\n                    return 4  # Fast punch - rushdown bread and butter\n                elif attack_choice < 0.75:\n                    return 5  # Heavy kick - more damage\n                elif attack_choice < 0.85:\n                    # Mix in movement attacks\n                    if relative_pos > 0:\n                        return 2  # Aggressive positioning\n                    else:\n                        return 1  # Aggressive positioning\n                elif attack_choice < 0.92:\n                    return 3  # Jump attack for mix-up",
      "fighting_style": "rushdown",
      "creation_time": 1748802924.405488,
      "tournament_stats": {},
      "lineage": []
    }
  ]
}